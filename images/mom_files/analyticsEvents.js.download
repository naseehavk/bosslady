/******/ (function() { // webpackBootstrap
/******/ 	"use strict";
/******/ 	var __webpack_modules__ = ({

/***/ "./cartridges/plugin_adobe_custom/cartridge/client/default/js/analytics/analyticsEvents.js":
/*!*************************************************************************************************!*\
  !*** ./cartridges/plugin_adobe_custom/cartridge/client/default/js/analytics/analyticsEvents.js ***!
  \*************************************************************************************************/
/***/ (function(module, __unused_webpack_exports, __webpack_require__) {



function _defineProperty(obj, key, value) { if (key in obj) { Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true }); } else { obj[key] = value; } return obj; }

var $body = window.$('body');

var errorEventCodes = __webpack_require__(/*! ../../../../config/analyticsErrorCodes.json */ "./cartridges/plugin_adobe_custom/cartridge/config/analyticsErrorCodes.json");

var ERRORCODE = {
  MISSINGCARDNUMBER: '1000',
  INVALIDCARDNUMBER: '1001',
  MISSINGCARDEXPIRTAION: '1002',
  INVALIDCARDEXPIRATION: '1003',
  MISSINGCARDSECURITYCODE: '1004',
  INVALIDCARDSECURITYCODE: '1005',
  MISSINGCARDNAME: '1006',
  MISSINGORDERNUMBER: '1007',
  MISSINGORDEREMAILADDRESS: '1008',
  INVALIDORDEREMAILCOMBINATION: '1009',
  MISSINGADDTOBAGSIZE: '1010',
  PRODUCTOUTOFSTOCK: '1011',
  FAVORITESINVALIDEMAIL: '1012',
  FAVORITESMISSINGEMAIL: '1013',
  LOGINMISSINGEMAIL: '1014',
  LOGININVALIDEMAIL: '1015',
  LOGINMISSINGPASSWORD: '1016',
  LOGININVALIDPASSWORD: '1017',
  LOGININVALIDGUEST: '1018',
  LOGININVALIDREGISTERED: '1019',
  LOGINACCOUNTLOCKED: '1020',
  CHECKOUTMISSINGNAME: '1021',
  CHECKOUTNAMELENGTH: '1022',
  CHECKOUTMISSINGFIRSTNAME: '1023',
  CHECKOUTINVALIDFIRSTNAME: '1024',
  CHECKOUTMISSINGLASTNAME: '1025',
  CHECKOUTINVALIDLASTNAME: '1026',
  CHECKOUTMISSINGNUMBER: '1027',
  CHECKOUTINVALIDNUMBER: '1028',
  CHECKOUTMISSINGADDRESS: '1029',
  CHECKOUTMISSINGCITY: '1030',
  CHECKOUTMISSINGSTATE: '1031',
  CHECKOUTMISSINGZIPCODE: '1032',
  CHECKOUTINVALIDZIPCODE: '1033',
  ORDERINVENTORYUNAVAILABLE: '1034',
  CHECKOUTMISSINGGIFTCARD: '1035',
  CHECKOUTINVALIDGIFTCARD: '1036',
  CHECKOUTMISSINGGIFTCARDPIN: '1037',
  CHECKOUTINVALIDGIFTCARDPIN: '1038',
  PICKUPINSTOREQUICKVIEW: '1039',
  CHECKOUTGIFTCARDZEROBALANCE: '1040',
  PICKUPINSTOREPDP: '1041',
  CHECKOUTMAXGIFTCARDAPPLIED: '1042',
  CHECKOUTCONFIRMPICKUPSTORE: '1043',
  PDPGIFTCARDINVALIDAMOUNTDECIMAL: '1044',
  PDPGIFTCARDINVALIDAMOUNT: '1045',
  PICKUPINSTORECARTPAGE: '1046',
  PDPGIFTCARDYOURNAMEERROR: '1047',
  PDPGIFTCARDRECIPIENTNAMEERROR: '1048',
  PDPGIFTCARDRECIPIENTMISSINGEMAIL: '1049',
  PDPGIFTCARDRECIPIENTINVALIDEMAIL: '1050',
  PDPGIFTCARDRECIPIENTMISSINGCONFIRMEMAIL: '1051',
  PDPGIFTCARDRECIPIENTINVALIDCONFIRMEMAIL: '1052',
  PDPGIFTCARDRECIPIENTEMAILMISMATCH: '1053',
  PDPGIFTCARDAMOUNT: '1054',
  SHIPPINGRESTRICTION: '1055',
  GUESTORDERNUMBER: '1056',
  GUESTORDEREMAIL: '1057',
  GUESTORDERERROR: '1058',
  INVALIDGIFTNOTE: '1059',
  CARTFAVORITESSHAREERROR: '1060',
  CARTFAVORITESMOVETOBAGERROR: '1061',
  CARTOUTOFSTOCK: '1062',
  CARTUNABLETOREMOVE: '1063',
  PICKUPINSTOREUNAVAILABLE: '1064',
  PICKUPINSTOREMISSINGERROR: '1065',
  PICKUPINSTOREINVALIDERROR: '1066',
  CREATEACCOUNTALREADYEXISTS: '1067',
  CREATEACCOUNTEMAILMISSING: '1068',
  CREATEACCOUNTFIRSTNAMEMISSING: '1069',
  CREATEACCOUNTLASTNAMEMISSING: '1070',
  CREATEACCOUNTPASSWORDMISSING: '1071',
  CREATEACCOUNTCONFIRMPASSWORDMISSING: '1072',
  CREATEACCOUNTINVALIDNUMBER: '1073',
  CREATEACCOUNTINVALIDPASSWORD: '1074',
  CREATEACCOUNTPASSWORDMISMATCH: '1075',
  CREATEACCOUNTINVALIDBIRTHDATE: '1076',
  CREATEACCOUNTTERMSANDCONDITIONSMISSING: '1077',
  GIFTCARDINVALIDNUMBER: '1078',
  GIFTCARDINVALIDPIN: '1079',
  GIFTCARDCHECKBALANCE: '1080',
  STOREAVAILABILITYPRODUCTERROR: '1081',
  EMPLOYEEIDMISSING: '1082',
  EMPLOYEEBIRTHDATEMISSING: '1083',
  EMPLOYEESECURITYCODEMISSING: '1084',
  EMPLOYEEINVALIDID: '1085',
  EMPLOYEEINVALIDIDCOMBINATION: '1086',
  EMPLOYEEINVALIDSECURITYCODE: '1087',
  EMPLOYEEINVALIDCOUPON: '1088',
  EMPLOYEEINVALIDPROMO: '1089',
  SHIPPINGLASTNAMEMISSING: '1090',
  SHIPPINGFIRTNAMEMISSING: '1091',
  EXPIREDCREDITCARD: '1092',
  SHIPPINGPHONEMISSING: '1093',
  SHIPPINGPICKUPINSTOREERROR: '1094',
  PROMOCODEMISSING: '1095',
  PROMOCODEINVALID: '1096',
  PROMOCODEEXPIRED: '1097',
  PROMOCODEALREADYUSED: '1098',
  PROMOCODECANNOTCOMBINE: '1099',
  FAVORITESSELECTOPTIONS: '1100',
  FORGOTPASSWORDEMAILMISSING: '1101',
  FORGOTPASSWORDEMAILINVALID: '1102',
  GUESTORDERINVALIDEMAIL: '1103',
  CHECKOUTADDRESSINFORMATION: '1115',
  NEWSLETTEREMAILMISSING: '1120',
  COUPONNOTAPPLIED: '1121'
};
var $querystring = window.$('.page').data('querystring');
/**
 * Get Onetrust enable flag true/false
 * @returns {boolean} true or false
 */

function getIsOneTrustEnabledFlag() {
  var datalayerView = JSON.parse(document.getElementById('analytics-datalayer').getAttribute('data-tracking-view'))[0];

  if (datalayerView) {
    if (datalayerView.page && datalayerView.page.isOneTrustEnabled !== undefined) {
      return datalayerView.page.isOneTrustEnabled;
    }
  }

  return false;
}
/**
 * Update data-usertype for the Body tag and
 * shows the respective footer My account section based on user status.
 */


function updateUserType() {
  var userAuthenticated = window.$('#analytics-datalayer-userdata').attr('data-usertype');

  if (userAuthenticated === 'true') {
    window.$('body').attr('data-usertype', 'registered-user');
    window.$('#footerMyAccountForLoggedIn').removeClass('d-none');
    window.$('#footerMyAccountForGuest').addClass('d-none');
  } else {
    window.$('body').attr('data-usertype', 'guest-user');
    window.$('#footerMyAccountForGuest').removeClass('d-none');
    window.$('#footerMyAccountForLoggedIn').addClass('d-none');
  }
}
/**
 * Creates and dispatches an event trigger
 * @param {string} evt - The name of the event
 */


function dispatchJSEvent(evt) {
  var event;

  if (document.createEvent && document.body.dispatchEvent) {
    event = document.createEvent('Event');
    event.initEvent(evt, true, true); // can bubble, and is cancellable

    document.body.dispatchEvent(event);
  } else if (window.CustomEvent && document.body.dispatchEvent) {
    event = new CustomEvent(evt, {
      bubbles: true,
      cancelable: true
    });
    document.body.dispatchEvent(event);
  }
}
/**
 * Creates and retry logic before dispatches an event
 * @param {string} evt - The name of the event
 */


function sendCustomEvent(evt) {
  /* istanbul ignore if */
  if (typeof window._satellite !== 'undefined') {
    // eslint-disable-line no-underscore-dangle
    dispatchJSEvent(evt);
  } else {
    var removeInterval = 0;
    var checkExist = setInterval(function () {
      console.log('_satellite does not exist, now in set interval'); // eslint-disable-line no-console

      if (typeof window._satellite !== 'undefined') {
        // eslint-disable-line no-underscore-dangle
        clearInterval(checkExist);
        dispatchJSEvent(evt);
      } else if (++removeInterval === 5) {
        clearInterval(checkExist);
        console.log('custom event not sent after 5 attemps: ' + evt); // eslint-disable-line no-console
      }
    }, 3000); // check every 3 seconds
  }
}
/**
 * @description : Trigger the dlotReady Event
 * The event will be triggered once the mkorsData object becomes available within the 5 intervals lasting 3 seconds.
 */


function triggerdlotReadyEvent() {
  var event = {
    eventInfo: {
      eventName: 'dlotReady',
      timeStamp: new Date(),
      processed: {
        adobeAnalytics: false,
        vendorTags: false
      }
    }
  };

  if (typeof window.mkorsData !== 'undefined') {
    if (typeof window.mkorsData.event === 'undefined') {
      window.mkorsData.event = [];
    }

    window.mkorsData.event.push(event);
    sendCustomEvent('dlotReady');
  } else {
    var removeInterval = 0;
    var checkExist = setInterval(function () {
      console.log('mkorsData does not exist, now in set interval'); // eslint-disable-line no-console

      if (typeof window.mkorsData !== 'undefined') {
        // eslint-disable-line no-underscore-dangle
        clearInterval(checkExist);

        if (typeof window.mkorsData.event === 'undefined') {
          window.mkorsData.event = [];
        }

        window.mkorsData.event.push(event);
        sendCustomEvent('dlotReady');
        console.log('dlotReady is trigger'); // eslint-disable-line no-console
      } else if (++removeInterval === 5) {
        clearInterval(checkExist);
        console.log('mkorsData object not available after 5 attemps'); // eslint-disable-line no-console
      }
    }, 3000);
  }
}
/**
 * @description : The isOneTrustGroupsUpdated method call
 * @returns {boolean} true or false
 *  The method will be call the triggerdlotReady event whenever the OnetrustActiveGroups object becomes available within the 5 intervals lasting 3 seconds.
 */


function isOneTrustGroupsUpdated() {
  if (window.dataLayer) {
    var otDataLayer = window.dataLayer;

    for (var otDataLayerItem = otDataLayer.length - 1; otDataLayerItem >= 0; otDataLayerItem--) {
      if (otDataLayer[otDataLayerItem].event && otDataLayer[otDataLayerItem].event === 'OneTrustGroupsUpdated' && otDataLayer[otDataLayerItem].OnetrustActiveGroups && otDataLayer[otDataLayerItem].OnetrustActiveGroups.length > 2) {
        return true;
      }
    }
  }

  return false;
}
/**
 * @description : The isOnetrustActiveGroupsReady method call
 *  The method will be call the triggerdlotReady event whenever the OnetrustActiveGroups object becomes available within the 5 intervals lasting 3 seconds.
 */


function isOnetrustActiveGroupsReady() {
  if (isOneTrustGroupsUpdated()) {
    triggerdlotReadyEvent();
  } else {
    var removeInterval = 0;
    var checkExist = setInterval(function () {
      console.log('OnetrustActiveGroups does not exist, now in set interval'); // eslint-disable-line no-console

      if (isOneTrustGroupsUpdated()) {
        // eslint-disable-line no-underscore-dangle
        clearInterval(checkExist);
        triggerdlotReadyEvent();
      } else if (++removeInterval === 5) {
        clearInterval(checkExist);
        console.log('OnetrustActiveGroups object not available after 5 attemps'); // eslint-disable-line no-console
      }
    }, 3000);
  }
}
/**
 * Push keyword Search  event data to the datalayer mkorsData object
 * @param {string} keywordSearch - The name of the event
 * @param {string} keywords - The keywords of the event
*/


function keywordSearchSuccess() {
  var success = sessionStorage.getItem('keywordSearch') ? sessionStorage.getItem('keywordSearch') : [];

  if (success.length > 0) {
    var JSONsuccess = JSON.parse(success);
    JSONsuccess.eventInfo.keywords = window.mkorsData.search.keyword;
    JSONsuccess.eventInfo.timeStamp = new Date();
    window.mkorsData.event.push(JSONsuccess);
    sendCustomEvent('keywordSearch');
  }

  sessionStorage.removeItem('keywordSearch');
}
/**
 * Check if the event is triggered twice
 * @param {string} eventName - The name of the event
 * @param {string} timestamp - The timestamp of the event
 * @returns {boolean} true or false
 */


function pushToDatalayerEvent(eventName, timestamp) {
  if (window.mkorsData && window.mkorsData.event && window.mkorsData.event.length > 0) {
    var lastEvent = window.mkorsData.event[window.mkorsData.event.length - 1];

    if (lastEvent && lastEvent.eventInfo && lastEvent.eventInfo.eventName && lastEvent.eventInfo.timeStamp) {
      if (lastEvent.eventInfo.eventName === eventName) {
        if ((timestamp - lastEvent.eventInfo.timeStamp) / 1000 < 5) {
          return false;
        }
      }
    }

    return true;
  }
}
/**
  * Push form error events to the datalayer mkorsData object
  * @param {Object} errorEvent The current error event
   */


function pushToMkorsData(errorEvent) {
  if (typeof window.mkorsData.event === 'undefined') {
    window.mkorsData.event = [];
  }

  var errorEventsSessionValue;
  errorEventsSessionValue = JSON.parse(sessionStorage.getItem('errorEventsSession'));

  if (!errorEventsSessionValue) {
    errorEventsSessionValue = {};
    sessionStorage.setItem('errorEventsSession', JSON.stringify(errorEventsSessionValue));
  }

  var errorEventsReadyToPush = {};
  var eventNewTimeStamp = Date.parse(errorEvent.eventInfo.timeStamp) / 1000;
  errorEventsReadyToPush["'" + errorEvent.eventInfo.error.errorCode + "'"] = eventNewTimeStamp;

  if (!errorEventsSessionValue["'" + errorEvent.eventInfo.error.errorCode + "'"]) {
    window.mkorsData.event.push(errorEvent);
  } else {
    var oldTimestamp = errorEventsSessionValue["'" + errorEvent.eventInfo.error.errorCode + "'"];
    var newTimeStamp = eventNewTimeStamp;
    var timeDiff = newTimeStamp - oldTimestamp;

    if (timeDiff > 10) {
      window.mkorsData.event.push(errorEvent);
    }
  }

  window.$.extend(errorEventsSessionValue, errorEventsReadyToPush);
  var errorEvents = JSON.stringify(errorEventsSessionValue);
  sessionStorage.setItem('errorEventsSession', errorEvents);
}
/**
 * @description responsive view
 * @returns {string} returns rsponsive view
 */


function getResponsiveView() {
  var responsiveView = 'large';

  if (typeof window !== 'undefined') {
    var windowInnerWidth = Math.max(document.documentElement.clientWidth, window.innerWidth || 0);

    switch (true) {
      case windowInnerWidth < 640:
        responsiveView = 'small';
        break;

      case windowInnerWidth < 768:
        responsiveView = 'smedium';
        break;

      case windowInnerWidth < 1024:
        responsiveView = 'medium';
        break;

      case windowInnerWidth < 1440:
        responsiveView = 'large';
        break;

      case windowInnerWidth < 1900:
        responsiveView = 'xlarge';
        break;

      default:
        responsiveView = 'xxlarge';
        break;
    }
  }

  return responsiveView;
}
/**
 * @description Get productID in the PDP page interaction for mkorsData object
 * @param {Object} currentEle is this element refernce
 * @returns {string} productID returns the current productID
 */


function getProductID(currentEle) {
  var productID;
  var product;
  var productSet;
  productSet = window.$(currentEle).closest('.image-detail-container');

  if (productSet.length > 0 && productSet[0].dataset && productSet[0].dataset.pid) {
    productID = productSet[0].dataset.pid;
  } else if (window.$('.product-quickview, .product-detail').length > 0) {
    product = window.$(currentEle).closest('.product-quickview, .product-detail');

    if (product.length > 0 && product[0].dataset && product[0].dataset.pid) {
      productID = product[0].dataset.pid;
    }
  }

  return productID;
}
/**
 * @description Get productID in the PDP page interaction for mkorsData object
 * @param {string} productID is this element refernce
 * @returns {Object} returns  The product details object
 */


function getProductDetails(productID) {
  var data;
  var productInteraction;
  var productimageInteractionData;

  if (sessionStorage.getItem('quickviewEventJson') && sessionStorage.getItem('quickviewEventJson') !== 'undefined') {
    if (window.mkorsData && window.mkorsData.product && window.mkorsData.product.length > 0) {
      productInteraction = JSON.parse(sessionStorage.getItem('quickviewEventJson'));

      if (productInteraction && productInteraction.length > 0 && productInteraction[0].mfrItemNum && productInteraction[0].mfrItemNum === productID) {
        productimageInteractionData = productInteraction;
      }
    }
  }

  var quickviewProduct = sessionStorage.getItem('quickviewEventJson') ? sessionStorage.getItem('quickviewEventJson') : [];
  var productDetails = document.getElementById('analytics-productDetails-event');
  var productSetDetails = document.getElementById('analytics-productset-event');

  if (productDetails) {
    var pdp = productDetails.getAttribute('data-tracking-event');
    data = JSON.parse(pdp);
  } else if (productSetDetails) {
    var productSet = JSON.parse(productSetDetails.getAttribute('data-tracking-event'));

    if (productSet && productSet.length > 0) {
      for (var i = 0; i < productSet.length; i++) {
        if (productID === productSet[i].productID || productID === productSet[i].lookID) {
          data = productSet[i];
          break;
        }
      }
    }
  } else if (quickviewProduct) {
    data = JSON.parse(quickviewProduct);
  }

  return productimageInteractionData || data;
}
/**
 * @description : Trigger Analytics Events - All analytics events to be defined here.
 * The event trigger should be done in the respective client JS.
 */


function analyticsEvents() {
  /* The event captures favourites show more or show less event */
  $body.on('event:wlItemsShowMoreLessEvent', function () {
    if (typeof window.mkorsData.event === 'undefined') {
      window.mkorsData.event = [];
    }

    var favShowMoreLessData = document.querySelector('[data-analytics-favShowMoreLess]');

    if (favShowMoreLessData) {
      var favShowMoreLess = favShowMoreLessData.getAttribute('data-analytics-favShowMoreLess');

      if (favShowMoreLess) {
        var wlItemsShowMoreLess = JSON.parse(favShowMoreLess);

        if (wlItemsShowMoreLess && wlItemsShowMoreLess.eventInfo) {
          wlItemsShowMoreLess.eventInfo.timeStamp = new Date();
          window.mkorsData.event.push(wlItemsShowMoreLess);
          sendCustomEvent(wlItemsShowMoreLess.eventInfo.eventName);
        }
      }
    }
  });
  /* The event captures product notify me  */

  $body.on('event:notifyMeEvent', function (e, data) {
    if (typeof window.mkorsData.event === 'undefined') {
      window.mkorsData.event = [];
    }

    var notifyEvent = data.notifyMeEventJSON[0];

    if (notifyEvent && notifyEvent.eventInfo) {
      notifyEvent.eventInfo.timeStamp = new Date();
      window.mkorsData.event.push(notifyEvent);
    }

    sendCustomEvent('notifyMe');
  });
  /* The event captures product notify me success event  */

  $body.on('event:notifyMeEventOnSuccess', function (e, data) {
    if (typeof window.mkorsData.event === 'undefined') {
      window.mkorsData.event = [];
    }

    var notifyMeSuccessEvent = data.notifyMeSuccessEventJSON[0];

    if (notifyMeSuccessEvent && notifyMeSuccessEvent.eventInfo) {
      notifyMeSuccessEvent.eventInfo.timeStamp = new Date();
      window.mkorsData.event.push(notifyMeSuccessEvent);
    }

    sendCustomEvent('notifyMeSuccess');
  });
  /* The event captures Store Search Query */

  $body.on('event:storeSearchQuery', function (e, data) {
    if (typeof window.mkorsData.event === 'undefined') {
      window.mkorsData.event = [];
    }

    var selectedQuantity = window.$('.quantity-select').val();
    var storeSearchQueryData = data.storeQuerySearchJSON ? data.storeQuerySearchJSON[0] : '';

    if (storeSearchQueryData && storeSearchQueryData.eventInfo) {
      storeSearchQueryData.eventInfo.timeStamp = new Date();

      if (selectedQuantity && storeSearchQueryData.product && storeSearchQueryData.product.quantity) {
        storeSearchQueryData.product.quantity = selectedQuantity;
      }

      window.mkorsData.event.push(storeSearchQueryData);
      sendCustomEvent('pickUpInStoreSearch');
      var errorCode;
      var errorPageType;

      if (storeSearchQueryData.availabilityInfo && storeSearchQueryData.availabilityInfo.inStock === 0 && storeSearchQueryData.availabilityInfo.limitedAvailabilityType === 'N') {
        if (window.mkorsData && window.mkorsData.page && window.mkorsData.page.type) {
          if (window.mkorsData.page.type === 'Shopping Cart') {
            errorCode = ERRORCODE.PICKUPINSTORECARTPAGE;
          } else if (window.mkorsData.page.type.startsWith('Product Detail')) {
            errorCode = ERRORCODE.PICKUPINSTOREPDP;
          } else {
            errorCode = ERRORCODE.PICKUPINSTOREQUICKVIEW;
            errorPageType = 'quickview';
          }

          var pickUpInStoreOutOfStockError = {
            eventName: 'errorEvent',
            type: 'customer facing error',
            timeStamp: new Date(),
            processed: {
              adobeAnalytics: false,
              vendorTags: false
            },
            error: {
              errorCode: errorCode,
              errorMessage: 'Out Of Stock',
              errorPageType: errorPageType || window.mkorsData.page.type,
              errorType: 'pickUpInStoreOutOfStock',
              fieldName: '',
              formName: ''
            }
          };
          window.mkorsData.event.push(pickUpInStoreOutOfStockError);
          sendCustomEvent('errorEvent');
        }
      }
    }
  });
  /* The event captures Product Shipment Change */

  $body.on('event:productShipmentChange', function (e, data) {
    if (typeof window.mkorsData.event === 'undefined') {
      window.mkorsData.event = [];
    }

    var productShipmentChangeData = data.shipmentChangeEventJSON ? data.shipmentChangeEventJSON[0] : '';

    if (productShipmentChangeData && productShipmentChangeData.eventInfo) {
      productShipmentChangeData.eventInfo.timeStamp = new Date();
      window.mkorsData.event.push(productShipmentChangeData);
      sendCustomEvent('shippingMethodUpdate');
    }
  });
  /* The event captures when coupon applied successfully */

  $body.on('event:couponApplied', function (e, data) {
    if (typeof window.mkorsData.event === 'undefined') {
      window.mkorsData.event = [];
    }

    var couponCodeID = '';
    var querystring;

    if (data.viewData && data.viewData.queryString) {
      querystring = data.viewData.queryString;
    } else if (data.queryString) {
      querystring = data.queryString;
    } else {
      querystring = '';
    }

    if (querystring) {
      var split = querystring.split('&');
      var coupons = split[0];
      var couponCode = coupons.split('=');
      couponCodeID = decodeURIComponent(couponCode[1]) || couponCode[1];
    }

    var event = {
      eventName: 'promoCodeApplied',
      type: window.mkorsData && window.mkorsData.page ? window.mkorsData.page.type : '',
      timeStamp: new Date(),
      promoCode: couponCodeID,
      processed: {
        adobeAnalytics: false,
        vendorTags: false
      }
    };
    window.mkorsData.event.push({
      eventInfo: event
    });
    sendCustomEvent('promoCodeApplied');
  });
  /* The event to update employee status */

  $body.on('event:updateEmployeeStatus', function (e, employeeStatus) {
    window.mkorsData.user[0].profile[0].profileInfo.employee = employeeStatus;
  });
  /* The event for global Order Confirmation Page */

  $body.on('event:globalConfirmationPage', function (e, data) {
    var response = JSON.parse(data);

    if (response && response.orderDataLayer && !window.$.isEmptyObject(response.orderDataLayer)) {
      window.mkorsData = response.orderDataLayer;

      if (window.mkorsData.page) {
        window.mkorsData.page.responsiveView = getResponsiveView();
        var URLPathname = window.location.pathname;

        if (URLPathname === '/') {
          window.mkorsData.page.breadcrumb = 'home.html';
        } else {
          window.mkorsData.page.breadcrumb = URLPathname;
        }
      }

      if (window.mkorsData.event && window.mkorsData.event.length > 0) {
        var eventData = window.mkorsData.event;

        for (var i = 0; i < eventData.length; i++) {
          if (eventData[i].eventInfo) {
            eventData[i].eventInfo.timeStamp = new Date();
          }
        }
      }

      sendCustomEvent('paymentConfirmation');
    }
  });
  /* The event captures when signing up in newsletter */

  $body.on('event:newslettersignup', function (e, data) {
    if (typeof window.mkorsData.event === 'undefined') {
      window.mkorsData.event = [];
    }

    if (data) {
      var eventInfo = data.eventInfo;

      if (eventInfo) {
        eventInfo.timeStamp = new Date();
      }
    }

    window.mkorsData.event.push(data);
    sendCustomEvent('Newsletter Sign Up');
  });
  /* The event captures when Error in newsletter */

  $body.on('event:newslettersignupError', function (e, data) {
    if (typeof window.mkorsData.event === 'undefined') {
      window.mkorsData.event = [];
    }

    var errorPageType = '';
    var pageType = JSON.parse(document.getElementById('analytics-datalayer').getAttribute('data-tracking-view'))[0];

    if (pageType) {
      if (pageType.page) {
        errorPageType = pageType.page.type;
      }
    }

    var errorEvents = {
      eventName: 'errorEvent',
      type: 'customer facing error',
      timeStamp: new Date(),
      processed: {
        adobeAnalytics: false,
        vendorTags: false
      },
      error: {
        errorCode: ERRORCODE.NEWSLETTEREMAILMISSING,
        errorMessage: data,
        errorPageType: errorPageType,
        errorType: 'Some sign up information is invalid/missing',
        fieldName: 'newletter-form-email',
        formName: 'email-signup'
      }
    };
    window.mkorsData.event.push({
      eventInfo: errorEvents
    });
    sendCustomEvent('errorEvent');
  });
  /* The event captures quickview in plp */

  $body.on('event:quickView', function (e, data) {
    if (typeof window.mkorsData.event === 'undefined') {
      window.mkorsData.event = [];
    }

    sessionStorage.setItem('quickviewEventJson', JSON.stringify(data.eventJSON[0].product));
    var quickviewEventJSON = data.eventJSON[0];

    if (quickviewEventJSON && quickviewEventJSON.eventInfo) {
      quickviewEventJSON.eventInfo.timeStamp = new Date();

      if (sessionStorage.getItem('crossSell') && sessionStorage.getItem('crossSellType')) {
        if (quickviewEventJSON.product && quickviewEventJSON.product.length > 0 && quickviewEventJSON.product[0].mfrItemNum) {
          if (quickviewEventJSON.product[0].mfrItemNum === sessionStorage.getItem('crossSell')) {
            quickviewEventJSON.product[0].isCrossSell = 'Y';
            quickviewEventJSON.product[0].crossSellCartridge = sessionStorage.getItem('crossSellType');
            sessionStorage.removeItem('crossSellType');
            sessionStorage.removeItem('crossSell');
          }
        }
      }

      window.mkorsData.event.push(quickviewEventJSON);
      sendCustomEvent('quickView');
    }
  });
  /* The event captures color selection in plp */

  $body.on('event:colorSelection', function (e, data) {
    if (typeof window.mkorsData.event === 'undefined') {
      window.mkorsData.event = [];
    }

    var colorSelectionPLP = data.eventJSON[0];
    colorSelectionPLP.eventInfo.timeStamp = new Date();
    window.mkorsData.event.push(colorSelectionPLP);
    var currentPageURL = sessionStorage.getItem('queryParam') ? sessionStorage.getItem('queryParam') : '';

    if (currentPageURL) {
      sessionStorage.setItem('queryParam', window.location.href);
    }

    sendCustomEvent('colorSelection');
  });
  /**
   * @description The product Object
   * @param {Object} loadMoreProducts the product Object
   * @returns {Array} listing Object
   */

  function updateListingProducts(loadMoreProducts) {
    var productsList = JSON.parse(loadMoreProducts);
    var listing = [];

    if (productsList && productsList.length > 0) {
      for (var i = 0; i < productsList.length; i++) {
        listing.push(productsList[i]);
      }
    }

    return listing;
  }
  /* The event captures the sort by event in plp */


  $body.on('event:sortByEvent', function () {
    if (typeof window.mkorsData.event === 'undefined') {
      window.mkorsData.event = [];
    }

    var sortByEvent = window.$('.analytics-sortOrder-event');
    var sortByEventData = sortByEvent.attr('data-analytics-sortOrder');
    var eventJSON = JSON.parse(sortByEventData);
    eventJSON.eventInfo.timeStamp = new Date();
    window.mkorsData.event.push(eventJSON);
    sendCustomEvent('refinementApplied');
  });
  /* The event captures the refinements applied in plp */

  $body.on('event:refinementApplied', function () {
    if (typeof window.mkorsData.event === 'undefined') {
      window.mkorsData.event = [];
    }

    var refinementView = document.getElementById('analytics-refinement-event');
    var refinementEvent = '';
    var refinementData;

    if (refinementView) {
      refinementEvent = refinementView.getAttribute('data-tracking-event');

      if (refinementEvent) {
        refinementData = JSON.parse(refinementEvent)[0];

        if (refinementData && refinementData.eventInfo) {
          refinementData.eventInfo.timeStamp = new Date();
          window.mkorsData.event.push(refinementData);
          var loadMoreProducts = JSON.parse(refinementView.getAttribute('data-tracking-products'));

          if (loadMoreProducts) {
            var loadMoreProductsArray = updateListingProducts(loadMoreProducts);
            window.mkorsData.page.listing = loadMoreProductsArray;
          }
        }
      }
    }

    var currentPageURL = sessionStorage.getItem('queryParam') ? sessionStorage.getItem('queryParam') : '';

    if (currentPageURL) {
      sessionStorage.setItem('queryParam', window.location.href);
    }

    sendCustomEvent('refinementApplied');
  });
  /* The event captures loadmore in plp */

  $body.on('event:loadMore', function () {
    if (typeof window.mkorsData.event === 'undefined') {
      window.mkorsData.event = [];
    }

    var desktoploadMore = document.getElementsByClassName('desktop-load-more');

    if (desktoploadMore && desktoploadMore.length > 0) {
      desktoploadMore[0].onmouseup = function () {
        var event = {
          eventInfo: {
            eventName: 'loadMore',
            type: 'product interaction',
            timeStamp: new Date(),
            processed: {
              adobeAnalytics: false,
              vendorTags: false
            }
          }
        };
        window.mkorsData.event.push(event);
      };
    }

    var querySelector = Array.from(document.querySelectorAll('.analytics-loadmore')).pop();
    var loadMoreProducts = JSON.parse(querySelector.getAttribute('data-tracking-products'));

    if (loadMoreProducts) {
      var loadMoreProductsArray = updateListingProducts(loadMoreProducts);

      if (loadMoreProductsArray.length > 0) {
        window.mkorsData.page.listing = window.mkorsData.page.listing.concat(loadMoreProductsArray);
      }
    }

    var currentPageURL = sessionStorage.getItem('queryParam') ? sessionStorage.getItem('queryParam') : '';

    if (currentPageURL) {
      sessionStorage.setItem('queryParam', window.location.href);
    }

    sendCustomEvent('loadMore');
  });
  /* The event captures color selection of product  */

  $body.on('event:productColorSelection', function (e, data) {
    if (window.mkorsData && window.mkorsData.page && window.mkorsData.page.type !== 'Shopping Cart') {
      if (typeof window.mkorsData.event === 'undefined') {
        window.mkorsData.event = [];
      }

      if (data) {
        var productColorSelectionEventData = data.productInteraction[0];
        sessionStorage.setItem('quickviewEventJson', JSON.stringify(data.productInteraction[1].product));
        productColorSelectionEventData.eventInfo.timeStamp = new Date();
        window.mkorsData.event.push(productColorSelectionEventData);
      }

      sendCustomEvent('colorSelection');
    }
  });
  /* The event captures product add to cart  */

  $body.on('event:addToCart', function (e, data) {
    if (typeof window.mkorsData.event === 'undefined') {
      window.mkorsData.event = [];
    }

    var addToCartEvent = data.productAddToCartEventJSON[0];

    if (addToCartEvent && addToCartEvent.eventInfo && addToCartEvent.product && addToCartEvent.product.length > 0) {
      addToCartEvent.eventInfo.timeStamp = new Date();
      var crossSellType;

      if (window.mkorsData.product && window.mkorsData.product.length > 0) {
        if (window.mkorsData.product[0].isCrossSell && window.mkorsData.product[0].isCrossSell === 'Y') {
          crossSellType = window.mkorsData.product[0].crossSellCartridge;
        }
      }

      if (sessionStorage.getItem('quickviewIsCrossSell') && sessionStorage.getItem('quickviewCrossSellProduct') && sessionStorage.getItem('quickviewCrossSellCartridge')) {
        crossSellType = sessionStorage.getItem('quickviewCrossSellCartridge');
        sessionStorage.removeItem('quickviewIsCrossSell');
        sessionStorage.removeItem('quickviewCrossSellProduct');
        sessionStorage.removeItem('quickviewCrossSellCartridge');
      }

      var crossSellCartridge = localStorage.getItem('crossSellCartridge') ? localStorage.getItem('crossSellCartridge') : [];

      if (crossSellCartridge && crossSellType) {
        var crossSellIDs;

        var crossSellObject = _defineProperty({}, data.pliUUID[0], crossSellType);

        if (crossSellCartridge.length > 0) {
          crossSellIDs = JSON.parse(crossSellCartridge);
        } else {
          crossSellIDs = [];
        }

        crossSellIDs.push(crossSellObject);
        localStorage.setItem('crossSellCartridge', JSON.stringify(crossSellIDs));

        if (addToCartEvent.product && addToCartEvent.product.length > 0) {
          addToCartEvent.product[0].crossSellCartridge = crossSellType;
          addToCartEvent.product[0].isCrossSell = 'Y';
        }
      }

      if (window.mkorsData && window.mkorsData.product && window.mkorsData.product.length > 1) {
        var lookID = window.mkorsData.product[0].lookID;

        if (lookID) {
          addToCartEvent.product[0].lookID = lookID;
        }
      }

      window.mkorsData.event.push(addToCartEvent);
    }

    var cartChangeEvent = localStorage.getItem('cartEvent') ? localStorage.getItem('cartEvent') : [];
    var addToCartInteractionJSON;
    var cartSession = [];

    if (cartChangeEvent.length < 1) {
      localStorage.setItem('cartEvent', JSON.stringify(data.cartEVENT));
      cartChangeEvent = localStorage.getItem('cartEvent');
    } else {
      cartSession.push(data.cartEVENT);
    }

    if (Object.keys(cartChangeEvent).length) {
      addToCartInteractionJSON = JSON.parse(cartChangeEvent);

      if (addToCartInteractionJSON.length !== undefined && addToCartInteractionJSON.length > 0) {
        for (var i = 0; i < addToCartInteractionJSON.length; i++) {
          cartSession.push(addToCartInteractionJSON[i]);
        }
      } else {
        cartSession.push(addToCartInteractionJSON);
      }

      localStorage.setItem('cartEvent', JSON.stringify(cartSession));
    }

    if (addToCartEvent && addToCartEvent.product && addToCartEvent.product.length > 0 && addToCartEvent.product[0].outfitID) {
      var uuid = data.pliUUID[0];
      var sessionRecipeID = localStorage.getItem('recipeID') ? localStorage.getItem('recipeID') : [];

      if (sessionRecipeID) {
        var recipeIDs;

        var recipeObject = _defineProperty({}, uuid, addToCartEvent.product[0].outfitID);

        if (sessionRecipeID.length > 0) {
          recipeIDs = JSON.parse(sessionRecipeID);
        } else {
          recipeIDs = [];
        }

        recipeIDs.push(recipeObject);
        localStorage.setItem('recipeID', JSON.stringify(recipeIDs));
      }
    }

    sendCustomEvent('addToCart');
  });
  /* The event captures remove from cart */

  $body.on('event:productRemoveFromCart', function (e, data) {
    if (typeof window.mkorsData.event === 'undefined') {
      window.mkorsData.event = [];
    }

    var querystring = data.queryString;
    var split = querystring.split('&');
    var pid = split && split.length > 0 ? split[0] : '';
    var cartID = pid ? pid.split('=') : '';
    var cartProductId = cartID && cartID.length > 1 ? cartID[1] : '';
    var removeFromCartID = split && split.length > 1 ? split[1] : '';
    var splitUUID = removeFromCartID ? removeFromCartID.split('=') : '';
    var UUID = splitUUID && splitUUID.length > 1 ? splitUUID[1] : '';
    var event = {
      eventInfo: {
        eventName: 'removeFromCart',
        type: 'cart',
        timeStamp: new Date(),
        processed: {
          adobeAnalytics: false,
          vendorTags: false
        }
      },
      product: {}
    };
    var product = localStorage.getItem('cartEvent') ? localStorage.getItem('cartEvent') : [];
    var cartSession = JSON.parse(product);

    for (var i = 0; i < cartSession.length; i++) {
      if (cartSession[i].product && cartSession[i].product.length > 0 && cartSession[i].product[0].productID) {
        if (cartSession[i].product[0].productID === cartProductId) {
          sessionStorage.setItem('productRemoveFromCart', JSON.stringify(cartSession[i]));
          event.product = cartSession[i].product;
          break;
        }
      }
    }

    var crossSellCartridge = localStorage.getItem('crossSellCartridge') ? JSON.parse(localStorage.getItem('crossSellCartridge')) : '';

    if (crossSellCartridge && event.product && event.product.length > 0 && UUID) {
      if ((!event.product[0].isCrossSell || event.product[0].isCrossSell === 'N') && !event.product[0].crossSellCartridge) {
        for (var j = 0; j < crossSellCartridge.length; j++) {
          if (Object.keys(crossSellCartridge[j])[0] === UUID) {
            event.product[0].isCrossSell = 'Y';
            event.product[0].crossSellCartridge = Object.values(crossSellCartridge[j])[0];
            sessionStorage.setItem('productRemoveFromCart', JSON.stringify(event.product));
            break;
          }
        }
      }
    }

    window.mkorsData.event.push(event);

    if (data.basket.numItems < 1) {
      localStorage.removeItem('cartEvent');
    }

    sendCustomEvent('removeFromCart');
  });
  /* The event captures product add to cart from favourites page  */

  $body.on('event:removeProductFromFavourites', function (e, data) {
    if (typeof window.mkorsData.event === 'undefined') {
      window.mkorsData.event = [];
    }

    var removeProductEvent = data.removeFavouritesProductJSON[0];

    if (removeProductEvent && removeProductEvent.eventInfo) {
      removeProductEvent.eventInfo.timeStamp = new Date();
      window.mkorsData.event.push(removeProductEvent);
    }

    sendCustomEvent('removeProductFromFavourites');
  });
  /* The event captures product add to cart for master products */

  $body.on('event:favAddToCart', function (e, data) {
    if (typeof window.mkorsData.event === 'undefined') {
      window.mkorsData.event = [];
    }

    var addToCartEvent = data.productAddToCartEventJSON[0];

    if (addToCartEvent && addToCartEvent.eventInfo) {
      addToCartEvent.eventInfo.timeStamp = new Date();
      window.mkorsData.event.push(addToCartEvent);

      if (data.cart.numItems - 1 === 0) {
        sessionStorage.setItem('favouritesAddedToCart', JSON.stringify(addToCartEvent));
      } else {
        sessionStorage.removeItem('favouritesAddedToCart');
      }
    }

    var cartChangeEvent = localStorage.getItem('cartEvent') ? localStorage.getItem('cartEvent') : [];
    var addToCartInteractionJSON;
    var cartSession = [];

    if (cartChangeEvent.length < 1) {
      localStorage.setItem('cartEvent', JSON.stringify(data.cartEVENT));
      cartChangeEvent = localStorage.getItem('cartEvent');
    } else {
      cartSession.push(data.cartEVENT);
    }

    if (Object.keys(cartChangeEvent).length) {
      addToCartInteractionJSON = JSON.parse(cartChangeEvent);

      if (addToCartInteractionJSON.length !== undefined && addToCartInteractionJSON.length > 0) {
        for (var i = 0; i < addToCartInteractionJSON.length; i++) {
          cartSession.push(addToCartInteractionJSON[i]);
        }
      } else {
        cartSession.push(addToCartInteractionJSON);
      }

      localStorage.setItem('cartEvent', JSON.stringify(cartSession));
    }

    sendCustomEvent('addToCart');
  });
  /* The event captures add product to favourites */

  $body.on('event:addProductToFavourites', function (e, data) {
    if (typeof window.mkorsData.event === 'undefined') {
      window.mkorsData.event = [];
    }

    var addProductToFavouritesEvent = data.addProductToFavouritesJSON[0];

    if (addProductToFavouritesEvent && addProductToFavouritesEvent.eventInfo) {
      addProductToFavouritesEvent.eventInfo.timeStamp = new Date();
      window.mkorsData.event.push(addProductToFavouritesEvent);
      sessionStorage.setItem('addproducttofavouritescart', JSON.stringify(addProductToFavouritesEvent));
    }

    sendCustomEvent('addToFavorites');
  });
  /* This event is to capture view favourites button click analytics event */

  $body.on('event:viewFavorites', function () {
    if (window.mkorsData && window.mkorsData.page && window.mkorsData.page.type) {
      sessionStorage.setItem('viewFavoritesClick', window.mkorsData.page.type);
    }
  });
  $body.on('event:viewFavoritesEvent', function (e, pageType) {
    if (typeof window.mkorsData.event === 'undefined') {
      window.mkorsData.event = [];
    }

    var event = {
      eventInfo: {
        eventName: 'viewFavoritesClick',
        type: pageType,
        timeStamp: new Date(),
        processed: {
          adobeAnalytics: false,
          vendorTags: false
        }
      }
    };
    window.mkorsData.event.push(event);
    sendCustomEvent('viewFavoritesClick');
  });
  /* This event is to capture header heart icon click analytics event */

  $body.on('event:heartIconClick', function () {
    if (window.mkorsData && window.mkorsData.page && window.mkorsData.page.type) {
      sessionStorage.setItem('heartIconClick', window.mkorsData.page.type);
    }
  });
  $body.on('event:heartIconClickEvent', function (e, pageType) {
    if (typeof window.mkorsData.event === 'undefined') {
      window.mkorsData.event = [];
    }

    var mobilePageType = '';

    if (window.mkorsData && window.mkorsData.page && window.mkorsData.page.type) {
      mobilePageType = window.mkorsData.page.type;
    }

    var event = {
      eventInfo: {
        eventName: 'heartIconClick',
        type: pageType !== undefined ? pageType : mobilePageType,
        timeStamp: new Date(),
        processed: {
          adobeAnalytics: false,
          vendorTags: false
        }
      }
    };
    window.mkorsData.event.push(event);
    sendCustomEvent('heartIconClick');
  });
  /* The event captures product quantity */

  $body.on('event:quantityDropdown', function (e, data) {
    if (window.mkorsData && window.mkorsData.page && window.mkorsData.page.type !== 'Shopping Cart') {
      if (typeof window.mkorsData.event === 'undefined') {
        window.mkorsData.event = [];
      }

      if (data) {
        var productQuantitySelectionEventData = data.productInteraction[2];

        if (productQuantitySelectionEventData) {
          productQuantitySelectionEventData.eventInfo.timeStamp = new Date();
          sessionStorage.setItem('quickviewEventJson', JSON.stringify(data.productInteraction[2].product));

          if (pushToDatalayerEvent(productQuantitySelectionEventData.eventInfo.eventName, productQuantitySelectionEventData.eventInfo.timeStamp)) {
            window.mkorsData.event.push(productQuantitySelectionEventData);
          }
        }
      }

      sendCustomEvent('qtyDropdownChange');
    }
  });
  /**
  * Push product error event data to the datalayer mkorsData object
  */

  $body.on('event:productError', function (e, sizeSelected) {
    var errorMessage = '';
    var errorType = '';
    var errorPageType = '';
    var productSetPage = document.getElementsByClassName('product-set-detail');
    var errorCode = '';

    if (document.getElementById('analytics-productDetails-event')) {
      errorPageType = 'product detail';
    } else if (productSetPage.length > 0) {
      errorPageType = 'product detail the look';
    } else {
      errorPageType = 'quickview';
    }

    if (typeof window.mkorsData.event === 'undefined') {
      window.mkorsData.event = [];
    }

    if (sizeSelected) {
      errorMessage = 'Please select a size';
      errorType = 'Add to cart product detail size missing';
      errorCode = ERRORCODE.MISSINGADDTOBAGSIZE;

      if (productSetPage.length > 0) {
        errorType = 'Add to cart product detail size missing';
      }
    } else {
      errorMessage = 'Please select a color';
      errorType = 'Add to cart product detail color missing';
      errorCode = '';

      if (productSetPage.length > 0) {
        errorType = 'Add to cart product detail color missing';
      }
    }

    var event = {
      eventInfo: {
        error: {
          errorCode: errorCode,
          errorMessage: errorMessage,
          errorPageType: errorPageType,
          errorType: errorType,
          fieldName: '',
          formName: ''
        },
        eventName: 'errorEvent',
        type: 'customer facing error',
        timeStamp: new Date(),
        processed: {
          adobeAnalytics: false,
          vendorTags: false
        }
      }
    };
    window.mkorsData.event.push(event);
    sendCustomEvent('errorEvent');
  });
  /* The event captures product size selection */

  $body.on('event:productSizeSelection', function (e, data) {
    if (window.mkorsData && window.mkorsData.page && window.mkorsData.page.type !== 'Shopping Cart') {
      if (typeof window.mkorsData.event === 'undefined') {
        window.mkorsData.event = [];
      }

      if (data) {
        var productSizeSelectionEventData = data.productInteraction[1];
        productSizeSelectionEventData.eventInfo.timeStamp = new Date();
        sessionStorage.setItem('quickviewEventJson', JSON.stringify(data.productInteraction[1].product));
        window.mkorsData.event.push(productSizeSelectionEventData);
      }

      sendCustomEvent('sizeSelection');
    }
  });
  /* The event captures image interaction in quickview */

  $body.on('event:imageInteraction', function (e, productID) {
    if (typeof window.mkorsData.event === 'undefined') {
      window.mkorsData.event = [];
    }

    var event = {
      eventInfo: {
        eventName: 'imgInteraction',
        type: 'product interaction',
        timeStamp: new Date(),
        interactionType: 'click',
        processed: {
          adobeAnalytics: false,
          vendorTags: false
        }
      },
      product: getProductDetails(productID)
    };
    var productDetails = document.getElementById('analytics-productDetails-event');

    if (productDetails) {
      delete event.product[0].categoryID;
      delete event.product[0].categoryName;
      delete event.product[0].name;
    }

    var productSetDetails = document.getElementById('analytics-productset-event');

    if (productSetDetails) {
      delete event.product.name;
    }

    window.mkorsData.event.push(event);
    sendCustomEvent('imgInteraction');
  });
  /* The event shipping and ReturnsAccordion interaction in product detail page */

  $body.on('event:shippingAndReturnsAccordion', function (e, productID) {
    if (typeof window.mkorsData.event === 'undefined') {
      window.mkorsData.event = [];
    }

    var event = {
      eventInfo: {
        eventName: 'shippingAndReturnsClick',
        type: 'Product Detail',
        timeStamp: new Date(),
        processed: {
          adobeAnalytics: false,
          vendorTags: false
        }
      }
    };
    var product = [];
    var productObj = getProductDetails(productID);

    if (productObj.length) {
      product = productObj;
    } else {
      product.push(productObj);
    }

    if (product[0].categoryID) {
      event.eventInfo.categoryID = product[0].categoryID;
    }

    if (product[0].categoryName) {
      event.eventInfo.categoryName = product[0].categoryName;
    }

    if (product[0].priceType) {
      event.eventInfo.priceType = product[0].priceType;
    }

    if (product[0].name) {
      event.eventInfo.name = product[0].name;
    }

    if (product[0].productID) {
      event.eventInfo.productID = product[0].productID;
    }

    window.mkorsData.event.push(event);
    sendCustomEvent('shippingAndReturnsClick');
  });
  /* The event captures signInSuccess */

  $body.on('event:signInSuccess', function (e, data) {
    if (typeof window.mkorsData.event === 'undefined') {
      window.mkorsData.event = [];
    }

    var event = {
      eventInfo: {
        eventName: 'signInSuccess',
        type: 'account',
        timeStamp: new Date(),
        processed: {
          adobeAnalytics: false,
          vendorTags: false
        }
      }
    };

    if (data.loyaltyStatus && data.loyaltyStatus === true) {
      var loyaltyLoginEvent = {
        eventInfo: {
          eventName: 'loyaltyLogin',
          type: 'account',
          timeStamp: new Date(),
          processed: {
            adobeAnalytics: false,
            vendorTags: false
          }
        }
      };
      sessionStorage.setItem('signInSuccess', JSON.stringify(event));
      sessionStorage.setItem('loyaltyLogin', JSON.stringify(loyaltyLoginEvent));
    } else {
      sessionStorage.setItem('signInSuccess', JSON.stringify(event));
      window.mkorsData.event.push(event);
    }
  });
  /* This event is captures the store locator button click */

  $body.on('event:storeLocator', function () {
    if (typeof window.mkorsData.event === 'undefined') {
      window.mkorsData.event = [];
    }

    var event = {
      eventInfo: {
        eventName: 'storeLocator',
        type: 'storeLocator',
        timeStamp: new Date(),
        processed: {
          adobeAnalytics: false,
          vendorTags: false
        }
      }
    };
    window.mkorsData.event.push(event);
    sendCustomEvent('storeLocator');
  });
  /* The event captures plp and category visit */

  $body.on('event:plpCategoryVisit', function () {
    if (typeof window.mkorsData.event === 'undefined') {
      window.mkorsData.event = [];
    }

    var categorySearchJSON = window.mkorsData.search;
    var eventName = categorySearchJSON.categoryType ? 'categoryVisit' : 'plpVisit';
    var event = {
      eventInfo: {
        eventName: eventName,
        timeStamp: new Date(),
        processed: {
          adobeAnalytics: false,
          vendorTags: false
        }
      }
    };

    if (categorySearchJSON.pageType) {
      event.eventInfo.type = categorySearchJSON.pageType;
    }

    if (eventName === 'categoryVisit') {
      event.eventInfo.categoryType = categorySearchJSON.categoryType;
    } else if (categorySearchJSON.plpType) {
      event.eventInfo.plpType = categorySearchJSON.plpType;
    }

    window.mkorsData.event.push(event);
    sendCustomEvent(eventName);
  });
  /* The event captures social share in footer */

  $body.on('socialShare', function (e, socialSite) {
    if (typeof window.mkorsData.event === 'undefined') {
      window.mkorsData.event = [];
    }

    if (socialSite) {
      var event = {
        eventInfo: {
          eventName: 'socialShare',
          type: 'Footer interaction',
          timeStamp: new Date(),
          processed: {
            adobeAnalytics: false,
            vendorTags: false
          }
        },
        socialMedia: {
          channel: socialSite.toLowerCase(),
          location: 'footer'
        }
      };
      window.mkorsData.event.push(event);
      sendCustomEvent('socialShare');
    }
  });
  $body.on('event:scrollToTop', function () {
    if (typeof window.mkorsData.event === 'undefined') {
      window.mkorsData.event = [];
    }

    var event = {
      eventInfo: {
        eventName: 'scrollToTop',
        type: 'navigation',
        timeStamp: new Date(),
        processed: {
          adobeAnalytics: false,
          vendorTags: false
        }
      }
    };
    window.mkorsData.event.push(event);
    sendCustomEvent('scrollToTop');
  });
  /* The event captures Buy Online Pickup In Store */

  $body.on('event:buyOnlinePickupInStore', function (e, data) {
    if (typeof window.mkorsData.event === 'undefined') {
      window.mkorsData.event = [];
    }

    var event = {
      eventInfo: {
        eventName: 'buyOnlinePickupInStore',
        type: 'buyOnlinePickupInStore',
        timeStamp: new Date(),
        processed: {
          adobeAnalytics: false,
          vendorTags: false
        }
      },
      product: window.mkorsData.product ? window.mkorsData.product : data.productAddToCartEventJSON[0].product
    };
    window.mkorsData.event.push(event);
    sendCustomEvent('buyOnlinePickupInStore');
  });
  /* The event captures scroll 50% */

  $body.on('event:scroll50', function () {
    if (typeof window.mkorsData.event === 'undefined') {
      window.mkorsData.event = [];
    }

    var event = {
      eventInfo: {
        eventName: 'scroll50',
        type: 'scroll',
        timeStamp: new Date(),
        processed: {
          adobeAnalytics: false,
          vendorTags: false
        }
      },
      product: window.mkorsData.product
    };

    if ($querystring && $querystring !== null && $querystring.includes('cgid')) {
      event.product = '';
    }

    window.mkorsData.event.push(event);
    sendCustomEvent('scroll50');
  });
  /* The event captures scroll 25% */

  $body.on('event:scroll25', function () {
    if (typeof window.mkorsData.event === 'undefined') {
      window.mkorsData.event = [];
    }

    var event = {
      eventInfo: {
        eventName: 'scroll25',
        type: 'scroll',
        timeStamp: new Date(),
        processed: {
          adobeAnalytics: false,
          vendorTags: false
        }
      },
      product: window.mkorsData.product
    };

    if ($querystring && $querystring !== null && $querystring.includes('cgid')) {
      event.product = '';
    }

    window.mkorsData.event.push(event);
    sendCustomEvent('scroll25');
  });
  /* The event captures pdp visit */

  $body.on('event:pdpVisit', function () {
    if (typeof window.mkorsData.event === 'undefined') {
      window.mkorsData.event = [];
    }

    var event = {
      eventInfo: {
        eventName: 'pdpVisit',
        type: 'productDetail',
        timeStamp: new Date(),
        processed: {
          adobeAnalytics: false,
          vendorTags: false
        }
      },
      product: window.mkorsData.product
    };
    window.mkorsData.event.push(event);
    sendCustomEvent('pdpVisit');
  });
  /* The event captures home page visit event */

  $body.on('event:hpVisit', function () {
    if (typeof window.mkorsData.event === 'undefined') {
      window.mkorsData.event = [];
    }

    var event = {
      eventInfo: {
        eventName: 'hpVisit',
        type: 'Home Page',
        timeStamp: new Date(),
        processed: {
          adobeAnalytics: false,
          vendorTags: false
        }
      }
    };
    window.mkorsData.event.push(event);
    sendCustomEvent('hpVisit');
  });
  /* The event captures keyword search  */

  $body.on('event:keywordSearch', function () {
    if (typeof window.mkorsData.event === 'undefined') {
      window.mkorsData.event = [];
    }

    var event = {
      eventInfo: {
        eventName: 'keywordSearch',
        type: 'keywordSearch',
        dyType: 'keyword-search-v1',
        timeStamp: new Date(),
        processed: {
          adobeAnalytics: false,
          vendorTags: false
        }
      }
    };
    sessionStorage.setItem('keywordSearch', JSON.stringify(event));
  });
  /* The event captures paypal checkout */

  $body.on('event:checkoutVisit', function () {
    if (typeof window.mkorsData.event === 'undefined') {
      window.mkorsData.event = [];
    }

    var event = {
      eventInfo: {
        eventName: 'checkoutVisit',
        type: 'Checkout',
        checkoutType: '',
        timeStamp: new Date(),
        processed: {
          adobeAnalytics: false,
          vendorTags: false
        }
      }
    };

    if (window.mkorsData.user[0].profile[0].profileInfo.type === 'guest') {
      event.eventInfo.checkoutType = 'guest';
    } else {
      event.eventInfo.checkoutType = 'registered';
    }

    window.mkorsData.event.push(event);
    sendCustomEvent('checkoutVisit');
  });
  /* The event captures paypal checkout */

  $body.on('event:cartVisit', function () {
    var getCartSubtotalVal = window.mkorsData.cart ? window.mkorsData.cart.subTotal : '0.00';

    if (typeof window.mkorsData.event === 'undefined') {
      window.mkorsData.event = [];
    }

    var event = {
      eventInfo: {
        eventName: 'cartVisit',
        type: 'cart',
        cartValue: getCartSubtotalVal,
        timeStamp: new Date(),
        processed: {
          adobeAnalytics: false,
          vendorTags: false
        }
      }
    };
    window.mkorsData.event.push(event);
    sendCustomEvent('cartVisit');
  });
  /* The event captures paypal checkout */

  $body.on('event:paypalCheckout', function () {
    if (typeof window.mkorsData.event === 'undefined') {
      window.mkorsData.event = [];
    }

    var event = {
      eventInfo: {
        eventName: 'payPalCheckout',
        type: 'Shopping Cart',
        timeStamp: new Date(),
        processed: {
          adobeAnalytics: false,
          vendorTags: false
        }
      }
    };

    if (window.mkorsData.page.channel.toLowerCase() === 'checkout') {
      event.eventInfo.type = 'checkout:billing';
    }

    window.mkorsData.event.push(event);
    sendCustomEvent('payPalCheckout');
  });
  /* The event captures reset password email success */

  $body.on('event:resetPasswordEmailSuccess', function () {
    if (typeof window.mkorsData.event === 'undefined') {
      window.mkorsData.event = [];
    }

    var event = {
      eventInfo: {
        eventName: 'sendEmailLink',
        type: 'Accounts',
        timeStamp: new Date(),
        processed: {
          adobeAnalytics: false,
          vendorTags: false
        }
      }
    };
    window.mkorsData.event.push(event);
    sendCustomEvent('sendEmailLink');
  });
  /* The event captures reset password event */

  $body.on('event:resetPassword', function () {
    if (typeof window.mkorsData.event === 'undefined') {
      window.mkorsData.event = [];
    }

    var resetPasswordEvent;
    var resetPasswordError = window.$('form[name="change-password-form"]');

    if (resetPasswordError && resetPasswordError.length > 0) {
      if (resetPasswordError[0][0].value !== resetPasswordError[0][1].value) {
        resetPasswordEvent = {
          eventInfo: {
            eventName: 'errorEvent',
            type: 'customer facing error',
            timeStamp: new Date(),
            processed: {
              adobeAnalytics: false,
              vendorTags: false
            },
            error: {
              errorCode: ERRORCODE.CREATEACCOUNTPASSWORDMISMATCH,
              errorMessage: window.$('#confirmPwdFormError').length > 0 ? window.$('#confirmPwdFormError')[0].innerText : '',
              errorPageType: 'Accounts',
              errorType: 'Some account creation information is invalid/missing'
            }
          }
        };
        sessionStorage.setItem('resetPasswordEvent', JSON.stringify(resetPasswordEvent));
        sendCustomEvent('errorEvent');
      } else if (resetPasswordError[0][0].value === resetPasswordError[0][1].value) {
        resetPasswordEvent = {
          eventInfo: {
            eventName: 'resetPasswordSuccess',
            type: 'Accounts',
            timeStamp: new Date(),
            processed: {
              adobeAnalytics: false,
              vendorTags: false
            }
          }
        };
        sessionStorage.setItem('resetPasswordEvent', JSON.stringify(resetPasswordEvent));
        sendCustomEvent('resetPasswordSuccess');
      }
    }
  });
  /* The event captures change password in profile page */

  $body.on('event:profileChangePassword', function () {
    if (typeof window.mkorsData.event === 'undefined') {
      window.mkorsData.event = [];
    }

    var event = {
      eventInfo: {
        eventName: 'changePassword',
        type: 'Profile',
        timeStamp: new Date(),
        processed: {
          adobeAnalytics: false,
          vendorTags: false
        }
      }
    };
    window.mkorsData.event.push(event);
    sendCustomEvent('changePassword');
  });
  /* The event captures save password in profile page */

  $body.on('event:changePasswordUpdate', function () {
    if (typeof window.mkorsData.event === 'undefined') {
      window.mkorsData.event = [];
    }

    var event = {
      eventInfo: {
        eventName: 'savePassword',
        type: 'Profile',
        timeStamp: new Date(),
        processed: {
          adobeAnalytics: false,
          vendorTags: false
        }
      }
    };
    window.mkorsData.event.push(event);
    sendCustomEvent('savePassword');
  });
  /* The event is for syte internal camera search */

  $body.on('event:syteInternalCameraSearch', function () {
    if (typeof window.mkorsData.event === 'undefined') {
      window.mkorsData.event = [];
    }

    var event = {
      eventInfo: {
        eventName: 'internalCameraSearch',
        type: window.mkorsData.page.type,
        timeStamp: new Date(),
        processed: {
          adobeAnalytics: false,
          vendorTags: false
        }
      }
    };
    window.mkorsData.event.push(event);
    sendCustomEvent('syteInternalCameraSearch');
  });
  /* The event is for syte shop similar item reccomendation carousel */

  $body.on('event:syteShopSimilarCarousel', function () {
    if (typeof window.mkorsData.event === 'undefined') {
      window.mkorsData.event = [];
    }

    var event = {
      eventInfo: {
        eventName: 'shopSimilarClick',
        type: window.mkorsData.page.type,
        shopSimilarType: window.mkorsData.page.type,
        timeStamp: new Date(),
        processed: {
          adobeAnalytics: false,
          vendorTags: false
        }
      }
    };
    window.mkorsData.event.push(event);
    sendCustomEvent('syteShopSimilarCarousel');
  });
  $body.on('event:orderConfirmationCreateAccount', function () {
    sessionStorage.setItem('accountCreateLocation', 'Order Confirmation');
  });
  $body.on('event:accountCreationSuccess', function () {
    sessionStorage.setItem('accountCreationSuccess', true);
  });
  $body.on('event:dyUserTypeItemSave', function (e, userTypeForDY) {
    sessionStorage.setItem('dyUserType', userTypeForDY);
  });
  $body.on('event:writeAReviewclickSave', function (e, pid) {
    sessionStorage.setItem('writeAReviewPid', pid);
  });
  $body.on('event:giftcardSubmit', function () {
    if (typeof window.mkorsData.event === 'undefined') {
      window.mkorsData.event = [];
    }

    setTimeout(function () {
      var errorCode;
      var errorMessage;

      if (window.$('#gift-card-form').find('.alert-danger').length > 0) {
        if (window.$('#gift-card-form').find('.alert-danger')[0].innerText) {
          errorCode = window.$('#gift-card-form').find('.alert-danger')[0].innerText.indexOf('0') !== -1 ? ERRORCODE.CHECKOUTGIFTCARDZEROBALANCE : ERRORCODE.CHECKOUTMAXGIFTCARDAPPLIED;
          errorMessage = window.$('#gift-card-form').find('.alert-danger')[0].innerText;
        }
      } else if (window.$('.gift-balance').find('.alert-danger').length > 0) {
        if (window.$('.gift-balance').find('.alert-danger')[0].innerText) {
          errorCode = window.$('.gift-balance').find('.alert-danger')[0].innerText.indexOf('0') !== -1 ? ERRORCODE.CHECKOUTGIFTCARDZEROBALANCE : ERRORCODE.CHECKOUTMAXGIFTCARDAPPLIED;
          errorMessage = window.$('.gift-balance').find('.alert-danger')[0].innerText;
        }
      }

      if (errorMessage) {
        var zeroBalanceError = {
          eventInfo: {
            eventName: 'errorEvent',
            type: 'customer facing error',
            timeStamp: new Date(),
            processed: {
              adobeAnalytics: false,
              vendorTags: false
            },
            error: {
              errorCode: errorCode,
              errorMessage: errorMessage,
              errorPageType: window.mkorsData.page.type,
              errorType: 'Some gift card information is invalid/missing',
              fieldName: 'giftCertPin',
              formName: 'dwfrm_gcredeem'
            }
          }
        };
        pushToMkorsData(zeroBalanceError);
        sendCustomEvent('errorEvent');
      }
    }, 2000);
  });
  /* The event captures update product in cart page */

  $body.on('event:editCartUpdateProduct', function (e, data) {
    if (typeof window.mkorsData.event === 'undefined') {
      window.mkorsData.event = [];
    }

    var productData = data.cartEVENT && data.cartEVENT.product ? data.cartEVENT.product : '';
    var event = {
      eventInfo: {
        eventName: 'productQtyUpdate',
        type: 'product interaction',
        timeStamp: new Date(),
        processed: {
          adobeAnalytics: false,
          vendorTags: false
        },
        selectionValue: window.$('.quantity-select').val()
      },
      product: {}
    };
    var crossSellCartridge = JSON.parse(localStorage.getItem('crossSellCartridge'));

    if (crossSellCartridge && crossSellCartridge.length > 0) {
      var mkorsDataObject = window.mkorsData.cart.product;

      if (mkorsDataObject && productData && productData.length > 0) {
        for (var l = 0; l < Object.keys(mkorsDataObject).length; l++) {
          if (mkorsDataObject[l].isCrossSell && mkorsDataObject[l].crossSellCartridge) {
            if (mkorsDataObject[l].productID === productData[0].productID) {
              productData[0].isCrossSell = mkorsDataObject[l].isCrossSell;
              productData[0].crossSellCartridge = mkorsDataObject[l].crossSellCartridge;
            }
          }
        }
      }
    }

    delete productData[0].UUID;
    event.product = productData;
    var updatedQuatity = parseInt(window.$('.quantity-select').val(), 10);

    if (!data.productIdChanged) {
      updatedQuatity = updatedQuatity - 1 > 1 ? updatedQuatity - 1 : 1;
    }

    event.product[0].quantity = updatedQuatity.toString();
    var cartChangeEvent = localStorage.getItem('cartEvent') ? localStorage.getItem('cartEvent') : [];
    var editCartUpdateEventJSON;
    var cartSession = [];

    if (cartChangeEvent.length < 1) {
      localStorage.setItem('cartEvent', JSON.stringify(productData));
      cartChangeEvent = localStorage.getItem('cartEvent');
    } else {
      cartSession.push(productData);
    }

    if (Object.keys(cartChangeEvent).length) {
      editCartUpdateEventJSON = JSON.parse(cartChangeEvent);

      if (editCartUpdateEventJSON.length !== undefined && editCartUpdateEventJSON.length > 0) {
        for (var i = 0; i < editCartUpdateEventJSON.length; i++) {
          cartSession.push(editCartUpdateEventJSON[i]);
        }
      } else {
        cartSession.push(editCartUpdateEventJSON);
      }

      localStorage.setItem('cartEvent', JSON.stringify(cartSession));
    }

    window.mkorsData.event.push(event);
    sendCustomEvent('productQtyUpdate');
  });
  /* The event captures avrato payment errors in checkout page */

  $body.on('event:paymentError', function (e, error) {
    if (typeof window.mkorsData.event === 'undefined') {
      window.mkorsData.event = [];
    }

    var errorCode;
    var errorMessage;

    switch (error.ErrorCode) {
      case '1':
        errorCode = ERRORCODE.MISSINGCARDNAME;
        errorMessage = window.$('#arvato-field-errors').attr('data-missing-card-holder');
        break;

      case '9':
        errorCode = ERRORCODE.MISSINGCARDNUMBER;
        errorMessage = window.$('#arvato-field-errors').attr('data-missing-card-number');
        break;

      case '10':
        errorCode = ERRORCODE.INVALIDCARDNUMBER;
        errorMessage = window.$('#arvato-field-errors').attr('data-invalid-card');
        break;

      case '7':
        errorCode = ERRORCODE.INVALIDCARDEXPIRATION;
        errorMessage = window.$('#arvato-field-errors').attr('data-invalid-expiration');
        break;

      case '4':
        errorCode = ERRORCODE.INVALIDCARDSECURITYCODE;
        errorMessage = window.$('#arvato-field-errors').attr('data-invalid-security-code');
        break;

      case '3':
        errorCode = ERRORCODE.MISSINGCARDSECURITYCODE;
        errorMessage = error.Message;
        break;

      default:
        errorCode = '';
        errorMessage = error.Message;
        break;
    }

    var event = {
      eventInfo: {
        eventName: 'errorEvent',
        type: 'customer facing error',
        timeStamp: new Date(),
        processed: {
          adobeAnalytics: false,
          vendorTags: false
        },
        error: {
          errorCode: errorCode,
          errorMessage: errorMessage,
          errorPageType: window.mkorsData.page.type,
          errorType: 'Some payment information is invalid/missing',
          fieldName: error.Field,
          formName: 'dwfrm_billing'
        }
      }
    };
    pushToMkorsData(event);
  });
  /* The event captures trend visit for static pages from page designer*/

  $body.on('event:trendVisit', function () {
    if (typeof window.mkorsData.event === 'undefined') {
      window.mkorsData.event = [];
    }

    var event = {
      eventInfo: {
        eventName: 'trendVisit',
        type: 'trend',
        timeStamp: new Date(),
        processed: {
          adobeAnalytics: false,
          vendorTags: false
        }
      }
    };
    window.mkorsData.event.push(event);
    sendCustomEvent('trendVisit');
  });
  /* This event is captured the DY user type */

  $body.on('event:dyUserType', function (e, dyUserType) {
    if (typeof window.mkorsData.event === 'undefined') {
      window.mkorsData.event = [];
    }

    var event = {
      eventInfo: {
        eventName: 'userType',
        type: 'userVisit',
        userStatus: dyUserType,
        timeStamp: new Date(),
        processed: {
          adobeAnalytics: false,
          vendorTags: false
        }
      }
    };
    window.mkorsData.event.push(event);
    sendCustomEvent('userType');
  });
  /* This event is to capture  Write a Review link click analytics event */

  $body.on('event:writeAReviewClick', function (e, productId) {
    if (typeof window.mkorsData.event === 'undefined') {
      window.mkorsData.event = [];
    }

    var event = {
      eventInfo: {
        eventName: 'writeAReviewClick',
        productID: productId
      }
    };
    window.mkorsData.event.push(event);
    sendCustomEvent('writeAReviewClick');
  });
  /* This event is to capture the Submit Review analytics event. */

  $body.on('event:submitAReviewClick', function (e, productId) {
    if (typeof window.mkorsData.event === 'undefined') {
      window.mkorsData.event = [];
    }

    var event = {
      eventInfo: {
        eventName: 'submitAReviewClick',
        productID: productId
      }
    };
    window.mkorsData.event.push(event);
    sendCustomEvent('submitAReviewClick');
  });
  /* This event is to capture navigation menu link click analytics event */

  $body.on('event:navigationButtonClick', function (e, navLinks) {
    if (typeof window.mkorsData.event === 'undefined') {
      window.mkorsData.event = [];
    }

    var event = {
      eventInfo: {
        eventName: 'buttonClick',
        buttonName: navLinks,
        timeStamp: new Date(),
        processed: {
          adobeAnalytics: false,
          vendorTags: false
        }
      }
    };
    window.mkorsData.event.push(event);
    sendCustomEvent('buttonClick');
  });
}
/**
* Set Temporary Customer ID
*/


function pushTempGuestID() {
  if (typeof window.mkorsData !== 'undefined') {
    var tempGuestID = localStorage.getItem('tempGuestID');

    if (!tempGuestID) {
      localStorage.setItem('tempGuestID', Math.random().toString().slice(2, 11));
      tempGuestID = localStorage.getItem('tempGuestID');
    }

    if (typeof window.mkorsData.cart !== 'undefined' && typeof window.mkorsData.cart.customerID !== 'undefined' && window.mkorsData.cart.customerID === null) {
      window.mkorsData.cart.customerID = tempGuestID;
    }

    if (typeof window.mkorsData.transaction !== 'undefined' && typeof window.mkorsData.transaction.customerID !== 'undefined' && window.mkorsData.transaction.customerID === null) {
      window.mkorsData.transaction.customerID = tempGuestID;
    }

    if (typeof window.mkorsData.event !== 'undefined' && typeof window.mkorsData.event[0] !== 'undefined' && typeof window.mkorsData.event[0].transaction !== 'undefined' && typeof window.mkorsData.event[0].transaction.customerID !== 'undefined' && window.mkorsData.event[0].transaction.customerID === null) {
      window.mkorsData.event[0].transaction.customerID = tempGuestID;
    }
  }
}
/**
* Push reset password event data to the datalayer mkorsData object
*/


function pushResetPasswordEvent() {
  var event = sessionStorage.getItem('resetPasswordEvent');

  if (event) {
    var eventJSON = JSON.parse(event);
    eventJSON.eventInfo.timeStamp = new Date();

    if (typeof window.mkorsData.event === 'undefined') {
      window.mkorsData.event = [];
    }

    window.mkorsData.event.push(eventJSON);
  }

  sessionStorage.removeItem('resetPasswordEvent');
}
/**
* Push account creation success custom event
*/


function pushAccountCreationEvent() {
  var accountCreationSuccess = sessionStorage.getItem('accountCreationSuccess');

  if (accountCreationSuccess) {
    sendCustomEvent('accountCreationSuccess');
  }

  sessionStorage.removeItem('accountCreationSuccess');
}
/**
* Push DY User Type event
*/


function pushDyUserTypeEvent() {
  var dyUserType = sessionStorage.getItem('dyUserType');

  if (dyUserType) {
    $body.trigger('event:dyUserType', dyUserType);
  }

  sessionStorage.removeItem('dyUserType');
}
/**
* Push Write a Review click event
*/


function pushWriteAReviewClickEvent() {
  var writeAReviewPid = sessionStorage.getItem('writeAReviewPid');

  if (writeAReviewPid) {
    $body.trigger('event:writeAReviewClick', writeAReviewPid);
  }

  sessionStorage.removeItem('writeAReviewPid');
}
/**
* Push expired card error event
*/


function pushExpiredCardErrorEvent() {
  if (window.mkorsData) {
    setTimeout(function () {
      if (window.$('.expired-message, .js-card-expired') && window.$('.expired-message, .js-card-expired').length > 0) {
        if (window.$('.expired-message').is(':visible') || window.$('.js-card-expired').is(':visible')) {
          var errorMessage;

          if (window.$('.expired-message').length > 0) {
            errorMessage = window.$('.expired-message')[0].innerText;
          } else if (window.$('.js-card-expired').length > 0) {
            errorMessage = window.$('.js-card-expired')[0].innerText;
          }

          var expiredCardError = {
            eventInfo: {
              eventName: 'errorEvent',
              type: 'customer facing error',
              timeStamp: new Date(),
              processed: {
                adobeAnalytics: false,
                vendorTags: false
              },
              error: {
                errorCode: ERRORCODE.EXPIREDCREDITCARD,
                errorMessage: errorMessage,
                errorPageType: window.mkorsData.page.type,
                errorType: window.$('.js-card-expired').length > 0 ? 'Credit card expired' : 'Some my account information is invalid/missing',
                fieldName: 'creditCardSelector',
                formName: 'dwfrm_profile'
              }
            }
          };

          if (typeof window.mkorsData.event === 'undefined') {
            window.mkorsData.event = [];
          }

          window.mkorsData.event.push(expiredCardError);
        }
      }
    }, 2000);
  }
}
/**
* Push image interaction event data to the datalayer mkorsData object
*/


function imageInteraction() {
  window.$(document).on('click', 'button.thumbnail-btn, button.thumbnail-nav, .js-product-carousel button.slick-arrow', function () {
    $body.trigger('event:imageInteraction', getProductID(this));
  });
}
/**
* Push image interaction event data to the datalayer mkorsData object
*/


function shippingAndReturnsAccordion() {
  window.$(document).on('click', '.product-detail .tab-shippingandreturns.active', function () {
    $body.trigger('event:shippingAndReturnsAccordion', getProductID(this));
  });
}
/**
* Push signin success event data to the datalayer mkorsData object
*/


function pushSignInSuccess() {
  var success = sessionStorage.getItem('signInSuccess') ? sessionStorage.getItem('signInSuccess') : [];
  var loyaltyLoginSuccess = sessionStorage.getItem('loyaltyLogin') ? sessionStorage.getItem('loyaltyLogin') : [];

  if (success.length > 0) {
    var JSONsuccess = JSON.parse(success);
    JSONsuccess.eventInfo.timeStamp = new Date();

    if (window.mkorsData.user) {
      JSONsuccess.user = window.mkorsData.user;
    }

    if (typeof window.mkorsData.event === 'undefined') {
      window.mkorsData.event = [];
    }

    window.mkorsData.event.push(JSONsuccess);
    sendCustomEvent('signInSuccess');
  }

  if (loyaltyLoginSuccess.length > 0) {
    var loyaltyJSONsuccess = JSON.parse(loyaltyLoginSuccess);
    loyaltyJSONsuccess.eventInfo.timeStamp = new Date();

    if (window.mkorsData.user) {
      loyaltyJSONsuccess.user = window.mkorsData.user;
    }

    window.mkorsData.event.push(loyaltyJSONsuccess);
    sendCustomEvent('loyaltyLogin');
  }

  sessionStorage.removeItem('signInSuccess');
  sessionStorage.removeItem('loyaltyLogin');
}
/**
* Push checkout customer validation event data to the datalayer mkorsData object
*/


function checkoutCustomerError() {
  window.$('.submit-customer-login').on('click', function () {
    if (window.$('#registered-customer')[0]) {
      setTimeout(function () {
        if (window.$('#registered-customer')[0].checkValidity()) {
          var signInSuccessEvent = {
            eventName: 'signInSuccess',
            type: 'account',
            timeStamp: new Date(),
            processed: {
              adobeAnalytics: false,
              vendorTags: false
            }
          };
          var loyaltyLoginEvent = {
            eventName: 'loyaltyLogin',
            type: 'account',
            timeStamp: new Date(),
            processed: {
              adobeAnalytics: false,
              vendorTags: false
            }
          };
          sessionStorage.setItem('signInSuccessEvent', JSON.stringify(signInSuccessEvent));
          sessionStorage.setItem('loyaltyLoginEvent', JSON.stringify(loyaltyLoginEvent));
          sendCustomEvent('signInSuccess');
        }
      }, 300);
    }
  });
}
/**
* Push checkout afterpay event data to the datalayer mkorsData object
*/


function afterpayCheckoutEvent() {
  setTimeout(function () {
    if (window.$('afterpay-placement').length > 0) {
      window.$('afterpay-placement')[0].onclick = function () {
        if (window.$('afterpay-modal').length > 0 && window.$('afterpay-modal')[0].visible && window.mkorsData) {
          var afterpayEvent = {
            eventName: 'afterPay',
            type: window.mkorsData.page.type,
            timeStamp: new Date(),
            processed: {
              adobeAnalytics: false,
              vendorTags: false
            }
          };

          if (typeof window.mkorsData.event === 'undefined') {
            window.mkorsData.event = [];
          }

          sendCustomEvent('afterPay');
          window.mkorsData.event.push(afterpayEvent);
        }
      };
    }
  }, 200);
}
/**
* Push checkout page type to the datalayer mkorsData object
*/


function checkoutUpdatePageType() {
  if (window.mkorsData && window.mkorsData.page.channel === 'checkout') {
    var checkoutType = window.location.hash;

    if (checkoutType === '#customer') {
      window.mkorsData.page.name = 'checkout:start';
      window.mkorsData.page.siteSectionLevel2 = 'checkout:start';
      window.mkorsData.page.siteSectionLevel3 = 'checkout:start';
      window.mkorsData.page.type = 'checkout:start';
    } else if (checkoutType === '#shipping') {
      window.mkorsData.page.name = 'checkout:shipping';
      window.mkorsData.page.siteSectionLevel2 = 'checkout:shipping';
      window.mkorsData.page.siteSectionLevel3 = 'checkout:shipping';
      window.mkorsData.page.type = 'checkout:shipping';
    } else if (checkoutType === '#payment') {
      window.mkorsData.page.name = 'checkout:billing';
      window.mkorsData.page.siteSectionLevel2 = 'checkout:billing';
      window.mkorsData.page.siteSectionLevel3 = 'checkout:billing';
      window.mkorsData.page.type = 'checkout:billing';
    } else if (checkoutType === '#placeOrder') {
      window.mkorsData.page.name = 'checkout:review';
      window.mkorsData.page.siteSectionLevel2 = 'checkout:review';
      window.mkorsData.page.siteSectionLevel3 = 'checkout:review';
      window.mkorsData.page.type = 'checkout:review';
    }

    var editCustomer;
    var editShippingAddress;

    if (window.mkorsData && window.mkorsData.user) {
      if (window.mkorsData.user[0].profile[0].profileInfo.type === 'guest') {
        editCustomer = window.$('.edit-button')[0];
        editShippingAddress = window.$('.edit-button')[1];
      } else {
        editShippingAddress = window.$('.edit-button')[0];
      }
    }

    if (editCustomer) {
      editCustomer.onclick = function () {
        window.mkorsData.page.name = 'checkout:start';
        window.mkorsData.page.siteSectionLevel2 = 'checkout:start';
        window.mkorsData.page.siteSectionLevel3 = 'checkout:start';
        window.mkorsData.page.type = 'checkout:start';
      };
    }

    if (editShippingAddress) {
      editShippingAddress.onclick = function () {
        window.mkorsData.page.name = 'checkout:shipping';
        window.mkorsData.page.siteSectionLevel2 = 'checkout:shipping';
        window.mkorsData.page.siteSectionLevel3 = 'checkout:shipping';
        window.mkorsData.page.type = 'checkout:shipping';
      };
    }

    var submitCustomer = window.$('.submit-customer');

    if (submitCustomer.length > 0) {
      submitCustomer[0].onclick = function () {
        if (window.$('#guest-customer')[0].checkValidity()) {
          window.mkorsData.page.name = 'checkout:shipping';
          window.mkorsData.page.siteSectionLevel2 = 'checkout:shipping';
          window.mkorsData.page.siteSectionLevel3 = 'checkout:shipping';
          window.mkorsData.page.type = 'checkout:shipping';
        }
      };
    }

    var continueShipping = window.$('.submit-shipping');

    if (continueShipping.length > 0) {
      continueShipping[0].onclick = function () {
        if (window.$('#dwfrm_shipping')[0].checkValidity() || window.$('#dwfrm_shipping')[0].getAttribute('data-address-mode') === 'edit') {
          window.mkorsData.page.name = 'checkout:billing';
          window.mkorsData.page.siteSectionLevel2 = 'checkout:billing';
          window.mkorsData.page.siteSectionLevel3 = 'checkout:billing';
          window.mkorsData.page.type = 'checkout:billing';
        }
      };
    }

    window.$(document).on('mousedown', '#Tokenize', function () {
      var _this = this;

      setInterval(function () {
        if (window.$('.checkout-review-section').is(':visible')) {
          window.mkorsData.page.name = 'checkout:review';
          window.mkorsData.page.siteSectionLevel2 = 'checkout:review';
          window.mkorsData.page.siteSectionLevel3 = 'checkout:review';
          window.mkorsData.page.type = 'checkout:review';
          clearInterval(_this);
        }
      }, 100);
      clearTimeout(this);
      setTimeout(function () {
        if (window.$('#saved-payment-security-code.is-invalid').length > 0 && window.$('#invalidSecurityCodeErr').length > 0) {
          var securityCodeError = {
            eventInfo: {
              eventName: 'errorEvent',
              type: 'customer facing error',
              timeStamp: new Date(),
              processed: {
                adobeAnalytics: false,
                vendorTags: false
              },
              error: {
                errorCode: window.$('#saved-payment-security-code')[0].value ? ERRORCODE.INVALIDCARDSECURITYCODE : ERRORCODE.MISSINGCARDSECURITYCODE,
                errorMessage: window.$('#invalidSecurityCodeErr')[0].innerText,
                errorPageType: window.mkorsData.page.type,
                errorType: 'Some payment information is invalid/missing',
                fieldName: window.$('#saved-payment-security-code')[0].id || '',
                formName: 'dwfrm_billing'
              }
            }
          };
          pushToMkorsData(securityCodeError);
          sendCustomEvent('errorEvent');
        }

        if (window.$('#phoneNumber').length > 0) {
          if (window.$('#phoneNumber')[0].validity && !window.$('#phoneNumber')[0].validity.valid) {
            var phoneNumberInvalidError;

            if (window.$('#phoneInvalidMessage') && window.$('#phoneInvalidMessage').length > 0) {
              phoneNumberInvalidError = window.$('#phoneInvalidMessage')[0].innerText;
            }

            if (phoneNumberInvalidError) {
              var phoneNumberError = {
                eventInfo: {
                  eventName: 'errorEvent',
                  type: 'customer facing error',
                  timeStamp: new Date(),
                  processed: {
                    adobeAnalytics: false,
                    vendorTags: false
                  },
                  error: {
                    errorCode: window.$('#phoneNumber')[0].value ? ERRORCODE.CHECKOUTINVALIDNUMBER : ERRORCODE.CHECKOUTMISSINGNUMBER,
                    errorMessage: phoneNumberInvalidError,
                    errorPageType: 'checkout:billing',
                    errorType: 'Some payment information is invalid/missing',
                    fieldName: window.$('#phoneNumber')[0].id || '',
                    formName: 'dwfrm_billing'
                  }
                }
              };
              pushToMkorsData(phoneNumberError);
              sendCustomEvent('errorEvent');
            }
          }
        }
      }, 1000);
    });
  }
}
/**
* Push checkout edit payment event data to the datalayer mkorsData object
*/


function checkoutEditPayment() {
  var editButton;

  if (window.mkorsData && window.mkorsData.user && window.$('.edit-button').length > 0) {
    if (window.mkorsData.user[0].profile[0].profileInfo.type === 'guest') {
      editButton = window.$('.edit-button')[2];
    } else {
      editButton = window.$('.edit-button')[1];
    }
  }

  if (editButton) {
    editButton.onclick = function () {
      var event = {
        eventInfo: {
          eventName: 'paymentEditClick',
          type: 'checkout:billing',
          timeStamp: new Date(),
          processed: {
            adobeAnalytics: false,
            vendorTags: false
          }
        }
      };

      if (typeof window.mkorsData.event === 'undefined') {
        window.mkorsData.event = [];
      }

      window.mkorsData.event.push(event);
      window.mkorsData.page.name = 'checkout:billing';
      window.mkorsData.page.siteSectionLevel2 = 'checkout:billing';
      window.mkorsData.page.siteSectionLevel3 = 'checkout:billing';
      window.mkorsData.page.type = 'checkout:billing';
    };
  }
}
/**
* Push checkout submit order success event data to the datalayer mkorsData object
*/


function checkoutSubmitOrder() {
  var event;
  window.$(document).on('mousedown', '#submit-order', function () {
    if (window.$('#confirm-pickup-checkbox').length > 0 && window.$('#confirm-pickup-checkbox:checked').length < 1) {
      event = {
        eventInfo: {
          eventName: 'errorEvent',
          type: 'customer facing error',
          timeStamp: new Date(),
          processed: {
            adobeAnalytics: false,
            vendorTags: false
          },
          error: {
            errorCode: ERRORCODE.CHECKOUTCONFIRMPICKUPSTORE,
            errorMessage: window.$('.pickup-instore-error-msg').length > 0 ? window.$('.pickup-instore-error-msg')[0].innerText : '',
            errorPageType: 'checkout:review',
            errorType: 'Some shipping information is invalid/missing',
            fieldName: window.$('.pickup-instore-error-msg').length > 0 ? window.$('.pickup-instore-error-msg')[0].id : '',
            formName: 'checkout-review-section'
          }
        }
      };

      if (typeof window.mkorsData.event === 'undefined') {
        window.mkorsData.event = [];
      }

      window.mkorsData.event.push(event);
    } else {
      event = {
        eventInfo: {
          eventName: 'orderButton',
          type: 'checkout:review',
          timeStamp: new Date(),
          processed: {
            adobeAnalytics: false,
            vendorTags: false
          }
        }
      };
      sessionStorage.setItem('submitOrderEvent', JSON.stringify(event));
      sendCustomEvent('orderButton');
    }
  });
}
/**
* Push checkout submit shipping address event data to the datalayer mkorsData object
*/


function checkoutSubmitShipping() {
  window.$('.submit-shipping, .btn-save-shipping-address, .btn-save-billing-address').on('click', function () {
    var shippingInterval = setInterval(function () {
      if (window.$('#shippingFirstNamedefault.is-invalid').length > 0) {
        var firstNameError = {
          eventInfo: {
            eventName: 'errorEvent',
            type: 'customer facing error',
            timeStamp: new Date(),
            processed: {
              adobeAnalytics: false,
              vendorTags: false
            },
            error: {
              errorCode: ERRORCODE.CHECKOUTMISSINGFIRSTNAME,
              errorMessage: window.$('#defaultFirstName').length > 0 ? window.$('#defaultFirstName')[0].innerText : '',
              errorPageType: 'checkout:shipping',
              errorType: 'Some shipping information is invalid/missing',
              fieldName: window.$('#shippingFirstNamedefault')[0].id || '',
              formName: 'dwfrm_shipping'
            }
          }
        };
        pushToMkorsData(firstNameError);
        sendCustomEvent('errorEvent');
        clearInterval(shippingInterval);
      }

      if (window.$('#shippingLastNamedefault.is-invalid').length > 0) {
        var lastNameError = {
          eventInfo: {
            eventName: 'errorEvent',
            type: 'customer facing error',
            timeStamp: new Date(),
            processed: {
              adobeAnalytics: false,
              vendorTags: false
            },
            error: {
              errorCode: ERRORCODE.CHECKOUTMISSINGLASTNAME,
              errorMessage: window.$('#defaultLastName').length > 0 ? window.$('#defaultLastName')[0].innerText : '',
              errorPageType: 'checkout:shipping',
              errorType: 'Some shipping information is invalid/missing',
              fieldName: window.$('#shippingLastNamedefault')[0].id || '',
              formName: 'dwfrm_shipping'
            }
          }
        };
        pushToMkorsData(lastNameError);
        sendCustomEvent('errorEvent');
        clearInterval(shippingInterval);
      }

      if (window.$('#shippingAddressOnedefault.is-invalid').length > 0) {
        var addressOneError = {
          eventInfo: {
            eventName: 'errorEvent',
            type: 'customer facing error',
            timeStamp: new Date(),
            processed: {
              adobeAnalytics: false,
              vendorTags: false
            },
            error: {
              errorCode: ERRORCODE.CHECKOUTMISSINGADDRESS,
              errorMessage: window.$('#defaultAddressLine1').length > 0 ? window.$('#defaultAddressLine1')[0].innerText : '',
              errorPageType: 'checkout:shipping',
              errorType: 'Some shipping information is invalid/missing',
              fieldName: window.$('#shippingAddressOnedefault')[0].id || '',
              formName: 'dwfrm_shipping'
            }
          }
        };

        if (window.$('#shippingAddressOnedefault').is(':visible')) {
          pushToMkorsData(addressOneError);
          sendCustomEvent('errorEvent');
          clearInterval(shippingInterval);
        }
      }

      if (window.$('#shippingAddressSuggestdefault.is-invalid').length > 0) {
        var addressDefaultError = {
          eventInfo: {
            eventName: 'errorEvent',
            type: 'customer facing error',
            timeStamp: new Date(),
            processed: {
              adobeAnalytics: false,
              vendorTags: false
            },
            error: {
              errorCode: ERRORCODE.CHECKOUTADDRESSINFORMATION,
              errorMessage: window.$('#defaultAddressLine1').length > 0 ? window.$('#defaultAddressLine1')[0].innerText : '',
              errorPageType: 'checkout:shipping',
              errorType: 'Some shipping information is invalid/missing',
              fieldName: window.$('#shippingAddressSuggestdefault')[0].id || '',
              formName: 'dwfrm_shipping'
            }
          }
        };

        if (window.$('#shippingAddressSuggestdefault').is(':visible')) {
          pushToMkorsData(addressDefaultError);
          sendCustomEvent('errorEvent');
          clearInterval(shippingInterval);
        }
      }

      if (window.$('#shippingAddressCitydefault.is-invalid').length > 0) {
        var addressCityError = {
          eventInfo: {
            eventName: 'errorEvent',
            type: 'customer facing error',
            timeStamp: new Date(),
            processed: {
              adobeAnalytics: false,
              vendorTags: false
            },
            error: {
              errorCode: ERRORCODE.CHECKOUTMISSINGCITY,
              errorMessage: window.$('#defaultCity').length > 0 ? window.$('#defaultCity')[0].innerText : '',
              errorPageType: 'checkout:shipping',
              errorType: 'Some shipping information is invalid/missing',
              fieldName: window.$('#shippingAddressCitydefault')[0].id || '',
              formName: 'dwfrm_shipping'
            }
          }
        };

        if (window.$('#shippingAddressCitydefault').is(':visible')) {
          pushToMkorsData(addressCityError);
          sendCustomEvent('errorEvent');
          clearInterval(shippingInterval);
        }
      }

      if (window.$('#shippingZipCodedefault.is-invalid').length > 0 && window.$('#defaultZipCode').length > 0) {
        if (!window.$('#shippingZipCodedefault')[0].value && window.$('#defaultZipCode')[0].innerText) {
          var zipCodeError = {
            eventInfo: {
              eventName: 'errorEvent',
              type: 'customer facing error',
              timeStamp: new Date(),
              processed: {
                adobeAnalytics: false,
                vendorTags: false
              },
              error: {
                errorCode: ERRORCODE.CHECKOUTMISSINGZIPCODE,
                errorMessage: window.$('#defaultZipCode')[0].innerText,
                errorPageType: 'checkout:shipping',
                errorType: 'Some shipping information is invalid/missing',
                fieldName: window.$('#shippingZipCodedefault')[0].id || '',
                formName: 'dwfrm_shipping'
              }
            }
          };

          if (window.$('#shippingZipCodedefault').is(':visible')) {
            pushToMkorsData(zipCodeError);
            sendCustomEvent('errorEvent');
            clearInterval(shippingInterval);
          }
        }
      }

      if (window.$('#shippingStatedefault.is-invalid').length > 0 || window.$('#billingState.is-invalid').length > 0) {
        var fieldName;
        var formName;

        if (window.$('#shippingStatedefault.is-invalid').length > 0) {
          fieldName = 'shippingStatedefault';
          formName = 'dwfrm_shipping';
        } else {
          fieldName = 'billingState';
          formName = 'dwfrm_billing';
        }

        var stateError = {
          eventInfo: {
            eventName: 'errorEvent',
            type: 'customer facing error',
            timeStamp: new Date(),
            processed: {
              adobeAnalytics: false,
              vendorTags: false
            },
            error: {
              errorCode: ERRORCODE.CHECKOUTMISSINGSTATE,
              errorMessage: window.$('#defaultState').length > 0 ? window.$('#defaultState')[0].innerText : '',
              errorPageType: window.mkorsData.page.type,
              errorType: 'Some shipping information is invalid/missing',
              fieldName: fieldName,
              formName: formName
            }
          }
        };

        if (window.$('#shippingStatedefault').is(':visible') || window.$('#billingState').is(':visible')) {
          pushToMkorsData(stateError);
          sendCustomEvent('errorEvent');
          clearInterval(shippingInterval);
        }
      }

      if (window.$('#shippingPhoneNumberdefault').length > 0) {
        var phoneNumberInvalidError;

        if (window.$('#shippingPhoneNumberdefault')[0].value) {
          if (window.$('#defaultTelephoneNumber').is(':visible') && window.$('#defaultTelephoneNumber').length > 0) {
            phoneNumberInvalidError = window.$('#defaultTelephoneNumber')[0].innerText;
          }
        }

        var phoneNumberError = {
          eventInfo: {
            eventName: 'errorEvent',
            type: 'customer facing error',
            timeStamp: new Date(),
            processed: {
              adobeAnalytics: false,
              vendorTags: false
            },
            error: {
              errorCode: phoneNumberInvalidError ? ERRORCODE.CHECKOUTINVALIDNUMBER : ERRORCODE.CHECKOUTMISSINGNUMBER,
              errorMessage: phoneNumberInvalidError || 'Please enter a phone number.',
              errorPageType: 'checkout:shipping',
              errorType: 'Some shipping information is invalid/missing',
              fieldName: window.$('#shippingPhoneNumberdefault')[0].id || '',
              formName: 'dwfrm_shipping'
            }
          }
        };

        if (window.$('#defaultTelephoneNumber').is(':visible')) {
          pushToMkorsData(phoneNumberError);
          sendCustomEvent('errorEvent');
          clearInterval(shippingInterval);
        }
      }

      if (window.$('.js-no-shipping-methods').length > 0) {
        var shippingRestrictionError = {
          eventInfo: {
            eventName: 'errorEvent',
            type: 'customer facing error',
            timeStamp: new Date(),
            processed: {
              adobeAnalytics: false,
              vendorTags: false
            },
            error: {
              errorCode: ERRORCODE.SHIPPINGRESTRICTION,
              errorMessage: window.$('#smRestrictedDiv').length > 0 ? window.$('#smRestrictedDiv')[0].innerText.replace(/\n/g, '').trim() : '',
              errorPageType: 'checkout:shipping',
              errorType: 'We are unable to use shipping method or address',
              fieldName: window.$('#smRestrictedDiv').length > 0 ? window.$('#smRestrictedDiv')[0].id : '',
              formName: 'dwfrm_shipping'
            }
          }
        };

        if (window.$('.js-no-shipping-methods').is(':visible')) {
          pushToMkorsData(shippingRestrictionError);
          sendCustomEvent('errorEvent');
          clearInterval(shippingInterval);
        }
      }

      if (window.$('#shippingLastNamedefault')[0].value && window.$('#shippingFirstNamedefault')[0].value) {
        if (window.$('#shippingLastNamedefault')[0].value.length + window.$('#shippingFirstNamedefault')[0].value.length > 30) {
          var lastNameLengthError = {
            eventInfo: {
              eventName: 'errorEvent',
              type: 'customer facing error',
              timeStamp: new Date(),
              processed: {
                adobeAnalytics: false,
                vendorTags: false
              },
              error: {
                errorCode: ERRORCODE.CHECKOUTNAMELENGTH,
                errorMessage: window.$('.first-and-last-name-error').length > 0 ? window.$('.first-and-last-name-error')[0].innerText : '',
                errorPageType: 'checkout:shipping',
                errorType: 'Some shipping information is invalid/missing',
                fieldName: window.$('.first-and-last-name-error').length > 0 ? window.$('.first-and-last-name-error')[0].id : '',
                formName: 'dwfrm_shipping'
              }
            }
          };
          pushToMkorsData(lastNameLengthError);
          sendCustomEvent('errorEvent');
          clearInterval(shippingInterval);
        }
      }

      pushExpiredCardErrorEvent();
      clearInterval(shippingInterval);
    }, 100);
  });
}
/**
* Push save address error event data to the datalayer mkorsData object
*/


function saveAddressError() {
  if (window.mkorsData && window.mkorsData.page.type === 'Address Book') {
    window.$('.submit-button').on('click', function () {
      setTimeout(function () {
        if (window.$('#firstName.is-invalid').length > 0) {
          var firstNameError = {
            eventInfo: {
              eventName: 'errorEvent',
              type: 'customer facing error',
              timeStamp: new Date(),
              processed: {
                adobeAnalytics: false,
                vendorTags: false
              },
              error: {
                errorCode: ERRORCODE.CHECKOUTMISSINGFIRSTNAME,
                errorMessage: window.$('#firstNameError')[0].innerText,
                errorPageType: window.mkorsData.page.channel,
                errorType: window.mkorsData.page.type,
                fieldName: window.$('#firstName')[0].name || '',
                formName: 'address-form'
              }
            }
          };

          if (typeof window.mkorsData.event === 'undefined') {
            window.mkorsData.event = [];
          }

          window.mkorsData.event.push(firstNameError);
          sendCustomEvent('errorEvent');
        }

        if (window.$('#lastName.is-invalid').length > 0) {
          var lastNameError = {
            eventInfo: {
              eventName: 'errorEvent',
              type: 'customer facing error',
              timeStamp: new Date(),
              processed: {
                adobeAnalytics: false,
                vendorTags: false
              },
              error: {
                errorCode: ERRORCODE.CHECKOUTMISSINGLASTNAME,
                errorMessage: window.$('#lastNameError')[0].innerText,
                errorPageType: window.mkorsData.page.channel,
                errorType: window.mkorsData.page.type,
                fieldName: window.$('#lastName')[0].name || '',
                formName: 'address-form'
              }
            }
          };

          if (typeof window.mkorsData.event === 'undefined') {
            window.mkorsData.event = [];
          }

          window.mkorsData.event.push(lastNameError);
          sendCustomEvent('errorEvent');
        }

        if (window.$('#address1.is-invalid').length > 0) {
          var addressOneError = {
            eventInfo: {
              eventName: 'errorEvent',
              type: 'customer facing error',
              timeStamp: new Date(),
              processed: {
                adobeAnalytics: false,
                vendorTags: false
              },
              error: {
                errorCode: ERRORCODE.CHECKOUTMISSINGADDRESS,
                errorMessage: window.$('#addressError1')[0].innerText,
                errorPageType: window.mkorsData.page.channel,
                errorType: window.mkorsData.page.type,
                fieldName: window.$('#address1')[0].name || '',
                formName: 'address-form'
              }
            }
          };

          if (typeof window.mkorsData.event === 'undefined') {
            window.mkorsData.event = [];
          }

          window.mkorsData.event.push(addressOneError);
          sendCustomEvent('errorEvent');
        }

        if (window.$('#city.is-invalid').length > 0) {
          var addressCityError = {
            eventInfo: {
              eventName: 'errorEvent',
              type: 'customer facing error',
              timeStamp: new Date(),
              processed: {
                adobeAnalytics: false,
                vendorTags: false
              },
              error: {
                errorCode: ERRORCODE.CHECKOUTMISSINGCITY,
                errorMessage: window.$('#cityError')[0].innerText,
                errorPageType: window.mkorsData.page.channel,
                errorType: window.mkorsData.page.type,
                fieldName: window.$('#city')[0].name || '',
                formName: 'address-form'
              }
            }
          };

          if (window.$('#city').is(':visible')) {
            if (typeof window.mkorsData.event === 'undefined') {
              window.mkorsData.event = [];
            }

            window.mkorsData.event.push(addressCityError);
            sendCustomEvent('errorEvent');
          }
        }

        if (window.$('#zipCode.is-invalid').length > 0) {
          var zipCodeError = {
            eventInfo: {
              eventName: 'errorEvent',
              type: 'customer facing error',
              timeStamp: new Date(),
              processed: {
                adobeAnalytics: false,
                vendorTags: false
              },
              error: {
                errorCode: ERRORCODE.CHECKOUTMISSINGZIPCODE,
                errorMessage: window.$('#pinError')[0].innerText,
                errorPageType: window.mkorsData.page.channel,
                errorType: window.mkorsData.page.type,
                fieldName: window.$('#zipCode')[0].name || '',
                formName: 'address-form'
              }
            }
          };

          if (window.$('#zipCode').is(':visible')) {
            if (typeof window.mkorsData.event === 'undefined') {
              window.mkorsData.event = [];
            }

            window.mkorsData.event.push(zipCodeError);
            sendCustomEvent('errorEvent');
          }
        }

        if (window.$('#State.is-invalid').length > 0) {
          var stateError = {
            eventInfo: {
              eventName: 'errorEvent',
              type: 'customer facing error',
              timeStamp: new Date(),
              processed: {
                adobeAnalytics: false,
                vendorTags: false
              },
              error: {
                errorCode: ERRORCODE.CHECKOUTMISSINGSTATE,
                errorMessage: window.$('#stateError')[0].innerText,
                errorPageType: window.mkorsData.page.channel,
                errorType: window.mkorsData.page.type,
                fieldName: window.$('#State')[0].name || '',
                formName: 'address-form'
              }
            }
          };

          if (window.$('#State').is(':visible')) {
            if (typeof window.mkorsData.event === 'undefined') {
              window.mkorsData.event = [];
            }

            window.mkorsData.event.push(stateError);
            sendCustomEvent('errorEvent');
          }
        }

        if (window.$('#phone.is-invalid').length > 0) {
          var phoneNumberError = {
            eventInfo: {
              eventName: 'errorEvent',
              type: 'customer facing error',
              timeStamp: new Date(),
              processed: {
                adobeAnalytics: false,
                vendorTags: false
              },
              error: {
                errorCode: ERRORCODE.CHECKOUTMISSINGNUMBER,
                errorMessage: window.$('#phoneError')[0].innerText,
                errorPageType: window.mkorsData.page.channel,
                errorType: window.mkorsData.page.type,
                fieldName: window.$('#phone')[0].name || '',
                formName: 'address-form'
              }
            }
          };

          if (typeof window.mkorsData.event === 'undefined') {
            window.mkorsData.event = [];
          }

          window.mkorsData.event.push(phoneNumberError);
          sendCustomEvent('errorEvent');
        }

        if (window.$('#firstName')[0].value && window.$('#lastName')[0].value) {
          if (window.$('#firstName')[0].value.length + window.$('#lastName')[0].value.length > 30) {
            var lastNameLengthError = {
              eventInfo: {
                eventName: 'errorEvent',
                type: 'customer facing error',
                timeStamp: new Date(),
                processed: {
                  adobeAnalytics: false,
                  vendorTags: false
                },
                error: {
                  errorCode: ERRORCODE.CHECKOUTNAMELENGTH,
                  errorMessage: window.$('.first-and-last-name-error').length > 0 ? window.$('.first-and-last-name-error')[0].innerText : '',
                  errorPageType: window.mkorsData.page.channel,
                  errorType: window.mkorsData.page.type,
                  fieldName: window.$('#lastName')[0].name || '',
                  formName: 'address-form'
                }
              }
            };

            if (typeof window.mkorsData.event === 'undefined') {
              window.mkorsData.event = [];
            }

            window.mkorsData.event.push(lastNameLengthError);
            sendCustomEvent('errorEvent');
          }
        }
      }, 200);
    });
  }
}
/**
* Push PDP gift card error event data to the datalayer mkorsData object
*/


function sendGiftCardError() {
  window.$('.js-add-giftcard-to-cart').on('click', function () {
    setTimeout(function () {
      var errorEvent;

      if (window.$('#recipientEmail').length > 0 && window.$('#confirmRecipientEmail').length > 0) {
        if (window.$('#recipientEmail')[0].value && window.$('#confirmRecipientEmail')[0].value) {
          if (window.$('#recipientEmail')[0].value !== window.$('#confirmRecipientEmail')[0].value) {
            var emailMismatchError = {
              eventInfo: {
                eventName: 'errorEvent',
                type: 'customer facing error',
                timeStamp: new Date(),
                processed: {
                  adobeAnalytics: false,
                  vendorTags: false
                },
                error: {
                  errorCode: ERRORCODE.PDPGIFTCARDRECIPIENTEMAILMISMATCH,
                  errorMessage: window.$('.gc-email-mismatch-error.gc-custom-error').length > 0 ? window.$('.gc-email-mismatch-error.gc-custom-error')[0].innerText : '',
                  errorPageType: window.mkorsData.page.type,
                  errorType: 'Some gift card add to cart information is invalid/missing',
                  fieldName: 'email-mismatch-error',
                  formName: 'dwfrm_gcorder'
                }
              }
            };

            if (typeof window.mkorsData.event === 'undefined') {
              window.mkorsData.event = [];
            }

            pushToMkorsData(emailMismatchError);
            sendCustomEvent('errorEvent');
          }
        }
      }

      if (window.$('#form-amount-error').length > 0) {
        errorEvent = window.$('#form-amount-error');

        if (window.$('#form-amount-error')[0].innerText && errorEvent.is(':visible')) {
          var formAmountError = {
            eventInfo: {
              eventName: 'errorEvent',
              type: 'customer facing error',
              timeStamp: new Date(),
              processed: {
                adobeAnalytics: false,
                vendorTags: false
              },
              error: {
                errorCode: ERRORCODE.PDPGIFTCARDAMOUNT,
                errorMessage: window.$('#form-amount-error')[0].innerText,
                errorPageType: window.mkorsData.page.type,
                errorType: 'Some gift card add to cart information is invalid/missing',
                fieldName: 'form-amount-error',
                formName: 'dwfrm_gcorder'
              }
            }
          };

          if (typeof window.mkorsData.event === 'undefined') {
            window.mkorsData.event = [];
          }

          pushToMkorsData(formAmountError);
          sendCustomEvent('errorEvent');
        }
      }

      if (window.$('.otheramount.gc-custom-error').length > 0) {
        errorEvent = window.$('.otheramount.gc-custom-error');

        if (window.$('.otheramount.gc-custom-error')[0].innerText && errorEvent.is(':visible')) {
          var customAmountError = {
            eventInfo: {
              eventName: 'errorEvent',
              type: 'customer facing error',
              timeStamp: new Date(),
              processed: {
                adobeAnalytics: false,
                vendorTags: false
              },
              error: {
                errorCode: ERRORCODE.PDPGIFTCARDINVALIDAMOUNTDECIMAL,
                errorMessage: errorEvent[0].innerText,
                errorPageType: window.mkorsData.page.type,
                errorType: 'Some gift card add to cart information is invalid/missing',
                fieldName: 'custom-amount-error',
                formName: 'dwfrm_gcorder'
              }
            }
          };

          if (typeof window.mkorsData.event === 'undefined') {
            window.mkorsData.event = [];
          }

          pushToMkorsData(customAmountError);
          sendCustomEvent('errorEvent');
        }
      }
    }, 200);
  });
  window.$('.form-input-custom').on('focusout', function () {
    setTimeout(function () {
      if (window.$('.otheramount.gc-custom-error').length > 0) {
        if (window.$('.otheramount.gc-custom-error')[0].innerText && window.$('.otheramount.gc-custom-error').is(':visible')) {
          var customAmountFocusOutError = {
            eventInfo: {
              eventName: 'errorEvent',
              type: 'customer facing error',
              timeStamp: new Date(),
              processed: {
                adobeAnalytics: false,
                vendorTags: false
              },
              error: {
                errorCode: ERRORCODE.PDPGIFTCARDINVALIDAMOUNT,
                errorMessage: window.$('.otheramount.gc-custom-error')[0].innerText,
                errorPageType: window.mkorsData.page.type,
                errorType: 'Some gift card add to cart information is invalid/missing',
                fieldName: 'custom-amount-error',
                formName: 'dwfrm_gcorder'
              }
            }
          };

          if (typeof window.mkorsData.event === 'undefined') {
            window.mkorsData.event = [];
          }

          pushToMkorsData(customAmountFocusOutError);
          sendCustomEvent('errorEvent');
        }
      }
    }, 200);
  });
}
/**
* Push checkout submit payment event data to the datalayer mkorsData object
*/


function checkoutSubmitPayment() {
  window.$('.submit-payment').bind('click', function () {
    setTimeout(function () {
      if (!window.$('#dwfrm_billing')[0].checkValidity()) {
        if (window.$('.cardNumber.invalid-feedback').length > 0) {
          if (window.$('.cardNumber.invalid-feedback')[0].innerText) {
            var invalidCardError = {
              eventInfo: {
                eventName: 'errorEvent',
                type: 'customer facing error',
                timeStamp: new Date(),
                processed: {
                  adobeAnalytics: false,
                  vendorTags: false
                },
                error: {
                  errorCode: ERRORCODE.INVALIDCARDNUMBER,
                  errorMessage: window.$('.cardNumber.invalid-feedback')[0].innerText,
                  errorPageType: 'checkout:billing',
                  errorType: 'Some payment information is invalid/missing',
                  fieldName: 'cardNumber',
                  formName: 'dwfrm_billing'
                }
              }
            };

            if (typeof window.mkorsData.event === 'undefined') {
              window.mkorsData.event = [];
            }

            window.mkorsData.event.push(invalidCardError);
            sendCustomEvent('errorEvent');
          }
        }
      }
    }, 200);
  });
}
/**
* Push employee discount code error event data to the datalayer mkorsData object
*/


function employeeDiscountError() {
  window.$('.promo-code-btn.submit-promocode ').on('click', function () {
    var promoCodeInterval = setInterval(function () {
      if (window.$('.invalid-ID-DOB').length > 0) {
        if (window.$('#employeeId').length > 0 && window.$('#dateOfBirth').length > 0) {
          if (window.$('#employeeId')[0].value && window.$('#dateOfBirth')[0].value) {
            if (window.$('.invalid-ID-DOB')[0].innerText && window.$('.invalid-ID-DOB').is(':visible')) {
              var invalidPromoError = {
                eventInfo: {
                  eventName: 'errorEvent',
                  type: 'customer facing error',
                  timeStamp: new Date(),
                  processed: {
                    adobeAnalytics: false,
                    vendorTags: false
                  },
                  error: {
                    errorCode: ERRORCODE.EMPLOYEEINVALIDIDCOMBINATION,
                    errorMessage: window.$('.invalid-ID-DOB')[0].innerText.replace(/\n/g, '').trim(),
                    errorPageType: window.mkorsData.page.type,
                    errorType: 'Some employee discount code information is invalid/missing',
                    fieldName: 'invalid-ID-DOB',
                    formName: 'promo-code-form'
                  }
                }
              };
              clearInterval(promoCodeInterval);

              if (typeof window.mkorsData.event === 'undefined') {
                window.mkorsData.event = [];
              }

              window.mkorsData.event.push(invalidPromoError);
              sendCustomEvent('errorEvent');
            }

            if (window.$('#invalidEmployeePromoCode').length > 0) {
              if (window.$('#invalidEmployeePromoCode')[0].innerText && window.$('#invalidEmployeePromoCode').is(':visible')) {
                var invalidSecurityError = {
                  eventInfo: {
                    eventName: 'errorEvent',
                    type: 'customer facing error',
                    timeStamp: new Date(),
                    processed: {
                      adobeAnalytics: false,
                      vendorTags: false
                    },
                    error: {
                      errorCode: ERRORCODE.EMPLOYEEINVALIDSECURITYCODE,
                      errorMessage: window.$('#invalidEmployeePromoCode')[0].innerText.replace(/\n/g, '').trim(),
                      errorPageType: window.mkorsData.page.type,
                      errorType: 'Some employee discount code information is invalid/missing',
                      fieldName: 'employeeSecurityCode',
                      formName: 'promo-code-form'
                    }
                  }
                };
                clearInterval(promoCodeInterval);

                if (typeof window.mkorsData.event === 'undefined') {
                  window.mkorsData.event = [];
                }

                window.mkorsData.event.push(invalidSecurityError);
                sendCustomEvent('errorEvent');
              }
            }
          } else if (window.$('.coupon-not-applied') && window.$('.coupon-not-applied').length > 0) {
            if (window.$('.coupon-not-applied')[0].innerText) {
              var couponNotAppliedError = {
                eventInfo: {
                  eventName: 'errorEvent',
                  type: 'customer facing error',
                  timeStamp: new Date(),
                  processed: {
                    adobeAnalytics: false,
                    vendorTags: false
                  },
                  error: {
                    errorCode: ERRORCODE.COUPONNOTAPPLIED,
                    errorMessage: window.$('.coupon-not-applied')[0].innerText,
                    errorPageType: window.mkorsData.page.type,
                    errorType: 'Promo code not applicable',
                    fieldName: window.$('.coupon-not-applied')[0].id || '',
                    formName: 'promo-code-form'
                  }
                }
              };
              clearInterval(promoCodeInterval);
              pushToMkorsData(couponNotAppliedError);
              sendCustomEvent('errorEvent');
            }
          }
        }
      }
    }, 100);
  });
}
/**
  * Push submit order event data to the datalayer mkorsData object
  */


function pushSubmitOrderEvent() {
  var orderEvent = sessionStorage.getItem('submitOrderEvent') ? sessionStorage.getItem('submitOrderEvent') : [];

  if (orderEvent.length > 0) {
    var orderEventJSON = JSON.parse(orderEvent);
    orderEventJSON.eventInfo.timeStamp = new Date();

    if (typeof window.mkorsData.event === 'undefined') {
      window.mkorsData.event = [];
    }

    window.mkorsData.event.push(orderEventJSON);
  }

  sessionStorage.removeItem('submitOrderEvent');
}
/**
  * Push product remove from cart event data to the datalayer mkorsData object
  */


function productRemoveFromCart() {
  var removeFromCart = sessionStorage.getItem('productRemoveFromCart') ? sessionStorage.getItem('productRemoveFromCart') : [];
  var eventObj = {
    eventName: 'removeFromCart',
    type: 'cart',
    timeStamp: new Date(),
    processed: {
      adobeAnalytics: false,
      vendorTags: false
    }
  };

  if (removeFromCart && removeFromCart.length > 0) {
    var removeFromCartJSON = JSON.parse(removeFromCart);

    if (removeFromCartJSON) {
      var mkorsDataobj = {
        eventInfo: eventObj,
        product: removeFromCartJSON.product || removeFromCartJSON
      };

      if (typeof window.mkorsData.event === 'undefined') {
        window.mkorsData.event = [];
      }

      window.mkorsData.event.push(mkorsDataobj);
    }

    sessionStorage.removeItem('productRemoveFromCart');
  }
}
/**
  * Push product add to favorites event data to the datalayer mkorsData object
  */


function productAddToFavorites() {
  var favouritesAddProductEvent = sessionStorage.getItem('addproducttofavouritescart') ? sessionStorage.getItem('addproducttofavouritescart') : '';
  var eventJSON = JSON.parse(sessionStorage.getItem('addproducttofavouritescart'));

  if (window.mkorsData && window.mkorsData.page && window.mkorsData.page.type === 'Shopping Cart') {
    if (favouritesAddProductEvent && eventJSON) {
      if (eventJSON.eventInfo) {
        eventJSON.eventInfo.timeStamp = new Date();
      }

      if (typeof window.mkorsData.event === 'undefined') {
        window.mkorsData.event = [];
      }

      window.mkorsData.event.push(eventJSON);
    }
  }

  sessionStorage.removeItem('addproducttofavouritescart');
}
/**
* Push view Favorites click event
*/


function pushViewFavoritesEvent() {
  var favoritesPageType = sessionStorage.getItem('viewFavoritesClick');

  if (favoritesPageType) {
    $body.trigger('event:viewFavoritesEvent', favoritesPageType);
  }

  sessionStorage.removeItem('viewFavoritesClick');
}
/**
* Push heart icon click event
*/


function pushHeartIconClickEvent() {
  var favoritesPageType = sessionStorage.getItem('heartIconClick');

  if (favoritesPageType) {
    $body.trigger('event:heartIconClickEvent', favoritesPageType);
  }

  sessionStorage.removeItem('heartIconClick');
}
/**
* Push reset password data to the datalayer mkorsData object
*/


function resetPassword() {
  window.$(document).on('click', 'button.btn-save', function () {
    $body.trigger('event:resetPassword');
  });
}
/**
* Push socialshare event data to the datalayer mkorsData object
*/


function socialShareEvent() {
  var socialShare = Array.from(document.getElementsByClassName('mk-social-links')).pop();

  if (socialShare) {
    socialShare.onclick = function (e) {
      var socialSite = e.target.className;
      $body.trigger('socialShare', socialSite);
    };
  }
}
/**
 * Profile session timeout event trigger
 */


function profileSessionTimeout() {
  var profileSessionTimeoutEvent = {
    error: {
      errorCode: '',
      errorMessage: 'Session has timed out, log back in',
      errorType: 'timeout'
    },
    eventName: 'errorEvent',
    type: 'customer facing error',
    timeStamp: new Date(),
    processed: {
      adobeAnalytics: false,
      vendorTags: false
    }
  };
  var querySelector = Array.from(document.querySelectorAll('.page')).pop();

  if (querySelector.getAttribute('data-action') === 'Login-Show' && querySelector.getAttribute('data-querystring') === 'rurl=1') {
    if (typeof window.mkorsData.event === 'undefined') {
      window.mkorsData.event = [];
    }

    window.mkorsData.event.push(profileSessionTimeoutEvent);
  }
}
/**
* Push buy all event data to the datalayer mkorsData object
*/


function buyAllEvent() {
  var buyAllButton = document.getElementsByClassName('buy-all-set')[0];

  if (buyAllButton && window.mkorsData.product) {
    buyAllButton.onclick = function () {
      var event = {
        eventInfo: {
          eventName: 'buyAll',
          type: 'product interaction',
          timeStamp: new Date(),
          processed: {
            adobeAnalytics: false,
            vendorTags: false
          }
        },
        product: window.mkorsData.product
      };

      if (typeof window.mkorsData.event === 'undefined') {
        window.mkorsData.event = [];
      }

      window.mkorsData.event.push(event);
    };
  }
}
/**
* Push register page error event to the datalayer mkorsData object
*/


function registerErrorEvent() {
  var registerButton = window.$('.register');

  if (registerButton && registerButton.length > 0) {
    window.$(document).on('mousedown', registerButton, function () {
      if (window.$('#privacy-policy:checked').length < 1 && window.$('#privacy-policy.is-invalid').length > 0) {
        var event = {
          eventInfo: {
            eventName: 'errorEvent',
            type: 'customer facing error',
            timeStamp: new Date(),
            processed: {
              adobeAnalytics: false,
              vendorTags: false
            },
            error: {
              errorCode: ERRORCODE.CREATEACCOUNTTERMSANDCONDITIONSMISSING,
              errorMessage: window.$('#form-privacypolicy-error').length > 0 ? window.$('#form-privacypolicy-error')[0].innerText : '',
              errorPageType: window.mkorsData.page.type,
              errorType: 'Some account creation information is invalid/missing',
              fieldName: 'privacy-policy',
              formName: 'dwfrm_profile'
            }
          }
        };

        if (typeof window.mkorsData.event === 'undefined') {
          window.mkorsData.event = [];
        }

        window.mkorsData.event.push(event);
      }
    });
  }
}
/**
* Push recaptcha event data to the datalayer mkorsData object
*/


function reCaptchaEvent() {
  var event;
  window.$(document).on('mousedown', 'button.recaptcha-trigger', function () {
    setTimeout(function () {
      var googleRecaptcha = window.$('.g-recaptcha');
      var recaptchaExists = false;

      if (googleRecaptcha && googleRecaptcha.length > 0) {
        if (googleRecaptcha.is(':visible')) {
          for (var i = 0; i < googleRecaptcha.length; i++) {
            if (googleRecaptcha[i].childElementCount > 0) {
              recaptchaExists = true;
              break;
            }
          }

          var pageType;

          if (recaptchaExists) {
            if (window.mkorsData) {
              pageType = window.mkorsData.page.type;
            }

            event = {
              eventInfo: {
                eventName: 'reCaptcha',
                type: pageType,
                timeStamp: new Date(),
                processed: {
                  adobeAnalytics: false,
                  vendorTags: false
                }
              }
            };

            if (typeof window.mkorsData.event === 'undefined') {
              window.mkorsData.event = [];
            }

            window.mkorsData.event.push(event);
          }
        }
      }
    }, 2500);
  });
}
/**
* Push checkout sign in success event data to the datalayer mkorsData object
*/


function checkoutRegisteredUserLogin() {
  var signInSuccessEvent = sessionStorage.getItem('signInSuccessEvent');
  var loyaltyLoginEvent = sessionStorage.getItem('loyaltyLoginEvent');
  var checkoutSignInEvent = {};
  var checkoutLoyaltyLoginEvent = {};
  var userArray = [];

  if (signInSuccessEvent) {
    if (typeof window.mkorsData.event === 'undefined') {
      window.mkorsData.event = [];
    }

    var eventJSON = JSON.parse(signInSuccessEvent);
    eventJSON.timeStamp = new Date();
    var userData = sessionStorage.getItem('userData');

    if (userData) {
      var userDataJSON = JSON.parse(userData);
      userArray.push(userDataJSON);
    }

    checkoutSignInEvent.eventInfo = eventJSON;
    checkoutSignInEvent.user = userArray;
    window.mkorsData.event.push(checkoutSignInEvent);

    if (loyaltyLoginEvent && userArray.length > 0 && userArray[0].profile[0].profileInfo.loyaltyOptIn) {
      var loyaltyLoginEventJSON = JSON.parse(loyaltyLoginEvent);
      loyaltyLoginEventJSON.timeStamp = new Date();
      checkoutLoyaltyLoginEvent.eventInfo = loyaltyLoginEventJSON;
      checkoutLoyaltyLoginEvent.user = userArray;
      window.mkorsData.event.push(checkoutLoyaltyLoginEvent);
      sendCustomEvent('loyaltyLogin');
    }
  }

  sessionStorage.removeItem('signInSuccessEvent');
  sessionStorage.removeItem('userData');
  sessionStorage.removeItem('loyaltyLoginEvent');
}
/**
  * Push share favorites error event data to the datalayer mkorsData object
  */


function shareFavoritesError() {
  window.$(document).on('click', '.js-send-share-flyout', function () {
    if (typeof window.mkorsData.event === 'undefined') {
      window.mkorsData.event = [];
    }

    if (window.$('#recipientEmail.is-invalid').length > 0) {
      if (window.$('#recipientEmail')[0]) {
        if (window.$('#recipientEmail')[0].value && window.$('#recipientEmail')[0].value.length > 0) {
          var invalidEmailError = {
            eventInfo: {
              eventName: 'errorEvent',
              type: 'customer facing error',
              timeStamp: new Date(),
              processed: {
                adobeAnalytics: false,
                vendorTags: false
              },
              error: {
                errorCode: ERRORCODE.FAVORITESINVALIDEMAIL,
                errorMessage: window.$('#form-recipientEmail-error').length > 0 ? window.$('#form-recipientEmail-error')[0].innerText : '',
                errorPageType: 'Favorites',
                errorType: 'Some favorites sharing information is invalid/missing',
                fieldName: 'email',
                formName: ''
              }
            }
          };
          window.mkorsData.event.push(invalidEmailError);
          sendCustomEvent('errorEvent');
        } else {
          var missingEmailError = {
            eventInfo: {
              eventName: 'errorEvent',
              type: 'customer facing error',
              timeStamp: new Date(),
              processed: {
                adobeAnalytics: false,
                vendorTags: false
              },
              error: {
                errorCode: ERRORCODE.FAVORITESMISSINGEMAIL,
                errorMessage: window.$('#form-recipientEmail-error').length > 0 ? window.$('#form-recipientEmail-error')[0].innerText : '',
                errorPageType: 'Favorites',
                errorType: 'Some favorites sharing information is invalid/missing',
                fieldName: 'email',
                formName: ''
              }
            }
          };
          window.mkorsData.event.push(missingEmailError);
          sendCustomEvent('errorEvent');
        }
      }
    }
  });
}
/**
  * Push sign in error event data to the datalayer mkorsData object
  */


function signInPageErrorEvents() {
  var signInButtons = document.getElementsByClassName('js-user-sign-in');
  var signInButton;

  if (signInButtons.length > 0) {
    signInButton = Array.from(signInButtons).pop();
  }

  window.$(signInButton).on('click', function () {
    if (typeof window.mkorsData.event === 'undefined') {
      window.mkorsData.event = [];
    }

    setTimeout(function () {
      if (window.$('#login-form-email.is-invalid').length < 1 && window.$('#login-form-password.is-invalid').length < 1 && window.$('#login-form').find('.alert-danger').length > 0) {
        var invalidLoginError = {
          eventInfo: {
            eventName: 'errorEvent',
            type: 'customer facing error',
            timeStamp: new Date(),
            processed: {
              adobeAnalytics: false,
              vendorTags: false
            },
            error: {
              errorCode: window.$('#login-form').find('.alert-danger')[0].innerText.indexOf('locked') !== -1 ? ERRORCODE.LOGINACCOUNTLOCKED : ERRORCODE.LOGININVALIDREGISTERED,
              errorMessage: window.$('#login-form').find('.alert-danger')[0].innerText.replace(/\n/g, '').trim() || '',
              errorPageType: window.mkorsData.page.type,
              errorType: window.$('#login-form').find('.alert-danger')[0].innerText.indexOf('locked') !== -1 ? 'Account locked' : 'Some log in information is invalid/missing',
              fieldName: 'login-form-password',
              formName: 'login-form'
            }
          }
        };
        window.mkorsData.event.push(invalidLoginError);
        sendCustomEvent('errorEvent');
      } else if (window.$('#page-login-form-email.is-invalid').length < 1 && window.$('#page-login-form-password.is-invalid').length < 1 && window.$('#page-login-form').find('.alert-danger').length > 0) {
        var invalidLoginPageError = {
          eventInfo: {
            eventName: 'errorEvent',
            type: 'customer facing error',
            timeStamp: new Date(),
            processed: {
              adobeAnalytics: false,
              vendorTags: false
            },
            error: {
              errorCode: window.$('#page-login-form').find('.alert-danger')[0].innerText.indexOf('locked') !== -1 ? ERRORCODE.LOGINACCOUNTLOCKED : ERRORCODE.LOGININVALIDREGISTERED,
              errorMessage: window.$('#page-login-form').find('.alert-danger')[0].innerText.replace(/\n/g, '').trim() || '',
              errorPageType: window.mkorsData.page.type,
              errorType: 'Some log in information is invalid/missing',
              fieldName: 'page-login-form-password',
              formName: 'page-login-form'
            }
          }
        };
        window.mkorsData.event.push(invalidLoginPageError);
        sendCustomEvent('errorEvent');
      }
    }, 2000);
  });
}
/**
  * Push guest order status error event data to the datalayer mkorsData object
  */


function guestOrderStatus() {
  window.$('form[name="trackorder-form"]').find(':submit').on('mouseup', function () {
    sessionStorage.setItem('guestOrderError', true);
  });
}
/**
  * Push guest order status error event data to the datalayer mkorsData object
  */


function pushGuestOrderStatusErrorEvent() {
  var success = sessionStorage.getItem('guestOrderError') ? sessionStorage.getItem('guestOrderError') : '';

  if (success) {
    if (window.$('.alert ,.error-msg').length > 0) {
      var guestOrderError = {
        eventInfo: {
          eventName: 'errorEvent',
          type: 'customer facing error',
          timeStamp: new Date(),
          processed: {
            adobeAnalytics: false,
            vendorTags: false
          },
          error: {
            errorCode: ERRORCODE.GUESTORDERERROR,
            errorMessage: window.$('.alert ,.error-msg')[0].innerText,
            errorPageType: 'Register',
            errorType: 'Some order status information entered is invalid/missing',
            fieldName: '',
            formName: 'trackorder-form'
          }
        }
      };

      if (typeof window.mkorsData.event === 'undefined') {
        window.mkorsData.event = [];
      }

      window.mkorsData.event.push(guestOrderError);
    }
  }

  sessionStorage.removeItem('guestOrderError');
}
/**
  * Push favorites add to cart error event data to the datalayer mkorsData object
  */


function cartFavoritesError() {
  window.$('.move-all-to-bag').on('click', function () {
    if (typeof window.mkorsData.event === 'undefined') {
      window.mkorsData.event = [];
    }

    if (window.$('.move-all-to-bag.partially-enabled').length > 0) {
      var addToCartError = {
        eventInfo: {
          eventName: 'errorEvent',
          type: 'customer facing error',
          timeStamp: new Date(),
          processed: {
            adobeAnalytics: false,
            vendorTags: false
          },
          error: {
            errorCode: ERRORCODE.CARTFAVORITESMOVETOBAGERROR,
            errorMessage: 'Please correct the errors indicated below before moving items to Bag',
            errorPageType: 'Favorites',
            errorType: 'One or more items in your favorites are no longer available',
            fieldName: 'Move all to bag',
            formName: ''
          }
        }
      };
      window.mkorsData.event.push(addToCartError);
      sendCustomEvent('errorEvent');
    }

    if (window.$('.select-attributes.is-invalid').length > 0) {
      var selectOptionsError = {
        eventInfo: {
          eventName: 'errorEvent',
          type: 'customer facing error',
          timeStamp: new Date(),
          processed: {
            adobeAnalytics: false,
            vendorTags: false
          },
          error: {
            errorCode: ERRORCODE.FAVORITESSELECTOPTIONS,
            errorMessage: 'Please select options to proceed.',
            errorPageType: 'Favorites',
            errorType: 'Some favorites sharing information is invalid/missing',
            fieldName: 'select options',
            formName: 'select-attributes'
          }
        }
      };
      window.mkorsData.event.push(selectOptionsError);
      sendCustomEvent('errorEvent');
    }
  });
  window.$('.share-icon').on('click', function () {
    if (typeof window.mkorsData.event === 'undefined') {
      window.mkorsData.event = [];
    }

    if (window.$('.js-share-button.partially-enabled').length > 0) {
      var addToCartError = {
        eventInfo: {
          eventName: 'errorEvent',
          type: 'customer facing error',
          timeStamp: new Date(),
          processed: {
            adobeAnalytics: false,
            vendorTags: false
          },
          error: {
            errorCode: ERRORCODE.CARTFAVORITESSHAREERROR,
            errorMessage: 'Please correct the errors indicated below before sharing Favorites.',
            errorPageType: 'Favorites',
            errorType: 'Some favorites sharing information is invalid/missing',
            fieldName: 'share-icon',
            formName: ''
          }
        }
      };
      window.mkorsData.event.push(addToCartError);
      sendCustomEvent('errorEvent');
    }

    if (window.$('.select-attributes.is-invalid').length > 0) {
      var selectOptionsError = {
        eventInfo: {
          eventName: 'errorEvent',
          type: 'customer facing error',
          timeStamp: new Date(),
          processed: {
            adobeAnalytics: false,
            vendorTags: false
          },
          error: {
            errorCode: ERRORCODE.FAVORITESSELECTOPTIONS,
            errorMessage: 'Please select options to proceed.',
            errorPageType: 'Favorites',
            errorType: 'Some favorites sharing information is invalid/missing',
            fieldName: 'select options',
            formName: 'select-attributes'
          }
        }
      };
      window.mkorsData.event.push(selectOptionsError);
      sendCustomEvent('errorEvent');
    }
  });
}
/**
  * Push form error events on focus out to the datalayer mkorsData object
  * @param {Object} inputID The current input field
  * @param {Object} closestForm The current form
  */


function submitInputFocusOutErrorEvent(inputID, closestForm) {
  setTimeout(function () {
    var errorMessage;
    var form = closestForm;
    var errorCode = '';
    var fieldName;
    var formName;
    var errorEvent;
    var invalidInput;

    if (inputID.length > 0 && form && form.length > 0 && form[0].name) {
      invalidInput = window.$('[name=' + form[0].name + '] [id=' + inputID[0].id + '].is-invalid');

      if (invalidInput.length > 0 && invalidInput.is(':visible')) {
        if (invalidInput.next().length > 0 && invalidInput.next()[0].nodeName === 'DIV') {
          errorMessage = invalidInput.next()[0].innerText;
        }

        fieldName = inputID[0].id;
        formName = form[0].name;
        errorEvent = {
          eventInfo: {
            eventName: 'errorEvent',
            type: 'customer facing error',
            timeStamp: new Date(),
            processed: {
              adobeAnalytics: false,
              vendorTags: false
            },
            error: {
              errorCode: errorCode,
              errorMessage: errorMessage,
              errorPageType: window.mkorsData.page.type,
              errorType: 'Some information entered is invalid/missing',
              fieldName: fieldName,
              formName: formName
            }
          }
        };

        if (formName && fieldName && errorMessage) {
          if (errorEventCodes[formName] && errorEventCodes[formName][fieldName] && errorEventCodes[formName][fieldName][errorMessage]) {
            if (errorEventCodes[formName][fieldName][errorMessage].errorType) {
              errorEvent.eventInfo.error.errorType = errorEventCodes[formName][fieldName][errorMessage].errorType;
              errorEvent.eventInfo.error.errorCode = errorEventCodes[formName][fieldName][errorMessage].errorCode;
            } else {
              errorEvent.eventInfo.error.errorType = errorEventCodes[formName].errorType;
              errorEvent.eventInfo.error.errorCode = errorEventCodes[formName][fieldName][errorMessage];
            }

            if (errorEventCodes[formName][fieldName].errorMessage) {
              errorEvent.eventInfo.error.errorMessage = errorEventCodes[formName][fieldName].errorMessage;
            }
          }
        }

        if (errorMessage) {
          if (typeof window.mkorsData.event === 'undefined') {
            window.mkorsData.event = [];
          }

          pushToMkorsData(errorEvent);
          sendCustomEvent('errorEvent');
        }
      }
    }
  }, 2000);
}
/**
  * Push form error events data to the datalayer mkorsData object
  * @param {Object} closestForm The current form
  */


function submitFormErrorEvent(closestForm) {
  setTimeout(function () {
    var form = closestForm;
    var errorMessage;
    var errorCode = '';
    var fieldName;
    var formName;

    if (form.length > 0) {
      var errorEvent;

      for (var i = 0; i < form[0].length; i++) {
        var inputID = form[0][i].getAttribute('id');
        var invalidInput;

        if (inputID) {
          if (form[0].name) {
            invalidInput = window.$('[name=' + form[0].name + '] [id=' + inputID + '].is-invalid');
          } else {
            invalidInput = window.$('#' + inputID + '.is-invalid');
          }

          if (invalidInput && invalidInput.length > 0 && invalidInput.is(':visible')) {
            if (invalidInput.next().length > 0 && invalidInput.next()[0].nodeName === 'DIV') {
              errorMessage = invalidInput.next()[0].innerText;
            } else if (invalidInput.parent().length > 0 && invalidInput.parent().next().length > 0 && invalidInput.parent().next()[0].nodeName === 'DIV') {
              errorMessage = invalidInput.parent().next()[0].innerText;
            }

            fieldName = window.$('#' + inputID)[0].id;
            formName = form[0].name;
            errorEvent = {
              eventInfo: {
                eventName: 'errorEvent',
                type: 'customer facing error',
                timeStamp: new Date(),
                processed: {
                  adobeAnalytics: false,
                  vendorTags: false
                },
                error: {
                  errorCode: errorCode,
                  errorMessage: errorMessage,
                  errorPageType: window.mkorsData.page.type,
                  errorType: 'Some information entered is invalid/missing',
                  fieldName: fieldName,
                  formName: formName
                }
              }
            };

            if (formName && fieldName && errorMessage) {
              if (errorEventCodes[formName] && errorEventCodes[formName][fieldName] && errorEventCodes[formName][fieldName][errorMessage]) {
                if (errorEventCodes[formName][fieldName][errorMessage].errorType) {
                  errorEvent.eventInfo.error.errorType = errorEventCodes[formName][fieldName][errorMessage].errorType;
                  errorEvent.eventInfo.error.errorCode = errorEventCodes[formName][fieldName][errorMessage].errorCode;
                } else {
                  errorEvent.eventInfo.error.errorType = errorEventCodes[formName].errorType;
                  errorEvent.eventInfo.error.errorCode = errorEventCodes[formName][fieldName][errorMessage];
                }

                if (errorEventCodes[formName][fieldName].errorMessage) {
                  errorEvent.eventInfo.error.errorMessage = errorEventCodes[formName][fieldName].errorMessage;
                }
              }
            }

            if (errorMessage) {
              if (typeof window.mkorsData.event === 'undefined') {
                window.mkorsData.event = [];
              }

              pushToMkorsData(errorEvent);
              sendCustomEvent('errorEvent');
            }
          }
        }
      }
    }
  }, 2500);
}
/**
  * Push form error events on enter keypress to the datalayer mkorsData object
  */


function formEnterEvents() {
  window.$('form').each(function () {
    window.$(this).find('input').keypress(function (e) {
      if (e.keyCode === 13) {
        submitFormErrorEvent(window.$(this).closest('form'));
      }
    });
    window.$(this).find('input').focusout(function () {
      var closestForm = window.$(this).closest('form');
      submitInputFocusOutErrorEvent(window.$(this), closestForm);
    });
  });
}
/**
  * Push form error events data to the datalayer mkorsData object
  */


function formErrorEvents() {
  window.$(document).on('mouseup', "button[type='submit']", function () {
    submitFormErrorEvent(window.$(this).closest('form'));
  });
}
/**
  * Push favorites add to cart error event data to the datalayer mkorsData object
  */


function analyticsReflektion() {
  setTimeout(function () {
    window.$('.product-tile.rfk-product').show(function () {
      if (window.$('.rfk-carousel-container') && window.$('.rfk-carousel-container').length > 0) {
        if (typeof window.mkorsData.crossSellGroup === 'undefined') {
          window.mkorsData.crossSellGroup = {};
        }

        var crossSellArray = [];
        window.$('.rfk-carousel').each(function (index) {
          var crossSell = {
            product: [],
            productCount: '',
            strategy: ''
          };
          var reflektionProducts = window.$(window.$('.rfk-carousel-container')[index]).find('.product-tile.rfk-product');
          var i = 0;
          reflektionProducts.each(function () {
            var productData = window.$(this);
            var productDetails = {
              productID: productData.find('.product-tile-id').length > 0 ? productData.find('.product-tile-id')[0].innerText.replace(/\n/g, '').trim() : '',
              displayIndex: i,
              mfr: productData.find('.product-tile-brand').length > 0 ? productData.find('.product-tile-brand')[0].innerText.replace(/\n/g, '').trim() : '',
              mfrItemNum: productData.find('.product-tile-masterID').length > 0 ? productData.find('.product-tile-masterID')[0].innerText.replace(/\n/g, '').trim() : ''
            };
            crossSell.productCount = reflektionProducts.length;
            crossSell.strategy = window.$('.rfk-carousel')[index].previousElementSibling.innerText;
            crossSell.product.push(productDetails);
            i++;
          });

          if (crossSell.product.length > 0) {
            crossSellArray.push(crossSell);
          }
        });
        window.mkorsData.crossSellGroup = crossSellArray;
      }
    });
  }, 2500);
}
/**
  * Push favorites add to cart error event data to the datalayer mkorsData object
  */


function pushCrossSellCartridge() {
  window.$(document).on('mousedown', '.product-tile.rfk-product', function (e) {
    var crossSellProduct = e.currentTarget.getElementsByClassName('product-tile-masterID')[0].innerText.replace(/\n/g, '').trim() || '';
    var crossSellType = window.$(this).closest('.rfk-carousel')[0].previousElementSibling.innerText;
    sessionStorage.setItem('crossSellType', crossSellType);
    sessionStorage.setItem('crossSell', crossSellProduct);
  });
}
/**
  * Push size guide open event data
  */


function pushSizeGuideOpenEventData() {
  window.$(document).on('click', '.size-chart .size-guide-cta', function () {
    var sizeGuideEvent = {
      eventInfo: {
        eventName: 'sizeGuideOpen',
        type: 'sizeGuide',
        timeStamp: new Date(),
        processed: {
          adobeAnalytics: false,
          vendorTags: false
        }
      }
    };

    if (typeof window.mkorsData.event === 'undefined') {
      window.mkorsData.event = [];
    }

    window.mkorsData.event.push(sizeGuideEvent);
    sendCustomEvent('sizeGuideOpen');
  });
}
/**
  * Push size guide close event data
  */


function pushSizeGuideCloseEventData() {
  window.$(document).on('click', '#sizeChartModal button', function () {
    var sizeGuideEvent = {
      eventInfo: {
        eventName: 'sizeGuideClose',
        type: 'sizeGuide',
        timeStamp: new Date(),
        processed: {
          adobeAnalytics: false,
          vendorTags: false
        }
      }
    };

    if (typeof window.mkorsData.event === 'undefined') {
      window.mkorsData.event = [];
    }

    window.mkorsData.event.push(sizeGuideEvent);
    sendCustomEvent('sizeGuideClose');
  });
}
/**
  * Update site section level for static pages when part of the navigation bar
  */


function updateStaticPageSiteSectionLevel() {
  window.$('.nav-item').on('click', function () {
    var navLink = window.$(this).find('.nav-link');

    if (navLink && !navLink.attr('target')) {
      sessionStorage.setItem('navItemClicked', true);
    }
  });
}
/**
  * Push sale products mkorsData object
  */


function pushSaleCategoryProducts() {
  if (window.location.href.indexOf('sale') > -1) {
    sessionStorage.setItem('saleCategoryID', true);
  }
}
/**
  * Push create account invalid number error event data
  */


function pushCreateAccountPageErrorEvents() {
  window.$(document).on('mousedown', '.joinkorsVipbtn', function () {
    var _this2 = this;

    setInterval(function () {
      if (window.$('#form-phone-error').is(':visible') && window.$('#form-phone-error').length > 0 && window.$('#form-phone-error')[0].innerText) {
        var invalidNumberError = {
          eventInfo: {
            eventName: 'errorEvent',
            type: 'customer facing error',
            timeStamp: new Date(),
            processed: {
              adobeAnalytics: false,
              vendorTags: false
            },
            error: {
              errorCode: ERRORCODE.CREATEACCOUNTINVALIDNUMBER,
              errorMessage: window.$('#form-phone-error')[0].innerText,
              errorPageType: window.mkorsData.page.type,
              errorType: 'Some account creation information is invalid/missing',
              fieldName: window.$('#registration-form-phone').length > 0 ? window.$('#registration-form-phone')[0].id : '',
              formName: 'dwfrm_profile'
            }
          }
        };

        if (typeof window.mkorsData.event === 'undefined') {
          window.mkorsData.event = [];
        }

        pushToMkorsData(invalidNumberError);
        sendCustomEvent('errorEvent');
        clearInterval(_this2);
      }
    }, 100);
  });
}
/**
  * Push favorites add to cart error event data to the datalayer mkorsData object
  */


function pushCrossSell() {
  if (sessionStorage.getItem('crossSell') && sessionStorage.getItem('crossSellType')) {
    var currentProductID = window.$('.product-detail.product-wrapper').attr('data-product-id');
    var currentProductVariantID = window.$('.product-detail.product-wrapper').attr('data-pid');

    if (window.mkorsData && window.mkorsData.product && window.mkorsData.product.length > 0 && (sessionStorage.getItem('crossSell') === currentProductID || sessionStorage.getItem('crossSell') === currentProductVariantID)) {
      window.mkorsData.product[0].categoryID = 'Cross Sell';
      window.mkorsData.product[0].categoryName = 'Cross Sell';
      window.mkorsData.product[0].crossSellCartridge = sessionStorage.getItem('crossSellType');
      window.mkorsData.product[0].isCrossSell = 'Y';
      sessionStorage.removeItem('crossSellType');
      sessionStorage.removeItem('crossSell');
    }
  }

  window.$(document).on('mousedown', '.rfk-carousel .quickview', function (e) {
    var quickviewCrossSellCartridge = window.$(this).closest('.rfk-carousel')[0].previousElementSibling.innerText;
    var quickviewPID = e.currentTarget.search;
    var split = quickviewPID ? quickviewPID.split('=') : '';
    var quickViewProductID = split && split.length > 0 ? split[1] : '';

    if (quickViewProductID) {
      sessionStorage.setItem('quickviewIsCrossSell', 'Y');
      sessionStorage.setItem('quickviewCrossSellProduct', quickViewProductID);
      sessionStorage.setItem('quickviewCrossSellCartridge', quickviewCrossSellCartridge);
    }
  });
}
/**
  * Push trend page type to the datalayer mkorsData object
  */


function isTrendPage() {
  window.$('.menu-shops-banner').click(function (e) {
    if (window.$(e.target).is('a')) {
      sessionStorage.setItem('isTrendPage', true);
    }
  });
}
/**
 * Push to the datalayer mkorsData object
 */


function pushToDatalayer() {
  var searchProducts = [];
  var datalayerView = JSON.parse(document.getElementById('analytics-datalayer').getAttribute('data-tracking-view'))[0];

  if (typeof datalayerView.page === 'undefined') {
    datalayerView.page = [];
  }

  if (typeof datalayerView.page !== 'undefined' && typeof datalayerView.page.isOneTrustEnabled !== 'undefined') {
    // Removing isOneTrustEnabled proper
    delete datalayerView.page.isOneTrustEnabled;
  }

  datalayerView.page.responsiveView = getResponsiveView();
  window.$('.product-grid').find('.product-tile-show').each(function () {
    if (window.$(this).find('.analytics-product-data').length > 0 && window.$(this).find('.analytics-product-data').attr('data-tracking-products')) {
      var productData = JSON.parse(window.$(this).find('.analytics-product-data').attr('data-tracking-products'));

      if (productData && !window.$.isEmptyObject(productData) && productData !== 'undefined') {
        if (datalayerView.page.region && datalayerView.page.region !== 'NA') {
          delete productData.seoURL;
        } else {
          if (productData.prices) {
            delete productData.prices.listPriceRange;
          }

          delete productData.productSEOURL;
        }

        searchProducts.push(productData);
      }
    }
  });

  if (searchProducts && searchProducts.length > 0) {
    datalayerView.page.listing = searchProducts;
  }

  var eventlayerView = JSON.parse(document.getElementById('analytics-datalayer').getAttribute('data-tracking-event'));
  var userDataView = document.getElementById('analytics-datalayer-userdata') ? JSON.parse(document.getElementById('analytics-datalayer-userdata').getAttribute('data-tracking-viewuserdata')) : '';

  if (userDataView && !window.$.isEmptyObject(userDataView)) {
    if (typeof datalayerView.user === 'undefined') {
      datalayerView.user = [];
    }

    if (userDataView.profile && userDataView.profile.length > 0 && userDataView.profile[0] && userDataView.profile[0].profileInfo) {
      if (datalayerView.page && (datalayerView.page.name === 'Profile' || datalayerView.page.name === 'checkout:confirmation')) {
        if (userDataView.profile[0].profileInfo.type && userDataView.profile[0].profileInfo.type === 'guest') {
          if (window.$('.firstName').length > 0 && window.$('.firstName')[0].innerText) {
            userDataView.profile[0].profileInfo.firstName = window.$('.firstName')[0].innerText.trim();
          }

          if (window.$('.lastName').length > 0 && window.$('.lastName')[0].innerText) {
            userDataView.profile[0].profileInfo.lastName = window.$('.lastName')[0].innerText.trim();
          }
        }
      } else {
        if (userDataView.profile[0].profileInfo.firstName) {
          delete userDataView.profile[0].profileInfo.firstName;
        }

        if (userDataView.profile[0].profileInfo.lastName) {
          delete userDataView.profile[0].profileInfo.lastName;
        }

        if (userDataView.profile[0].profileInfo.userEmail) {
          delete userDataView.profile[0].profileInfo.userEmail;
        }
      }
    }

    datalayerView.user.push(userDataView);
    sessionStorage.setItem('userData', JSON.stringify(userDataView));
  }

  if (eventlayerView && !window.$.isEmptyObject(eventlayerView)) {
    if (typeof datalayerView.event === 'undefined') {
      datalayerView.event = [];
    }

    if (eventlayerView.eventInfo && eventlayerView.eventInfo.timeStamp) {
      eventlayerView.eventInfo.timeStamp = new Date();
    }

    datalayerView.event.push(eventlayerView);
  }

  var mkorsDataobj = {};
  var eventInfo = {};
  eventInfo = {
    eventName: 'pageChange',
    timeStamp: new Date(),
    processed: {
      adobeAnalytics: false,
      vendorTags: false
    },
    type: 'navigation'
  };
  mkorsDataobj = {
    page: datalayerView.page,
    eventInfo: eventInfo
  };

  if (datalayerView.product && datalayerView.product.length > 0 && datalayerView.product[0].customized) {
    mkorsDataobj.product = datalayerView.product[0];
  }

  var pageChangeEvent = sessionStorage.getItem('eventJson') ? sessionStorage.getItem('eventJson') : [];
  var eventJson;

  if (Object.keys(pageChangeEvent).length) {
    if (typeof datalayerView.event === 'undefined') {
      datalayerView.event = [];
    }

    eventJson = JSON.parse(pageChangeEvent);

    if (eventJson) {
      if (eventJson.length !== undefined && eventJson.length > 0) {
        for (var i = 0; i < eventJson.length; i++) {
          eventJson[i].eventInfo.timeStamp = new Date(eventJson[i].eventInfo.timeStamp);
          datalayerView.event.push(eventJson[i]);
        }
      } else {
        eventJson.eventInfo.timeStamp = new Date(eventJson.eventInfo.timeStamp);
        datalayerView.event.push(eventJson);
      }

      sendCustomEvent('pageChange');
    }

    datalayerView.event.push(mkorsDataobj);
    sessionStorage.setItem('eventJson', JSON.stringify(datalayerView.event));
  } else {
    var visitCount = sessionStorage.getItem('visitCount') ? sessionStorage.getItem('visitCount') : 0;

    if (visitCount && visitCount > 0) {
      if (typeof datalayerView.event === 'undefined') {
        datalayerView.event = [];
      }

      datalayerView.event.push(mkorsDataobj);
      sessionStorage.setItem('eventJson', JSON.stringify(mkorsDataobj));
    } else {
      sessionStorage.setItem('visitCount', 1);
    }
  }

  if (datalayerView && datalayerView.page) {
    if (datalayerView.page.type) {
      if (datalayerView.page.type.toLowerCase() === 'product detail' || datalayerView.product && datalayerView.product.length > 0 && datalayerView.product[0].customized) {
        var pageReferrer = sessionStorage.getItem('pageType');
        var productFromSearch = sessionStorage.getItem('productFromSearch');
        var customProductFromSearch = sessionStorage.getItem('customProductFromSearch');
        var productFromSale = sessionStorage.getItem('saleCategoryID');

        if (productFromSale) {
          if (datalayerView.product && datalayerView.product.length > 0) {
            datalayerView.page.channel = 'Sale';
            datalayerView.page.name = 'Sale > ' + (datalayerView.product[0].name || datalayerView.product[0].lookID);
            datalayerView.page.siteSectionLevel2 = 'Sale';
            datalayerView.page.siteSectionLevel3 = 'Sale > ' + (datalayerView.product[0].name || datalayerView.product[0].lookID);
            sessionStorage.removeItem('saleCategoryID');
          }
        }

        if (productFromSearch) {
          if (datalayerView.product && datalayerView.product.length > 0) {
            datalayerView.product[0].categoryID = 'On-site Search';
            datalayerView.product[0].categoryName = 'On-site Search';
          }

          window.$(document).on('click', '.product-custom-description > a', function () {
            sessionStorage.setItem('customProductFromSearch', true);
          });
          sessionStorage.removeItem('productFromSearch');
        } else if ((pageReferrer === 'Product Detail' || !pageReferrer) && datalayerView.product && datalayerView.product.length > 0) {
          if (datalayerView.product && datalayerView.product.length > 0) {
            datalayerView.product[0].categoryID = 'PDP Entry';
            datalayerView.product[0].categoryName = 'PDP Entry';
          }
        } else if (customProductFromSearch) {
          if (datalayerView.product && datalayerView.product.length > 0) {
            datalayerView.product[0].categoryID = 'On-site Search';
            datalayerView.product[0].categoryName = 'On-site Search';
          }

          sessionStorage.removeItem('customProductFromSearch');
        }

        if (productFromSearch || customProductFromSearch) {
          if (datalayerView.product && datalayerView.product.length > 0) {
            datalayerView.page.channel = 'Search Results';
            datalayerView.page.name = 'Search Results > ' + (datalayerView.product[0].name || datalayerView.product[0].lookID);
            datalayerView.page.siteSectionLevel2 = 'Search Results';
            datalayerView.page.siteSectionLevel3 = 'Search Results > ' + (datalayerView.product[0].name || datalayerView.product[0].lookID);
          }
        } // push PLP breadcrumbs to PDP


        var PDPNavigation = sessionStorage.getItem('PLPBreadcrumbs');
        var PLPCategoryID = sessionStorage.getItem('PLPCategoryID');

        if (PDPNavigation) {
          var PDPNavigationArray = PDPNavigation.split(',');

          if (PDPNavigationArray && PDPNavigationArray.length > 0) {
            if (datalayerView.product && datalayerView.product.length > 0) {
              var siteSecLevel2 = 'Home';

              for (var key = 0; key < PDPNavigationArray.length - 1; key++) {
                siteSecLevel2 += ' > ' + PDPNavigationArray[key];
              }

              datalayerView.page.channel = PDPNavigationArray[0];
              datalayerView.page.siteSectionLevel2 = siteSecLevel2;
              datalayerView.page.name = siteSecLevel2 + ' > ' + PDPNavigationArray.pop() + ' > ' + (datalayerView.product[0].name || datalayerView.product[0].lookID);
              datalayerView.page.siteSectionLevel3 = datalayerView.page.name;
              datalayerView.product[0].categoryID = PLPCategoryID;
              sessionStorage.removeItem('PLPBreadcrumbs');
              sessionStorage.removeItem('PLPCategoryID');
            }
          }
        }
      } else if (datalayerView.page.type === '404') {
        datalayerView.page.name += ':' + window.location.href;
        datalayerView.page.referringURL = window.location.href;
      }
    }
  }

  if (datalayerView && datalayerView.page && datalayerView.page.channel && datalayerView.page.type) {
    var recipeID = JSON.parse(localStorage.getItem('recipeID'));
    var crossSellCartridge = JSON.parse(localStorage.getItem('crossSellCartridge'));
    var mkorsDataObject;

    if (datalayerView.page.type.toLowerCase() === 'checkout:confirmation' && datalayerView.transaction) {
      mkorsDataObject = datalayerView.transaction.product;
    } else if (datalayerView.cart && datalayerView.cart.product && (datalayerView.page.channel.toLowerCase() === 'shopping cart' || datalayerView.page.channel.toLowerCase() === 'checkout')) {
      mkorsDataObject = datalayerView.cart.product;
    }

    if (mkorsDataObject) {
      for (var k = 0; k < Object.keys(mkorsDataObject).length; k++) {
        if (recipeID && recipeID.length > 0) {
          if (!mkorsDataObject[k].outfitID) {
            for (var j = 0; j < recipeID.length; j++) {
              if (Object.keys(recipeID[j])[0] === mkorsDataObject[k].UUID) {
                mkorsDataObject[k].outfitID = Object.values(recipeID[j])[0];
                break;
              }
            }
          }
        }

        if (crossSellCartridge && crossSellCartridge.length > 0) {
          if ((!mkorsDataObject[k].isCrossSell || mkorsDataObject[k].isCrossSell === 'N') && !mkorsDataObject[k].crossSellCartridge) {
            for (var m = 0; m < crossSellCartridge.length; m++) {
              if (Object.keys(crossSellCartridge[m])[0] === mkorsDataObject[k].UUID) {
                mkorsDataObject[k].isCrossSell = 'Y';
                mkorsDataObject[k].crossSellCartridge = Object.values(crossSellCartridge[m])[0];
                break;
              }
            }
          }
        }

        delete mkorsDataObject[k].UUID;
      }
    }
  }

  if (datalayerView && datalayerView.page) {
    if (sessionStorage.getItem('isTrendPage')) {
      datalayerView.page.type = 'Trend';
      sessionStorage.removeItem('isTrendPage');
    }
  }
  /* DIGIT-2251-Search Results-Appending # in the URL for capturing Search object in Analytics */


  var search = {};

  if (localStorage.isSearchResult) {
    if (datalayerView.product) {
      search.keyword = window.$('.analytics-searchKeyword').length > 0 ? window.$('.analytics-searchKeyword').attr('data-analytics-searchKeyword') : '';
      search.typeOfSearch = 'suggested product';
      datalayerView.search = search;
      datalayerView.page.type = 'Product Detail';
    } else if (localStorage.getItem('isSearchResult')) {
      localStorage.removeItem('isSearchResult');
    }
  }

  var searchType = window.$('.analytics-search-type');
  var isSearchPage;

  if (searchType && searchType.length > 0) {
    isSearchPage = searchType.attr('data-analytics-search');
  }

  var preURL = sessionStorage.getItem('queryParam') ? sessionStorage.getItem('queryParam') : '';
  var currentURL = window.location.href;

  if (isSearchPage && isSearchPage !== 'false') {
    if (preURL !== currentURL) {
      sessionStorage.setItem('queryParam', window.location.href);
    } else if (preURL === window.location.href) {
      if (typeof datalayerView.search !== 'undefined') {
        datalayerView.search.typeOfSearch = 'page load';
      }
    }
  }

  if (sessionStorage.getItem('doYouMeanSearch')) {
    search.keyword = window.$('.analytics-searchKeyword').length > 0 ? window.$('.analytics-searchKeyword').attr('data-analytics-searchKeyword') : '';
    search.typeOfSearch = 'did you mean';
    search.resultCount = window.$('.analytics-searchCount').length > 0 ? window.$('.analytics-searchCount').attr('data-analytics-searchCount') : '';
    datalayerView.search = search;
    datalayerView.page.type = 'Search Results';
    sessionStorage.removeItem('doYouMeanSearch');
  } else if (sessionStorage.getItem('recentSearch')) {
    search.keyword = window.$('.analytics-searchKeyword').length > 0 ? window.$('.analytics-searchKeyword').attr('data-analytics-searchKeyword') : '';
    search.typeOfSearch = 'recent';
    search.resultCount = window.$('.analytics-searchCount').length > 0 ? window.$('.analytics-searchCount').attr('data-analytics-searchCount') : '';
    datalayerView.search = search;
    datalayerView.page.channel = 'Search Results';
    datalayerView.page.type = 'Search Results';
    sessionStorage.removeItem('recentSearch');
  } else if (sessionStorage.getItem('suggestedBrand')) {
    search.keyword = window.$('.analytics-searchKeyword').length > 0 ? window.$('.analytics-searchKeyword').attr('data-analytics-searchKeyword') : '';
    search.typeOfSearch = 'brands';
    search.resultCount = window.$('.analytics-searchCount').length > 0 ? window.$('.analytics-searchCount').attr('data-analytics-searchCount') : '';
    datalayerView.search = search;
    datalayerView.page.channel = 'Search Results';
    datalayerView.page.type = 'Search Results';
    sessionStorage.removeItem('suggestedBrand');
  } else if (window.location.href.indexOf('#suggested') > -1) {
    search.keyword = window.$('.analytics-searchKeyword').length > 0 ? window.$('.analytics-searchKeyword').attr('data-analytics-searchKeyword') : '';
    search.resultCount = window.$('.analytics-searchCount').length > 0 ? window.$('.analytics-searchCount').attr('data-analytics-searchCount') : '';

    if (window.location.href.indexOf('#suggestedCategory') > -1) {
      search.typeOfSearch = 'suggestedCategory';
    } else {
      search.typeOfSearch = 'suggested';
    }

    datalayerView.search = search;
    datalayerView.page.type = 'Search Results';
  } else if (window.location.href.indexOf('#popular') > -1) {
    search.keyword = window.$('.analytics-searchKeyword').length > 0 ? window.$('.analytics-searchKeyword').attr('data-analytics-searchKeyword') : '';
    search.typeOfSearch = 'popular';
    search.resultCount = window.$('.analytics-searchCount').length > 0 ? window.$('.analytics-searchCount').attr('data-analytics-searchCount') : '';
    datalayerView.search = search;
    datalayerView.page.type = 'Search Results';
  } else if (window.location.href.indexOf('#viewAll') > -1) {
    search.keyword = window.$('.analytics-searchKeyword').length > 0 ? window.$('.analytics-searchKeyword').attr('data-analytics-searchKeyword') : '';
    search.typeOfSearch = 'suggested';
    search.resultCount = window.$('.analytics-searchCount').length > 0 ? window.$('.analytics-searchCount').attr('data-analytics-searchCount') : '';
    datalayerView.search = search;
    datalayerView.page.type = 'Search Results';
  } else if (window.location.pathname === '/michael-kors-collection/') {
    datalayerView.page.merchCategoryLevel2 = 'Michael Kors Collection';
    datalayerView.page.merchCategoryLevel3 = 'Michael Kors Collection';
    datalayerView.page.name = 'Michael Kors Collection';
    datalayerView.page.siteSectionLevel2 = 'Michael Kors Collection';
    datalayerView.page.siteSectionLevel3 = 'Michael Kors Collection';
  }

  window.$(document).on('click', '.recent.search-suggestion-block', function (e) {
    if (window.$(e.target).is('a')) {
      sessionStorage.setItem('recentSearch', true);
    }
  });
  window.$(document).on('click', '.search-brand', function (e) {
    if (window.$(e.target).is('a')) {
      sessionStorage.setItem('suggestedBrand', true);
    }
  });
  window.$(document).on('click', '.doyoumean', function (e) {
    if (window.$(e.target).is('a')) {
      sessionStorage.setItem('doYouMeanSearch', true);
    }
  });

  if (sessionStorage.getItem('navItemClicked')) {
    if (datalayerView && datalayerView.page) {
      var homepageNavigation = 'Home > ';
      var siteSectionLevel2 = datalayerView.page.siteSectionLevel2;
      var siteSectionLevel3 = datalayerView.page.siteSectionLevel3;

      if (siteSectionLevel2 && siteSectionLevel3 && !siteSectionLevel2.includes('Home') && !siteSectionLevel3.includes('Home')) {
        datalayerView.page.siteSectionLevel2 = homepageNavigation + siteSectionLevel2;
        datalayerView.page.siteSectionLevel3 = homepageNavigation + siteSectionLevel3;
      }
    }

    sessionStorage.removeItem('navItemClicked');
  }

  if (datalayerView.page && datalayerView.page.type && datalayerView.page.type.indexOf(':Confirmation') > -1) {
    if (preURL !== currentURL) {
      sessionStorage.setItem('queryParam', window.location.href);
    } else if (preURL === window.location.href) {
      if (typeof datalayerView.page !== 'undefined') {
        datalayerView.page.type = 'checkout:reloadConfirmation';
      }
    }
  }

  if (window.location.href.indexOf('registration=submitted') > -1) {
    sessionStorage.setItem('queryParam', window.location.href);
    var registrationData = document.getElementById('analytics-registration');
    var registeredUserData = JSON.parse(registrationData.getAttribute('data-analytics-registration'));

    if (registeredUserData) {
      if (typeof datalayerView.event === 'undefined') {
        datalayerView.event = [];
      }

      if (registeredUserData.eventInfo && registeredUserData.eventInfo.timeStamp) {
        registeredUserData.eventInfo.timeStamp = new Date();
      }

      if (registeredUserData.user && registeredUserData.user.length > 0 && registeredUserData.user[0].profile && registeredUserData.user[0].profile[0].profileInfo && !registeredUserData.user[0].profile[0].profileInfo.hashedID && !registeredUserData.user[0].profile[0].profileInfo.hashedID2) {
        if (datalayerView.user && datalayerView.user.length > 0 && datalayerView.user[0].profile && datalayerView.user[0].profile[0].profileInfo && datalayerView.user[0].profile[0].profileInfo.hashedID && datalayerView.user[0].profile[0].profileInfo.hashedID2) {
          registeredUserData.user[0].profile[0].profileInfo.hashedID = datalayerView.user[0].profile[0].profileInfo.hashedID;
          registeredUserData.user[0].profile[0].profileInfo.hashedID2 = datalayerView.user[0].profile[0].profileInfo.hashedID2;
        }
      }

      datalayerView.event.push(registeredUserData);
      var accountCreateLocation = sessionStorage.getItem('accountCreateLocation') ? sessionStorage.getItem('accountCreateLocation') : '';

      if (accountCreateLocation && registeredUserData.eventInfo) {
        registeredUserData.eventInfo.location = accountCreateLocation;
      }
    }
  }

  if (datalayerView.page) {
    var URLPathname = window.location.pathname;

    if (URLPathname === '/') {
      datalayerView.page.breadcrumb = 'home.html';
    } else {
      datalayerView.page.breadcrumb = URLPathname;
    }
  }

  sessionStorage.setItem('pageType', datalayerView.page.type);

  if (datalayerView.page && datalayerView.page.type === 'Register' && window.$('.alert-danger').length > 0) {
    sessionStorage.setItem('guestOrderTrackError', true);
  }

  if (datalayerView.page && datalayerView.page.type === 'Shopping Cart' && window.$('.validate-basket').length > 0) {
    if (window.$('.product-not-available').length > 0) {
      var cartValidationError = {
        eventInfo: {
          eventName: 'errorEvent',
          type: 'customer facing error',
          timeStamp: new Date(),
          processed: {
            adobeAnalytics: false,
            vendorTags: false
          },
          error: {
            errorCode: ERRORCODE.CARTOUTOFSTOCK,
            errorMessage: window.$('.toast-alert-error.validate-basket').length > 0 ? window.$('.toast-alert-error.validate-basket')[0].innerText : '',
            errorPageType: 'Shopping Cart',
            errorType: 'One or more items in your cart are no longer available',
            fieldName: '',
            formName: ''
          }
        }
      };

      if (typeof datalayerView.event === 'undefined') {
        datalayerView.event = [];
      }

      datalayerView.event.push(cartValidationError);
    }
  } // push PLP breadcrumbs to sessionStorage


  var PLPBreadcrumbs = window.$("span[itemprop='name']");
  var breadcrumbArray = [];

  if (datalayerView && datalayerView.page) {
    if (datalayerView.page.merchCategoryLevel1 && PLPBreadcrumbs && PLPBreadcrumbs.length > 0) {
      window.$.each(PLPBreadcrumbs, function (_key, valueObj) {
        breadcrumbArray.push(valueObj.innerText);
      });
      sessionStorage.setItem('PLPBreadcrumbs', breadcrumbArray);
    }

    if (datalayerView.page.categoryID) {
      sessionStorage.setItem('PLPCategoryID', datalayerView.page.categoryID);
    }
  }

  var favouritesAddedToCart = sessionStorage.getItem('favouritesAddedToCart') ? sessionStorage.getItem('favouritesAddedToCart') : [];

  if (favouritesAddedToCart && favouritesAddedToCart.length) {
    var favEvent = JSON.parse(favouritesAddedToCart);

    if (favEvent.eventInfo) {
      favEvent.eventInfo.timeStamp = new Date();
    }

    datalayerView.event.push(favEvent);
    sessionStorage.removeItem('favouritesAddedToCart');
  }

  window.mkorsData = datalayerView;

  if (JSON.stringify(window.mkorsData).length > 5) {
    sendCustomEvent('dataLayerReady');
    var isOneTrustEnabled = getIsOneTrustEnabledFlag();

    if (isOneTrustEnabled) {
      isOnetrustActiveGroupsReady();
    }

    var dateString = new Date().toISOString();
    console.log('Published Data Layer Event at :', dateString); // eslint-disable-line no-console
  }

  var isSafari = !!navigator.userAgent.match(/Version\/[\d.]+.*Safari/);

  if (window.mkorsData.user && window.mkorsData.user.length > 0) {
    if (isSafari && window.mkorsData && window.mkorsData.user && window.mkorsData.user.length && window.mkorsData.user[0].profile && window.mkorsData.user[0].profile[0].profileInfo && window.mkorsData.user[0].profile[0].profileInfo.applePayEnabled) {
      window.mkorsData.user[0].profile[0].profileInfo.applePayEnabled = true;
    } else {
      window.mkorsData.user[0].profile[0].profileInfo.applePayEnabled = false;
    }
  }
}
/**
 * Push the Location attribute to datalayer mkorsData object on account success
 */


function setAccountCreateLocation() {
  $body.on('click', '.login-user .create-btn', function () {
    sessionStorage.setItem('accountCreateLocation', 'Header');
  });
  $body.on('click', '#footerAccountLink', function () {
    sessionStorage.setItem('accountCreateLocation', 'Footer');
  });
  $body.on('click', '.loyal-details-container .account-link', function () {
    sessionStorage.setItem('accountCreateLocation', 'PDP');
  });
  $body.on('click', '.cart-korsVIP-container .korsVIPbtn, .create-account-wishlist', function () {
    sessionStorage.setItem('accountCreateLocation', 'Cart');
  });
  $body.on('click', '#newsLetterModal .guest-user a', function () {
    sessionStorage.setItem('accountCreateLocation', 'newsletter sign up');
  });
}
/**
* capturing information by clicking the navigation menu link
*/


function navigationButtonClickEvent() {
  window.$(document).on('click', '[role="menuitem"]', function (event) {
    var navLinks = '';
    var navItems = event.target && event.target.dataset && event.target.dataset.analyticsNavlinks ? event.target.dataset.analyticsNavlinks.toUpperCase().split('/') : '';

    if (navItems[0] !== undefined) {
      navLinks = 'MK:Top Nav > ' + navItems[0];
    }

    if (navItems[1] !== undefined) {
      navLinks = navLinks + ' > ' + navItems[1];
    }

    if (navItems[2] !== undefined) {
      navLinks = navLinks + ' > ' + navItems[2];
    }

    if (event.target.id && (event.target.id.includes('view-all-desktop') || event.target.id.includes('view-all-mobile'))) {
      navLinks += navItems[1];
    }

    if (navItems.length === 2 && event.target && event.target.pathname && event.target.pathname.indexOf('trend') > -1) {
      navLinks = 'MK:Top Nav > ' + navItems[0] + ' > SHOPS > ' + navItems[1];
    }

    sessionStorage.setItem('navlinks', navLinks);
  });
}
/**
* Push navigation menu link buttonClick event
*/


function pushNavigationButtonClickEvent() {
  var navlinks = sessionStorage.getItem('navlinks');

  if (navlinks) {
    $body.trigger('event:navigationButtonClick', navlinks);
  }

  sessionStorage.removeItem('navlinks');
}

module.exports = {
  updateUserType: updateUserType,
  pushToDatalayer: pushToDatalayer,
  pushSignInSuccess: pushSignInSuccess,
  analyticsEvents: analyticsEvents,
  socialShareEvent: socialShareEvent,
  imageInteraction: imageInteraction,
  profileSessionTimeout: profileSessionTimeout,
  productRemoveFromCart: productRemoveFromCart,
  resetPassword: resetPassword,
  pushResetPasswordEvent: pushResetPasswordEvent,
  checkoutEditPayment: checkoutEditPayment,
  checkoutSubmitOrder: checkoutSubmitOrder,
  pushSubmitOrderEvent: pushSubmitOrderEvent,
  checkoutUpdatePageType: checkoutUpdatePageType,
  checkoutSubmitShipping: checkoutSubmitShipping,
  checkoutSubmitPayment: checkoutSubmitPayment,
  checkoutCustomerError: checkoutCustomerError,
  buyAllEvent: buyAllEvent,
  checkoutRegisteredUserLogin: checkoutRegisteredUserLogin,
  signInPageErrorEvents: signInPageErrorEvents,
  reCaptchaEvent: reCaptchaEvent,
  guestOrderStatus: guestOrderStatus,
  cartFavoritesError: cartFavoritesError,
  pushGuestOrderStatusErrorEvent: pushGuestOrderStatusErrorEvent,
  shareFavoritesError: shareFavoritesError,
  formErrorEvents: formErrorEvents,
  analyticsReflektion: analyticsReflektion,
  pushCrossSellCartridge: pushCrossSellCartridge,
  pushCrossSell: pushCrossSell,
  setAccountCreateLocation: setAccountCreateLocation,
  saveAddressError: saveAddressError,
  registerErrorEvent: registerErrorEvent,
  sendGiftCardError: sendGiftCardError,
  employeeDiscountError: employeeDiscountError,
  formEnterEvents: formEnterEvents,
  afterpayCheckoutEvent: afterpayCheckoutEvent,
  pushTempGuestID: pushTempGuestID,
  pushSizeGuideOpenEventData: pushSizeGuideOpenEventData,
  pushSizeGuideCloseEventData: pushSizeGuideCloseEventData,
  isTrendPage: isTrendPage,
  pushAccountCreationEvent: pushAccountCreationEvent,
  pushDyUserTypeEvent: pushDyUserTypeEvent,
  pushWriteAReviewClickEvent: pushWriteAReviewClickEvent,
  pushCreateAccountPageErrorEvents: pushCreateAccountPageErrorEvents,
  productAddToFavorites: productAddToFavorites,
  pushViewFavoritesEvent: pushViewFavoritesEvent,
  pushHeartIconClickEvent: pushHeartIconClickEvent,
  pushExpiredCardErrorEvent: pushExpiredCardErrorEvent,
  keywordSearchSuccess: keywordSearchSuccess,
  updateStaticPageSiteSectionLevel: updateStaticPageSiteSectionLevel,
  pushSaleCategoryProducts: pushSaleCategoryProducts,
  shippingAndReturnsAccordion: shippingAndReturnsAccordion,
  navigationButtonClickEvent: navigationButtonClickEvent,
  pushNavigationButtonClickEvent: pushNavigationButtonClickEvent,
  getIsOneTrustEnabledFlag: getIsOneTrustEnabledFlag
};

/***/ }),

/***/ "./cartridges/plugin_adobe_custom/cartridge/client/default/js/util.js":
/*!****************************************************************************!*\
  !*** ./cartridges/plugin_adobe_custom/cartridge/client/default/js/util.js ***!
  \****************************************************************************/
/***/ (function(module) {



function _typeof(obj) { "@babel/helpers - typeof"; if (typeof Symbol === "function" && typeof Symbol.iterator === "symbol") { _typeof = function _typeof(obj) { return typeof obj; }; } else { _typeof = function _typeof(obj) { return obj && typeof Symbol === "function" && obj.constructor === Symbol && obj !== Symbol.prototype ? "symbol" : typeof obj; }; } return _typeof(obj); }

module.exports = function (include) {
  if (typeof include === 'function') {
    include();
  } else if (_typeof(include) === 'object') {
    Object.keys(include).forEach(function (key) {
      if (typeof include[key] === 'function') {
        include[key]();
      }
    });
  }
};

/***/ }),

/***/ "./cartridges/plugin_adobe_custom/cartridge/config/analyticsErrorCodes.json":
/*!**********************************************************************************!*\
  !*** ./cartridges/plugin_adobe_custom/cartridge/config/analyticsErrorCodes.json ***!
  \**********************************************************************************/
/***/ (function(module) {

module.exports = JSON.parse('{"dwfrm_profile":{"errorType":"Some account creation information is invalid/missing","registration-form-fname":{"Please enter a first name.":"1069"},"registration-form-lname":{"Please enter a last name.":"1070"},"registration-form-email":{"Please enter an email address.":"1068","Account already exists with provided email address.":"1067"},"currentPassword":{"This field is required.":"1071","Please enter a valid Password.":"1074","Does not match the current password":"1075"},"newPassword":{"This field is required.":"1071","Please enter a valid Password.":"1074","The passwords you entered do not match":"1075"},"newPasswordConfirm":{"This field is required.":"1072","Please enter a valid Password.":"1074","The passwords you entered do not match":"1075"},"registration-form-password":{"This field is required.":"1071","Please enter a valid Password.":"1074","The passwords you entered do not match.":"1075"},"registration-form-password-confirm":{"This field is required.":"1072","Please enter a valid Password.":"1074","The passwords you entered do not match.":"1075"},"registration-form-phone":{"Please enter a valid phone number.":"1073"},"privacy-policy":{"By checking this box and clicking \\"Register\\" below, I acknowledge that I have read and agree to the Terms & Conditons , and Privacy Policy":"1077","errorMessage":"Please accept the terms and conditions"},"edit-form-month":{"Please enter a valid birth month.":"1110","Please enter a valid birth date.":"1076"},"edit-form-birth-date":{"Please enter a valid birth date.":"1076","Please enter a valid birth month.":"1110"},"edit-form-fname":{"Please enter a first name.":"1069"},"edit-form-lname":{"Please enter a last name.":"1070"},"edit-form-email":{"Please enter an email address.":"1068","Account already exists with provided email address.":"1067"},"edit-form-phone":{"Please enter a valid phone number.":"1093"},"edit-form-mobile":{"Please enter a valid phone number.":"1122"},"confirmEmail":{"Please enter an email address.":"1068","Account already exists with provided email address.":"1067"},"edit-form-password":{"This field is required.":"1072","Please enter a valid Password.":"1074"}},"trackorder-form":{"errorType":"Some order status information is invalid/missing","trackorder-form-number":{"Please enter your order number.":"1056"},"trackorder-form-email":{"Please enter the email address used for this order.":"1057","Please match the requested format.":"1103","Please enter a valid email address.":"1103"}},"promo-code-form":{"errorType":"Some information entered is invalid/missing","couponCode":{"Promo Code is missing.":{"errorType":"Promo code missing","errorCode":"1095"},"The Promo Code you entered does not exist. Please re-check and try again.":{"errorType":"Promo code invalid","errorCode":"1096"},"Coupon cannot be combined with other coupons already in your cart.":{"errorType":"Promo code not applicable","errorCode":"1099"},"This Promo Code has expired.":{"errorType":"Promo code expired","errorCode":"1097"},"This Promo Code has already been applied.":{"errorType":"Promo code already used","errorCode":"1098"}},"employeeId":{"Please enter your Employee ID.":{"errorType":"Some employee discount code information is invalid/missing","errorCode":"1084"}},"dateOfBirth":{"Please enter your date of birth.":{"errorType":"Some employee discount code information is invalid/missing","errorCode":"1085"}},"employeeSecurityCode":{"Please enter your security code.":{"errorType":"Some employee discount code information is invalid/missing","errorCode":"1089"}}},"dwfrm_gcorder":{"errorType":"Some gift card add to cart information is invalid/missing","amount":{"Select gift card amount or Enter a value.":"1045"},"from":{"Please enter a valid name":"1047"},"recipient":{"Please enter a valid name":"1048"},"recipientEmail":{"Please enter a valid email address":"1049"},"confirmRecipientEmail":{"Please enter a valid email address":"1051"}},"dwfrm_coCustomer":{"errorType":"Some log in information is invalid/missing","email-guest":{"Please enter an email address.":"1014","Please enter a valid email address.":"1015"}},"dwfrm_coRegisteredCustomer":{"errorType":"Some log in information is invalid/missing","email":{"Please enter an email address.":"1014","Please enter a valid email address.":"1015"},"password":{"This field is required.":"1016","Please enter a valid Password.":"1017"}},"login-form":{"errorType":"Some log in information is invalid/missing","login-form-email":{"Please enter an email address.":"1014","Please enter a valid email address.":"1015"},"login-form-password":{"This field is required":"1016","Please enter a valid Password.":"1017"},"page-login-form-email":{"Please enter an email address.":"1014","Please enter a valid email address.":"1015"},"page-login-form-password":{"This field is required":"1016","Please enter a valid Password.":"1017"}},"dwfrm_billing":{"errorType":"Some payment information is invalid/missing","cardNumber":{"Card Number is missing.":"1000"},"expirationMonthYear":{"Expiration Date (MM/YY) is missing.":"1002","Please enter a valid Expiration Date (MM/YY).":"1003"},"securityCode":{"Security Code is missing.":"1004","Please enter a valid Security Code.":"1005"},"card-owner":{"Name On Card is missing.":"1006"},"billingFirstName":{"Please enter a first name.":{"errorType":"Some shipping information is invalid/missing","errorCode":"1023"},"Please enter a valid first name.":{"errorType":"Some shipping information is invalid/missing","errorCode":"1024"}},"billingLastName":{"Please enter a last name.":{"errorType":"Some shipping information is invalid/missing","errorCode":"1025"},"Please enter a valid last name.":{"errorType":"Some shipping information is invalid/missing","errorCode":"1026"}},"phoneNumber":{"Please enter a phone number.":{"errorType":"Some shipping information is invalid/missing","errorCode":"1027"},"Please enter a valid phone number.":{"errorType":"Some shipping information is invalid/missing","errorCode":"1028"}},"billingAddressSuggest":{"Please enter Address information":{"errorType":"Some shipping information is invalid/missing","errorCode":"1115"}},"billingAddressOne":{"Please enter an address.":{"errorType":"Some shipping information is invalid/missing","errorCode":"1029"}},"billingAddressCity":{"Please enter a city.":{"errorType":"Some shipping information is invalid/missing","errorCode":"1030"}},"billingState":{"Please enter a Province":{"errorType":"Some shipping information is invalid/missing","errorCode":"1031"},"Please select a state.":{"errorType":"Some shipping information is invalid/missing","errorCode":"1031"}},"billingZipCode":{"Please enter a Postcode":{"errorType":"Some shipping information is invalid/missing","errorCode":"1032"},"Please enter a valid ZIP.":{"errorType":"Some shipping information is invalid/missing","errorCode":"1033"},"Please enter a ZIP.":{"errorType":"Some shipping information is invalid/missing","errorCode":"1032"}},"saved-payment-security-code":{"Please enter a valid Security Code.":"1005","Security Code is missing.":"1004"}},"dwfrm_shipping":{"errorType":"Some shipping information is invalid/missing","shippingFirstNamedefault":{"Please enter a first name.":"1023","Please enter a valid first name.":"1024"},"shippingLastNamedefault":{"Please enter a last name.":"1025","Please enter a valid last name.":"1026"},"shippingPhoneNumberdefault":{"Please enter a phone number.":"1027","Please enter a valid phone number.":"1028"},"shippingAddressSuggestdefault":{"Please enter Address information":"1115"},"shippingAddressOnedefault":{"Please enter an address.":"1029"},"shippingAddressCitydefault":{"Please enter a city.":"1030"},"shippingStatedefault":{"Please enter a Province":"1031"},"shippingZipCodedefault":{"Please enter a Postcode":"1032","Please enter a Zip code.":"1032","Please enter a ZIP.":"1032","Please enter a valid ZIP.":"1033","Please enter a valid Zip Code.":"1033"}},"dwfrm_gcredeem":{"errorType":"Some payment information is invalid/missing","giftCertID":{"Gift card number is missing.":"1035","Please enter a valid gift card number.":"1036"},"giftCertPin":{"PIN is missing.":"1037","Please enter a valid PIN.":"1038"}},"storelocator":{"errorType":"Some pickup in store information is invalid/missing","store-postal-code":{"City, State, or ZIP is required.":"1065","Please enter a valid City, State or ZIP.":"1066"}},"email-form":{"errorType":"Some information entered is invalid/missing","reset-password-email":{"Please enter an email address.":"1101","Please enter a valid email address.":"1102"}},"checkout-register-form":{"errorType":"Some log in information is invalid/missing","newPassword":{"This field is required.":"1016","Please enter a valid Password.":"1017","The passwords you entered do not match.":"1075"},"newPasswordConfirm":{"This field is required.":"1016","Please enter a valid Password.":"1017","The passwords you entered do not match.":"1075"}},"change-password-form":{"errorType":"Some information entered is invalid/missing","newPassword":{"This field is required.":"1105","Please enter a valid Password.":"1106","The passwords you entered do not match.":"1107"},"newPasswordConfirm":{"This field is required.":"1104","Please enter a valid Password.":"1106","The passwords you entered do not match.":"1107"}},"contact-us":{"errorType":"Some information entered is invalid/missing","contact-first-name":{"Please enter a first name.":"1023","Please enter a valid first name.":"1024"},"contact-last-name":{"Please enter a last name.":"1025","Please enter a valid last name.":"1026"},"contact-phone":{"Please enter a phone number.":"1027","Please enter a valid phone number.":"1028"},"contact-email":{"Please enter an email address.":"1014","Please enter a valid email address.":"1015"}}}');

/***/ })

/******/ 	});
/************************************************************************/
/******/ 	// The module cache
/******/ 	var __webpack_module_cache__ = {};
/******/ 	
/******/ 	// The require function
/******/ 	function __webpack_require__(moduleId) {
/******/ 		// Check if module is in cache
/******/ 		var cachedModule = __webpack_module_cache__[moduleId];
/******/ 		if (cachedModule !== undefined) {
/******/ 			return cachedModule.exports;
/******/ 		}
/******/ 		// Create a new module (and put it into the cache)
/******/ 		var module = __webpack_module_cache__[moduleId] = {
/******/ 			// no module.id needed
/******/ 			// no module.loaded needed
/******/ 			exports: {}
/******/ 		};
/******/ 	
/******/ 		// Execute the module function
/******/ 		__webpack_modules__[moduleId](module, module.exports, __webpack_require__);
/******/ 	
/******/ 		// Return the exports of the module
/******/ 		return module.exports;
/******/ 	}
/******/ 	
/************************************************************************/
var __webpack_exports__ = {};
// This entry need to be wrapped in an IIFE because it need to be isolated against other modules in the chunk.
!function() {
/*!***************************************************************************************!*\
  !*** ./cartridges/plugin_adobe_custom/cartridge/client/default/js/analyticsEvents.js ***!
  \***************************************************************************************/


var processInclude = __webpack_require__(/*! ./util */ "./cartridges/plugin_adobe_custom/cartridge/client/default/js/util.js");

window.$(document).ready(function () {
  processInclude(__webpack_require__(/*! ./analytics/analyticsEvents */ "./cartridges/plugin_adobe_custom/cartridge/client/default/js/analytics/analyticsEvents.js"));
});
}();
/******/ })()
;
//# sourceMappingURL=analyticsEvents.js.map