/******/ (function() { // webpackBootstrap
/******/ 	var __webpack_modules__ = ({

/***/ "../../capri-core-sfcc/src/integrations/link_bazaarvoice-release-20.1.0/cartridges/int_bazaarvoice_sfra_custom/cartridge/client/default/js/product/bvHelper.js":
/*!*********************************************************************************************************************************************************************!*\
  !*** ../../capri-core-sfcc/src/integrations/link_bazaarvoice-release-20.1.0/cartridges/int_bazaarvoice_sfra_custom/cartridge/client/default/js/product/bvHelper.js ***!
  \*********************************************************************************************************************************************************************/
/***/ (function(module) {

"use strict";
 // Observing BV DOM injection

var observingBV = function observingBV() {
  if ($('#data-bv-show').length) {
    var target = $(this); // Callback function to execute when mutations are observed

    var callback = function callback(mutationsList, observer) {
      var hasChildListMutation = mutationsList.filter(function (m) {
        return m.type === 'childList';
      }).length;

      if (hasChildListMutation) {
        var noOfReviews;
        var targetElement = $(mutationsList[0].target);

        if (targetElement.data('bv-show') === 'rating_summary') {
          noOfReviews = parseInt(targetElement.find('.bv_numReviews_text').text().replace(/[{()}]/g, ''), 10);
        } else {
          noOfReviews = parseInt(targetElement.find('.bv_text').text().replace(/[{()}]/g, ''), 10);
        }

        if (noOfReviews <= 0) {
          observer.disconnect();
          targetElement.addClass('d-none').attr('style', 'display: none !important;');
        } else if (noOfReviews > 0) {
          observer.disconnect();
          targetElement.find('.bv_button_buttonMinimalist').addClass('d-none').attr('style', 'display: none !important;');
        }
      }
    }; // Create an observer instance linked to the callback function


    var observerIns = new MutationObserver(callback); // Start observing the target node for configured mutations

    observerIns.observe(target.get(0), {
      childList: true,
      subtree: true
    });
  }
};

module.exports = {
  observingBV: observingBV
};

/***/ }),

/***/ "../../capri-core-sfcc/src/integrations/plugin_instorepickup/cartridges/plugin_instorepickup_custom/cartridge/client/default/js/product/pdpInstoreInventory.js":
/*!*********************************************************************************************************************************************************************!*\
  !*** ../../capri-core-sfcc/src/integrations/plugin_instorepickup/cartridges/plugin_instorepickup_custom/cartridge/client/default/js/product/pdpInstoreInventory.js ***!
  \*********************************************************************************************************************************************************************/
/***/ (function(module, __unused_webpack_exports, __webpack_require__) {

"use strict";


var storeLocator = __webpack_require__(/*! brand/storeLocator/storeLocator */ "./cartridges/app_mk_storefront/cartridge/client/default/js/storeLocator/storeLocator.js");

var clientSideValidation = __webpack_require__(/*! brand/components/clientSideValidation */ "./cartridges/app_mk_storefront/cartridge/client/default/js/components/clientSideValidation.js");

var clientSideUtil = __webpack_require__(/*! brand/utilities/clientSideUtil */ "./cartridges/app_mk_storefront/cartridge/client/default/js/utilities/clientSideUtil.js");

var showNoAttributeSelectedError = (__webpack_require__(/*! brand/product/base */ "./cartridges/app_mk_storefront/cartridge/client/default/js/product/base.js").showNoAttributeSelectedError);
/**
 * Restores Quantity Selector to its original state.
 * @param {HTMLElement} $quantitySelect - The Quantity Select Element
 */


function restoreQuantityOptions($quantitySelect) {
  var originalHTML = $quantitySelect.data('originalHTML');

  if (originalHTML) {
    $quantitySelect.html(originalHTML);
  }
}
/**
 * Sets the data attribute of Quantity Selector to save its original state.
 * @param {HTMLElement} $quantitySelect - The Quantity Select Element
 */


function setOriginalQuantitySelect($quantitySelect) {
  if (!$quantitySelect.data('originalHTML')) {
    $quantitySelect.data('originalHTML', $quantitySelect.html());
  } // If it's already there, don't re-set it

}
/**
 * Updates the Quantity Selector based on the In Store Quantity.
 * @param {string} quantitySelector - Quantity Selector
 * @param {string} quantityOptionSelector - Quantity Option Selector
 * @param {number} productAtsValue - Inventory in the selected store
 */


function updateQOptions(quantitySelector, quantityOptionSelector, productAtsValue) {
  var selectedQuantity = $(quantitySelector).val();
  restoreQuantityOptions($(quantitySelector));

  for (var i = $(quantityOptionSelector).length - 1; i >= productAtsValue; i--) {
    $(quantityOptionSelector).eq(i).remove();
  }

  $(quantitySelector + ' option[value="' + selectedQuantity + '"]').attr('selected', 'selected');
}
/**
 * Generates the modal window on the first call.
 */


function getModalHtmlElement() {
  if ($('#inStoreInventoryModal').length !== 0) {
    $('#inStoreInventoryModal').remove();
  }

  var htmlString = '<!-- Modal -->' + '<div class="modal right fade instore-pickup-modal pr-0" id="inStoreInventoryModal" tabindex="-1" role="dialog">' + '<div class="modal-dialog in-store-pickup pull-right">' + '<!-- Modal content-->' + '<div class="modal-content">' + '<div class="modal-header">' + '    <button type="button" class="close pull-right avoid-blue-border" aria-label="Close" data-dismiss="modal">' + '        <span aria-hidden="true">&times;</span>' + '    </button>' + '<span class="instore-modal-title"></span>' + '</div>' + '<div class="modal-body p-0"></div>' + '</div>' + '</div>';
  $('body').append(htmlString);
  $('#inStoreInventoryModal').modal('show');
  $('#inStoreInventoryModal').css('overflow-y', 'scroll');
  $('#quickViewModal').modal('hide');
}
/**
 * Renders the results of the search
 * @param {Object} data - Response from the server
 */


function updateStoresResults(data) {
  var $resultsDiv = $('.store-locator-container .results');
  var hasResults = data.stores.length > 0;

  if (!hasResults) {
    $('.store-locator-no-results').show();
  } else {
    $('.store-locator-no-results').hide();
    $resultsDiv.empty();
    $resultsDiv.append(data.storesResultsHtml);
  }
}
/**
 * Search for stores ajax call
 * @param {string} url - ajax url
 * @param {string} method - ajax method
 * @param {Object} payload - form payload
 */


function getStores(url, method, payload) {
  var dialog = $('.in-store-inventory-dialog');
  var spinner = dialog.length ? dialog.spinner() : $.spinner();
  $.ajax({
    url: url,
    type: method,
    data: payload,
    dataType: 'json',
    success: function success(data) {
      spinner.stop();
      updateStoresResults(data);
      $('.select-store').prop('disabled', true);
    }
  });
}
/**
 * appends params to a url
 * @param {string} url - Original url
 * @param {Object} params - Parameters to append
 * @returns {string} result url with appended parameters
 */


function appendToUrl(url, params) {
  var newUrl = url;
  newUrl += (newUrl.indexOf('?') !== -1 ? '&' : '?') + Object.keys(params).map(function (key) {
    return key + '=' + encodeURIComponent(params[key]);
  }).join('&');
  return newUrl;
}
/**
 * Search for stores with geolocation
 */


function searchStoreUsingLocation() {
  var element = $('.store-locator-container form.store-locator');
  var dialog = element.closest('.in-store-inventory-dialog');
  var spinner = dialog.length ? dialog.spinner() : $.spinner();
  var $form = element.closest('.store-locator');
  var url = $form.attr('action');
  var payload = $form.is('form') ? $form.serialize() : {
    postalCode: $form.find('[name="postalCode"]').val()
  };
  var formMethod = $form.attr('method');
  navigator.geolocation.getCurrentPosition(function success(position) {
    var urlParams = {
      lat: position.coords.latitude,
      long: position.coords.longitude
    };
    url = appendToUrl(url, urlParams);
    getStores(url, formMethod, payload);
  }, function error() {
    spinner.stop();
  });
}
/**
 * Replaces the content in the modal window with find stores components and
 * the result store list.
 * @param {string} pid - The product ID to search for
 * @param {number} quantity - Number of products to search inventory for
 * @param {number} selectedPostalCode - The postal code to search for inventory
 * @param {number} selectedRadius - The radius to search for inventory
 * @param {string} uuid - The unique value for the cart line item
 */


function fillModalElement(pid, quantity, selectedPostalCode, selectedRadius, uuid) {
  var requestData = {
    products: pid + ':' + quantity
  };

  if (selectedRadius) {
    requestData.radius = selectedRadius;
  }

  if (selectedPostalCode) {
    requestData.postalCode = selectedPostalCode;
  }

  $.ajax({
    url: $('.btn-get-in-store-inventory').data('action-url') || $('.change-store').data('action-url') || $('.switch-to-pickupin-store').data('action-url'),
    data: requestData,
    method: 'GET',
    success: function success(response) {
      $('#inStoreInventoryModal .modal-body').empty();
      $('#inStoreInventoryModal .modal-body').html(response.storesResultsHtml);
      storeLocator.search();
      storeLocator.changeRadius();
      storeLocator.selectStore();
      storeLocator.updateSelectStoreButton();
      storeLocator.clearStoresResults();
      $('.btn-storelocator-search').attr('data-search-pid', pid);

      if (selectedRadius) {
        $('#radius').val(selectedRadius);
      }

      if (selectedPostalCode) {
        $('#store-postal-code').val(selectedPostalCode);
      }

      if (!$('.results').data('has-results')) {
        $('.store-locator-no-results').show();
      }

      $('.instore-modal-title').text(response.flyoutTitle);
      clientSideValidation.invalid();
      clientSideValidation.submit();
      clientSideValidation.buttonClick();
      $('#inStoreInventoryModal').modal('show');
      $('#inStoreInventoryModal').spinner().stop();

      if (uuid) {
        $('#inStoreInventoryModal').attr('data-uuid', uuid);
      }

      searchStoreUsingLocation();
    },
    error: function error() {
      $('#inStoreInventoryModal').spinner().stop();
    }
  });
}
/**
 * Remove the selected store.
 * @param {HTMLElement} $container - the target html element
 */


function deselectStore($container) {
  var storeElement = $($container).find('.selected-store-with-inventory');
  $(storeElement).find('.card-body').empty();
  $(storeElement).addClass('display-none');
  $($container).find('.btn-get-in-store-inventory').show();
  $($container).find('.quantity-select').removeData('originalHTML');
}
/**
 * Update quantity options. Only display quantity options that are available for the store.
 * @param {sring} searchPID - The product ID of the selected product.
 * @param {number} storeId - The store ID selected for in store pickup.
 */


function updateQuantityOptions(searchPID, storeId) {
  var selectorPrefix = '.product-detail[data-pid="' + searchPID + '"]';
  var productIdSelector = selectorPrefix + ' .product-id';
  var quantitySelector = selectorPrefix + ' .quantity-select';
  var quantityOptionSelector = quantitySelector + ' option';
  setOriginalQuantitySelect($(quantitySelector));
  var requestData = {
    pid: $(productIdSelector).text(),
    quantitySelected: $(quantitySelector).val(),
    storeId: storeId
  };
  $.ajax({
    url: $('.btn-get-in-store-inventory').data('ats-action-url'),
    data: requestData,
    method: 'GET',
    success: function success(response) {
      // Update Quantity dropdown, Remove quantity greater than inventory
      var productAtsValue = response.atsValue;
      var availabilityValue = '';
      var $productContainer = $('.product-detail[data-pid="' + searchPID + '"]');

      if (!response.product.readyToOrder) {
        availabilityValue = '<div>' + response.resources.info_selectforstock + '</div>';
      } else {
        response.product.messages.forEach(function (message) {
          availabilityValue += '<div>' + message + '</div>';
        });
      }

      $($productContainer).trigger('product:updateAvailability', {
        product: response.product,
        $productContainer: $productContainer,
        message: availabilityValue,
        resources: response.resources
      });
      $('button.add-to-cart, button.add-to-cart-global, button.update-cart-product-global').trigger('product:updateAddToCart', {
        product: response.product,
        $productContainer: $productContainer
      });
      updateQOptions(quantitySelector, quantityOptionSelector, productAtsValue);
    }
  });
}

module.exports = {
  updateSelectStore: function updateSelectStore() {
    $('body').on('product:updateAddToCart', function (e, response) {
      $('.btn-get-in-store-inventory', response.$productContainer).attr('disabled', !response.product.readyToOrder || !response.product.availableForInStorePickup);
    });
  },
  removeSelectedStoreOnAttributeChange: function removeSelectedStoreOnAttributeChange() {
    $('body').on('product:afterAttributeSelect', function (e, response) {
      response.container.attr('data-pid', response.data.product.id);
      deselectStore(response.container);
    });
  },
  showInStoreInventory: function showInStoreInventory() {
    $('body').on('click', '.btn-get-in-store-inventory', function (e) {
      e.stopImmediatePropagation();
      var $productContainer = $(this).closest('.product-detail');

      if (showNoAttributeSelectedError($productContainer) === false) {
        return;
      }

      var pid = $productContainer.attr('data-pid');
      var quantity = $productContainer.find('.quantity-select').val();
      getModalHtmlElement();
      fillModalElement(pid, quantity);
      e.stopPropagation();
    });
  },
  removeStoreSelection: function removeStoreSelection() {
    $('body').on('click', '#remove-store-selection', function () {
      deselectStore($(this).closest('.product-detail'));
      $(document).trigger('store:afterRemoveStoreSelection', $(this).closest('.product-detail').find('.quantity-select'));
    });
  },
  selectStoreWithInventory: function selectStoreWithInventory() {
    $('body').on('store:selected', function (e, data) {
      var searchPID = $('.btn-storelocator-search').attr('data-search-pid');
      var storeElement = $('.product-detail[data-pid="' + searchPID + '"]');
      $(storeElement).find('.selected-store-with-inventory .card-body').empty();
      $(storeElement).find('.selected-store-with-inventory .card-body').append(data.storeDetailsHtml);
      $(storeElement).find('.store-name').attr('data-store-id', data.storeID);
      $(storeElement).find('.selected-store-with-inventory').removeClass('display-none');
      var $changeStoreButton = $(storeElement).find('.change-store');
      $($changeStoreButton).data('postal', data.searchPostalCode);
      $($changeStoreButton).data('radius', data.searchRadius);
      $(storeElement).find('.btn-get-in-store-inventory').hide();
      updateQuantityOptions(searchPID, data.storeID);
      $('#inStoreInventoryModal').modal('hide');
      $('#inStoreInventoryModal').remove();
    });
  },
  changeStore: function changeStore() {
    $('body').on('click', '.change-store, .switch-to-pickupin-store', function (e) {
      e.stopImmediatePropagation();
      var pid = $(this).attr('data-pid');
      var quantity = $(this).parents('.cart-product-section').find('select.quantity').val() || $(this).parents('.cart-product-section').find('p.quantity').data('quantity');
      getModalHtmlElement();
      fillModalElement(pid, quantity, $(this).data('postal'), $(this).data('radius'), $(this).data('uuid'));
    });
  },
  closeDialog: function closeDialog() {
    $(document).on('hidden.bs.modal', '#inStoreInventoryModal', function () {
      if ($(this).attr('showquickview') === undefined || $(this).attr('showquickview') !== 'false') {
        $('#quickViewModal').modal('show');
        $(this).attr('showquickview', true);
      }
    });
  },
  shipToHome: function shipToHome() {
    $(document).on('click', '.switch-ship-to-an-address', function (e) {
      e.preventDefault();
      var productID = $(this).data('pid');
      var url = $(this).data('action');
      var uuid = $(this).data('uuid');
      var option = $(this).data('option');
      var urlParams = {
        pid: productID,
        uuid: uuid,
        option: option
      };
      $.spinner().start();
      $('body').trigger('cart:beforeUpdate');
      $.ajax({
        url: url,
        method: 'POST',
        data: urlParams,
        success: function success(data) {
          var dataTosend = {
            data: data,
            shipmentType: 'homeShipment'
          };
          $('body').trigger('shipmentChanged', dataTosend);
          $('.count-shipping-item-cart').empty().append('(' + data.cartModel.noOfEcomItems + ')');
          $('body').trigger('event:productShipmentChange', data);
        },
        error: function error(err) {
          if (err.responseJSON.redirectUrl) {
            window.location.href = err.responseJSON.redirectUrl;
          } else {
            $.spinner().stop();
            clientSideUtil.floatToastMessage(err.responseJSON.errorMessage, err.responseJSON.toastMsgAndTimeOutSec.toastMessageDisplayTime, false);
          }
        }
      });
    });
  },
  pickupDialogOpen: function pickupDialogOpen() {
    $(document).on('shown.bs.modal', '#inStoreInventoryModal', function () {
      $('body').addClass('modal-open');
    });
  },
  focusInStoreErrorMessage: function focusInStoreErrorMessage() {
    $(document).on('click', '.btn-storelocator-search', function () {
      if ($('#store-postal-code-error').val !== '') {
        $('.store-pincode').focus();
      }
    });
  }
};

/***/ }),

/***/ "./cartridges/app_mk_storefront/cartridge/client/default/js/checkout/formErrors.js":
/*!*****************************************************************************************!*\
  !*** ./cartridges/app_mk_storefront/cartridge/client/default/js/checkout/formErrors.js ***!
  \*****************************************************************************************/
/***/ (function(module, __unused_webpack_exports, __webpack_require__) {

"use strict";


var scrollAnimate = __webpack_require__(/*! ../components/scrollAnimate */ "./cartridges/app_mk_storefront/cartridge/client/default/js/components/scrollAnimate.js");

var DOMpurify = __webpack_require__(/*! dompurify */ "./node_modules/dompurify/dist/purify.js");
/**
 * Display error messages and highlight form fields with errors.
 * @param {string} parentSelector - the form which contains the fields
 * @param {Object} fieldErrors - the fields with errors
 */


function loadFormErrors(parentSelector, fieldErrors) {
  // eslint-disable-line
  // Display error messages and highlight form fields with errors.
  $.each(fieldErrors, function (attr) {
    $('*[name=' + DOMpurify.sanitize(attr) + ']', DOMpurify.sanitize(parentSelector)).addClass('is-invalid').siblings('.invalid-feedback').html(DOMpurify.sanitize(fieldErrors[attr]));
  }); // Animate to top of form that has errors

  scrollAnimate($(parentSelector));
  $(parentSelector).find('.is-invalid:first').focus();
}
/**
 * Display error messages and highlight form fields with errors for Billing Section.
 * @param {string} parentSelector - the form which contains the fields
 * @param {Object} fieldErrors - the fields with errors
 */


function loadFormErrorsForBilling(parentSelector, fieldErrors) {
  // eslint-disable-line
  // Display error messages and highlight form fields with errors.
  $.each(fieldErrors, function (attr) {
    $('*[name=' + DOMpurify.sanitize(attr) + ']', DOMpurify.sanitize(parentSelector)).addClass('is-invalid').siblings('.invalid-feedback').html(DOMpurify.sanitize(fieldErrors[attr]));

    if (attr === 'dwfrm_billing_creditCardFields_cardNumber') {
      $('#cardNumber-container').addClass('is-invalid');
      $('.invalid-feedback.cardNumber').removeClass('d-none').text(fieldErrors[attr]); // show billing address form if billing address errors
    } else if (attr.startsWith('dwfrm_billing_addressFields')) {
      var $billingAddressSameAsShipping = $('input[name$="_shippingAddressUseAsBillingAddress"]');

      if ($billingAddressSameAsShipping.is(':checked')) {
        $billingAddressSameAsShipping.prop('checked', false);
        $('.show-billing-address').click();
        $('.edit-billing-address').click();
      }
    }
  });
}
/**
 * Clear the form errors.
 * @param {string} parentSelector - the parent form selector.
 */


function clearPreviousErrors(parentSelector) {
  // empty errors shown at top of checkout page
  $('div.primary-checkout > div.alert.alert-danger').each(function () {
    this.innerHTML = '';
  });
  $(parentSelector).find('.form-control.is-invalid').removeClass('is-invalid');
  $(parentSelector).find('.form-group.is-invalid').removeClass('is-invalid');
  $('.error-message').hide();
}

module.exports = {
  loadFormErrors: loadFormErrors,
  clearPreviousErrors: clearPreviousErrors,
  loadFormErrorsForBilling: loadFormErrorsForBilling
};

/***/ }),

/***/ "./cartridges/app_mk_storefront/cartridge/client/default/js/components/clientSideValidation.js":
/*!*****************************************************************************************************!*\
  !*** ./cartridges/app_mk_storefront/cartridge/client/default/js/components/clientSideValidation.js ***!
  \*****************************************************************************************************/
/***/ (function(module, __unused_webpack_exports, __webpack_require__) {

"use strict";


var clientSideUtil = __webpack_require__(/*! ../utilities/clientSideUtil */ "./cartridges/app_mk_storefront/cartridge/client/default/js/utilities/clientSideUtil.js");

var SCREENSIZE = (__webpack_require__(/*! ../utilities/constants */ "./cartridges/app_mk_storefront/cartridge/client/default/js/utilities/constants.js").SCREENSIZE);

var isMobile = $(window).width() <= SCREENSIZE.TABLETMAX;
/**
 * Validate whole form. Requires `this` to be set to form object
 * @param {jQuery.data} data - Event to be canceled if form is invalid.
 */

function validateFormOnBlur() {
  $(this).trigger('invalid', this.validity);
}
/**
 * Remove all validation. Should be called every time before revalidating form
 * @param {element} form - Form to be cleared
 * @returns {void}
 */


function clearForm(form) {
  $.each($(form).find('.form-control.is-invalid'), function () {
    $(this).parents('.form-group').find('.invalid-feedback').text('');
  });
  $(form).find('.form-control.is-invalid').removeClass('is-invalid');
}
/**
 * Validate form fields. Requires `this` to be set to form object
 * @param {element}  inputOrSelect -  current form field input/select
 */


function inputValidate(inputOrSelect) {
  if (inputOrSelect) {
    inputOrSelect.setCustomValidity('');

    if (!$(this).hasClass('js-phone')) {
      if (!inputOrSelect.validity.valid) {
        var validationMessage = inputOrSelect.validationMessage;
        $(inputOrSelect).addClass('is-invalid');
        $(inputOrSelect).attr('aria-invalid', 'true');
        $(inputOrSelect).parents('.form-group').addClass('is-invalid');

        if (inputOrSelect.validity.patternMismatch && $(inputOrSelect).data('pattern-mismatch')) {
          validationMessage = $(inputOrSelect).attr('data-pattern-mismatch');
        }

        if ((inputOrSelect.validity.rangeOverflow || inputOrSelect.validity.rangeUnderflow) && $(inputOrSelect).data('range-error')) {
          validationMessage = $(inputOrSelect).attr('data-range-error');
        }

        if ((inputOrSelect.validity.tooLong || inputOrSelect.validity.tooShort) && $(inputOrSelect).data('range-error')) {
          validationMessage = $(inputOrSelect).attr('data-range-error');
        }

        if (inputOrSelect.validity.valueMissing && $(inputOrSelect).data('missing-error')) {
          validationMessage = $(inputOrSelect).attr('data-missing-error');
        }

        if (inputOrSelect.validity.typeMismatch && $(inputOrSelect).data('type-mismatch')) {
          validationMessage = $(inputOrSelect).attr('data-type-mismatch');
        }

        $(inputOrSelect).parents('.form-group').find('.invalid-feedback').text(validationMessage);
      } else {
        $(inputOrSelect).removeClass('is-invalid');
        $(inputOrSelect).parents('.form-group').removeClass('is-invalid');

        if (!$(this).parents('.form-group').find('.invalid-feedback').hasClass('first-and-last-name-error')) {
          $(this).parents('.form-group').find('.first-and-last-name-error').text('');
        }

        if (!$(this).parents('.form-group').find('.invalid-feedback').hasClass('invalid-feedback-custom')) {
          $(this).parents('.form-group').find('.invalid-feedback-custom').text('');
        }
      }
    }
  }
}
/**
 * Validate whole form. Requires `this` to be set to form object
 * @param {jQuery.event} event - Event to be canceled if form is invalid.
 * @returns {boolean} - Flag to indicate if form is valid
 */


function _validateForm(event) {
  var valid = true;

  if (this.checkValidity && !this.checkValidity()) {
    // safari
    valid = false;

    if (event) {
      event.preventDefault();
      event.stopPropagation();
      event.stopImmediatePropagation();
    }

    $(this).find('input, select, textarea').each(function () {
      if ($(this).parents('#addressFormAccordion').length && isMobile) {
        inputValidate(this);
      }

      if (!this.validity.valid) {
        $(this).trigger('invalid', this.validity);
      }
    });
    $(this).find('.is-invalid:first').focus();
  }

  return valid;
}

module.exports = {
  validateFormOnBlur: validateFormOnBlur,
  inputValidate: inputValidate,
  invalid: function invalid() {
    $('form input, form select, form textarea').on('invalid blur input', function (e) {
      if (e.type === 'blur' && $(this).hasClass('store-pincode')) {
        return true;
      }

      if (e.type === 'blur' && $(this).hasClass('email') && this.validity.valueMissing) {
        return true;
      }

      var userCheck = $(this).closest('form');
      var signInError;

      if (userCheck.attr('id') === 'login-form') {
        signInError = userCheck.find('.alert.alert-danger');
      } else {
        signInError = userCheck.find('.customer-error');
      }

      e.preventDefault();
      this.setCustomValidity('');

      if (!$(this).hasClass('js-phone')) {
        if (!this.validity.valid) {
          var validationMessage = this.validationMessage;

          if (e.type !== 'input') {
            $(this).addClass('is-invalid');
            $(this).parents('.form-group').addClass('is-invalid');
            $(this).attr('aria-invalid', 'true');
          }

          if (userCheck.hasClass('edit-profile-form') && $('.is-invalid').length > 0) {
            var errorField = $('.is-invalid:first').offset().top;
            clientSideUtil.windowScrollToDestination(errorField, 0, 'smooth');
          }

          if (this.validity.patternMismatch && $(this).data('pattern-mismatch')) {
            validationMessage = $(this).attr('data-pattern-mismatch');
          }

          if ((this.validity.rangeOverflow || this.validity.rangeUnderflow) && $(this).data('range-error')) {
            validationMessage = $(this).attr('data-range-error');
          }

          if ((this.validity.tooLong || this.validity.tooShort) && $(this).data('range-error')) {
            validationMessage = $(this).attr('data-range-error');
          }

          if (this.validity.valueMissing && $(this).data('missing-error')) {
            validationMessage = $(this).attr('data-missing-error');
          }

          if (this.validity.typeMismatch && $(this).data('type-mismatch')) {
            validationMessage = $(this).attr('data-type-mismatch');
          }

          if (e.type !== 'input') {
            $(this).parents('.form-group').find('.invalid-feedback').text(validationMessage);
          }

          if ($(this).hasClass('is-invalid') && (userCheck.attr('id') === 'registered-customer' || userCheck.attr('id') === 'guest-customer' || userCheck.attr('id') === 'login-form' || userCheck.attr('id') === 'page-login-form')) {
            signInError.hide();
            e.preventDefault();
            e.stopPropagation();
            e.stopImmediatePropagation();
          }

          if (e.type === 'invalid') {
            userCheck.find('.is-invalid:first').focus();
          }

          if (this.closest('form').id === 'newsletter-form' && e.type === 'invalid') {
            $('body').trigger('event:newslettersignupError', validationMessage);
            e.stopPropagation();
            e.stopImmediatePropagation();
            $(this).addClass('is-invalid').attr('aria-invalid', 'true');
            $(this).focus();
          }

          if (userCheck.hasClass('remove-aria-invalid') && e.type === 'invalid') {
            $(this).removeAttr('aria-invalid');
          }
        } else {
          $(this).removeClass('is-invalid');
          $(this).parents('.form-group').removeClass('is-invalid');

          if (!$(this).parents('.form-group').find('.invalid-feedback').hasClass('first-and-last-name-error')) {
            $(this).parents('.form-group').find('.first-and-last-name-error').text('');
          }

          if (!$(this).parents('.form-group').find('.invalid-feedback').hasClass('invalid-feedback-custom')) {
            $(this).parents('.form-group').find('.invalid-feedback-custom').text('');
          }

          $(this).attr('aria-invalid', 'false');

          if (userCheck.attr('id') === 'registered-customer' || userCheck.attr('id') === 'guest-customer' || userCheck.attr('id') === 'login-form' || userCheck.attr('id') === 'page-login-form') {
            if (!signInError.is(':empty')) {
              signInError.show();
            }

            if (userCheck.attr('id') === 'guest-customer' && $('.submit-customer').attr('disabled') === 'disabled') {
              $('.submit-customer').prop('disabled', false);
            }
          }
        }
      }
    });
  },
  submit: function submit() {
    $('form').on('submit', function (e) {
      return _validateForm.call(this, e);
    });
  },
  buttonClick: function buttonClick() {
    $('form button[type="submit"], form input[type="submit"]').on('click', function () {
      // clear all errors when trying to submit the form
      var $selectorEL = $(this);
      var $selectorParents = $selectorEL.parents('form');
      $selectorParents.find('.form-control').attr('aria-invalid', 'false');
      $selectorParents.find('.form-control.is-invalid').attr('aria-invalid', 'true'); // to execute after form validation added a timeout of 0 seconds

      if (!$selectorEL.closest('.registered-form').length > 0 && $selectorEL.parents('.popover').length <= 0 && $selectorEL.parents('.modal').length <= 0) {
        setTimeout(function () {
          if ($('.invalid-feedback:visible').length > 0 && !$('.invalid-feedback:visible').isInViewport()) {
            var scrollValue = $selectorParents.find('.form-control.is-invalid').prev().offset().top;
            clientSideUtil.windowScrollToDestination(scrollValue, 0, 'smooth');
          }
        }, 0);
      }
    });
  },
  functions: {
    validateForm: function validateForm(form, event) {
      return _validateForm.call(form, event || null);
    },
    clearForm: clearForm
  }
};

/***/ }),

/***/ "./cartridges/app_mk_storefront/cartridge/client/default/js/components/cookie.js":
/*!***************************************************************************************!*\
  !*** ./cartridges/app_mk_storefront/cartridge/client/default/js/components/cookie.js ***!
  \***************************************************************************************/
/***/ (function(module, __unused_webpack_exports, __webpack_require__) {

"use strict";


var SCREENSIZE = (__webpack_require__(/*! ../utilities/constants */ "./cartridges/app_mk_storefront/cartridge/client/default/js/utilities/constants.js").SCREENSIZE);
/**
 * Get cookie value by cookie name from browser
 * @param {string} cookieName - name of the cookie
 * @returns {string} cookie value of the found cookie name
 */


function getCookie(cookieName) {
  var name = cookieName + '=';
  var decodedCookie = decodeURIComponent(document.cookie);
  var cookieArray = decodedCookie.split(';');

  for (var i = 0; i < cookieArray.length; i++) {
    var cookieItem = cookieArray[i];

    while (cookieItem.charAt(0) === ' ') {
      cookieItem = cookieItem.substring(1);
    }

    if (cookieItem.indexOf(name) === 0) {
      return cookieItem.substring(name.length, cookieItem.length);
    }
  }

  return '';
}
/**
 * Sets cookie value by cookie name from browser
 * @param {string} cookieName - name of the cookie
 * @param {string} cookieValue - value of the cookie
 * @param {integer} seconds - cookie's length of days to be valid
 */


function createCookie(cookieName, cookieValue, seconds) {
  var expires = '0';

  if (seconds) {
    var date = new Date();
    date.setTime(date.getTime() + parseInt(seconds, 10));
    expires = '; expires=' + date.toGMTString();
  }

  document.cookie = cookieName + '=' + cookieValue + expires + '; path=/';
}
/**
 * Sets a cookie to -1 invalidating and erasing the cookie name from browser
 * @param {string} cookieName - name of the cookie
 */


function eraseCookie(cookieName) {
  createCookie(cookieName, '', -1);
}
/**
 *  Updates variable for live-chat container bottom position if cookie consent box is NOT present
 */


function updateLiveChatPosition() {
  $(document).on('click', '#onetrust-accept-btn-handler, #onetrust-reject-all-handler, .onetrust-close-btn-handler', function () {
    var $webchatBtn = $('.webchatStartButtonContainer');
    createCookie('oneTrustValue', 'true', 24 * 60 * 60 * 1000);

    if ($webchatBtn.length) {
      document.documentElement.style.setProperty('--webchat-adjusted-space', '0px');
    }
  });
}
/**
 *  Updates variable of live-chat container bottom position if cookie consent box is present
 */


function checkCookieConsent() {
  var onetrustEnabled = $('#oneTrustCheck').data('onetrustEnabled');
  var onetrustCookieValue = getCookie('oneTrustValue'); // check if onetrust cookie is enabled and if cookie value is present

  if (onetrustEnabled && !onetrustCookieValue) {
    var addedBottomPosition = $(window).outerWidth() > SCREENSIZE.DESKTOPMIN ? '100px' : '340px';
    document.documentElement.style.setProperty('--webchat-adjusted-space', addedBottomPosition);
  }
}

module.exports = {
  getCookie: getCookie,
  createCookie: createCookie,
  eraseCookie: eraseCookie,
  updateLiveChatPosition: updateLiveChatPosition,
  checkCookieConsent: checkCookieConsent
};

/***/ }),

/***/ "./cartridges/app_mk_storefront/cartridge/client/default/js/components/focus.js":
/*!**************************************************************************************!*\
  !*** ./cartridges/app_mk_storefront/cartridge/client/default/js/components/focus.js ***!
  \**************************************************************************************/
/***/ (function(module) {

"use strict";


module.exports = {
  setTabNextFocus: function setTabNextFocus(focusParams) {
    var KEYCODE_TAB = 9;
    var isTabPressed = focusParams.event.key === 'Tab' || focusParams.event.keyCode === KEYCODE_TAB;

    if (!isTabPressed) {
      return;
    }

    var firstFocusableEl = $(focusParams.containerSelector + ' ' + focusParams.firstElementSelector);
    var lastFocusableEl = $(focusParams.containerSelector + ' ' + focusParams.lastElementSelector);

    if ($(focusParams.containerSelector + ' ' + focusParams.lastElementSelector).is(':disabled')) {
      lastFocusableEl = $(focusParams.containerSelector + ' ' + focusParams.nextToLastElementSelector);

      if ($('.product-quickview.product-set').length > 0) {
        var linkElements = $(focusParams.containerSelector + ' a#fa-link.share-icons');
        lastFocusableEl = linkElements[linkElements.length - 1];
      }
    }

    if (focusParams.event.shiftKey)
      /* shift + tab */
      {
        if ($(':focus').is(firstFocusableEl)) {
          lastFocusableEl.focus();
          focusParams.event.preventDefault();
        }
      } else
      /* tab */
      {
        if ($(':focus').is(lastFocusableEl)) {
          // eslint-disable-line
          firstFocusableEl.focus();
          focusParams.event.preventDefault();
        }
      }
  }
};

/***/ }),

/***/ "./cartridges/app_mk_storefront/cartridge/client/default/js/components/notifyMe.js":
/*!*****************************************************************************************!*\
  !*** ./cartridges/app_mk_storefront/cartridge/client/default/js/components/notifyMe.js ***!
  \*****************************************************************************************/
/***/ (function(module, __unused_webpack_exports, __webpack_require__) {

"use strict";


module.exports = {
  submitRecaptchaNotifyMe: function submitRecaptchaNotifyMe() {
    $('body').off('click', '#notifyme-btn');
    $('body').off('submit', '#notifyme-form');
    $('body').on('click', '#notifyme-btn', function (e) {
      e.preventDefault();
      $('#notifyme-btn').addClass('disabled');
      var form = $('#notifyme-form');
      var formData = form.serialize();
      var url = form.attr('action');
      $.ajax({
        url: url,
        type: 'post',
        dataType: 'json',
        data: formData,
        success: function success(data) {
          var formHelpers = __webpack_require__(/*! ../checkout/formErrors */ "./cartridges/app_mk_storefront/cartridge/client/default/js/checkout/formErrors.js");

          if (data.fields && data.fields.length) {
            data.fields.forEach(function (error) {
              if (Object.keys(error).length) {
                formHelpers.loadFormErrors('#notifyme-form', error);
              }
            });
            $('#notifyme-btn').removeClass('disabled');
            return;
          }

          if (!$('.notifyme-content').find('.g-recaptcha').length > 0) {
            form.submit();
          }
        },
        error: function error() {
          $('#notifyme-btn').removeClass('disabled');
        }
      });
    }).on('submit', '#notifyme-form', function (e) {
      e.preventDefault();
      $('#notifyme-btn').addClass('disabled');
      var formSubmittedMessage = $('.done-content');
      var form = $('#notifyme-form');
      var formData = form.serialize();
      var url = form.attr('action');
      $.ajax({
        url: url,
        type: 'post',
        dataType: 'json',
        data: formData,
        success: function success(data) {
          form.find('.invalid-feedback').html('');
          formSubmittedMessage.removeClass('d-none');
          form.replaceWith(formSubmittedMessage.val());
          $('body').trigger('event:notifyMeEventOnSuccess', data);
          $('#notifyme-btn').removeClass('disabled');
        },
        error: function error() {
          $('#notifyme-btn').removeClass('disabled');
        }
      });
    });
  }
};

/***/ }),

/***/ "./cartridges/app_mk_storefront/cartridge/client/default/js/components/scrollAnimate.js":
/*!**********************************************************************************************!*\
  !*** ./cartridges/app_mk_storefront/cartridge/client/default/js/components/scrollAnimate.js ***!
  \**********************************************************************************************/
/***/ (function(module) {

"use strict";

/**
 * @param  {object} target element to scroll into view
 * @param  {Boolean} ignoreInView Flag that ignores if element is already in view
 * @param  {Boolean} scrollToBottom Flag that scrolls to the bottom of the element instead of top
 */

module.exports = function (target, ignoreInView, scrollToBottom) {
  var position = target && target.length ? target.offset().top : 0;
  var isScrollable = true;

  if (target && target.length && target.isInViewport()) {
    isScrollable = false;
  }

  if (ignoreInView) {
    isScrollable = true;
  }

  if (scrollToBottom) {
    position = target && target.length ? target.outerHeight() + target.offset().top - window.innerHeight : 0;
  }

  if (isScrollable) {
    $('html, body').animate({
      scrollTop: position
    }, 500);

    if (!target) {
      $('a.logo-home').focus();
    }
  }
};

/***/ }),

/***/ "./cartridges/app_mk_storefront/cartridge/client/default/js/experience/components/commerceAssets/brightcovePlayer.js":
/*!***************************************************************************************************************************!*\
  !*** ./cartridges/app_mk_storefront/cartridge/client/default/js/experience/components/commerceAssets/brightcovePlayer.js ***!
  \***************************************************************************************************************************/
/***/ (function(module, __unused_webpack_exports, __webpack_require__) {

var brightcovePlayerLoader = __webpack_require__(/*! @brightcove/player-loader */ "./node_modules/@brightcove/player-loader/dist/brightcove-player-loader.es.js");

var SCREENSIZE = (__webpack_require__(/*! ../../../utilities/constants */ "./cartridges/app_mk_storefront/cartridge/client/default/js/utilities/constants.js").SCREENSIZE);

var isMobile = $(window).width() < SCREENSIZE.TABLETMIN;
/**
 * @param  {Object} elem Video element to check if in viewport
 * @returns {boolean} If the video is in viewport
 */

function isScrolledIntoView(elem) {
  var viewportTop = $(window).scrollTop();
  var viewportBottom = viewportTop + $(window).outerHeight();
  var elemTop = $(elem).offset().top;
  var elemBottom = elemTop + $(elem).outerHeight(); // This value is used to prevent the video from play/pausing immediately after scrolling past and slight before the whole video is in viewport

  var visualBuffer = $(elem).outerHeight() * 0.5;
  return elemBottom >= viewportTop && elemTop <= viewportBottom && elemBottom - visualBuffer <= viewportBottom && elemTop + visualBuffer >= viewportTop;
}
/**
 * Initalizes the Brightcove videos and loads the player code
 * @returns {Object} Brightcove video player
 */


function initBrightcoveVideos() {
  if ($('.mk-video-player').length <= 0) {
    return false;
  }

  $('.mk-video-player').each(function () {
    var $this = $(this);
    var video = $this.data();
    var playerID = '#' + $this.attr('id');
    var controlID = $(this).data('controls');
    var videoID = $this.data('videoid');

    if (isMobile) {
      videoID = $this.data('videoidmobile');
    }

    brightcovePlayerLoader.default({
      refNode: playerID,
      accountId: video.accountid,
      videoId: videoID,
      playerId: video.playerid,
      controls: video.controls,
      options: {
        loop: video.loop,
        preload: 'auto',
        playsinline: true
      },
      onSuccess: function onSuccess(success) {
        var player = success.ref; // eslint-disable-next-line no-underscore-dangle

        var playerParentContainer = $(success.ref.el_.parentElement);
        var playInViewport = playerParentContainer.data('viewportscroll') || false;
        var coverImage = playerParentContainer.prev('.cover-image').find('img').length ? playerParentContainer.prev('.cover-image') : '';
        var playButton = playerParentContainer.find('.vjs-big-play-button').length ? playerParentContainer.find('.vjs-big-play-button') : '';

        if (!controlID) {
          player.controlBar.hide();
        }

        if (video.autoplay) {
          player.ready(function () {
            if (coverImage.length) {
              coverImage.addClass('d-none');
            }

            player.muted(true);
            player.play();
          });
        }

        if (playInViewport) {
          player.ready(function () {
            var keepLooping = true;
            $(window).on('scroll', function () {
              if (isScrolledIntoView(playerID) && keepLooping) {
                player.muted(true);
                player.play();

                if (coverImage.length) {
                  coverImage.addClass('d-none');
                }
              } else {
                player.pause();
              }
            });
            player.on('ended', function () {
              if (!video.loop) {
                keepLooping = false;
              }
            });
          });
        }

        if (coverImage.length) {
          coverImage.on('click', function () {
            $(this).addClass('d-none');
            player.play();
          });
        }

        if (playButton.length) {
          playButton.on('click', function () {
            if (coverImage.length) {
              coverImage.addClass('d-none');
            }

            player.play();
          });
        }
      }
    });
  });
}

module.exports = {
  initBrightcoveVideos: initBrightcoveVideos
};

/***/ }),

/***/ "./cartridges/app_mk_storefront/cartridge/client/default/js/experience/components/commerceAssets/countDownClock.js":
/*!*************************************************************************************************************************!*\
  !*** ./cartridges/app_mk_storefront/cartridge/client/default/js/experience/components/commerceAssets/countDownClock.js ***!
  \*************************************************************************************************************************/
/***/ (function(module) {

"use strict";
/* eslint-disable radix */

/**
 * Init the Header fucntions
 * */

function initCountDownClock() {
  var $clockWrapper = $('#clockWrapper');
  var endYear = parseInt($clockWrapper.data('year'));
  var endMonth = parseInt($clockWrapper.data('month'));
  var endDay = parseInt($('.endDay').data('day'));
  var hour = $('.endHour').data('hours');

  var getTimeZone = function getTimeZone() {
    var offset = new Date().getTimezoneOffset();
    var o = Math.abs(offset);
    return (offset < 0 ? '+' : '-') + ('00' + Math.floor(o / 60)).slice(-2) + ('00' + o % 60).slice(-2);
  };

  if ($clockWrapper.length) {
    var endTime = new Date("".concat(endYear, ", ").concat(endMonth, ", ").concat(endDay, " ").concat(hour, ":00:00 GMT").concat(getTimeZone()));
    endTime = Date.parse(endTime) / 1000;
    var $clockParameters = $('.clock-parameter');
    $clockParameters.removeClass('d-none');
    var daysSpan = $clockParameters.find('.days');
    var hoursSpan = $clockParameters.find('.hours');
    var minutesSpan = $clockParameters.find('.minutes');
    var secondsSpan = $clockParameters.find('.seconds');
    daysSpan.text('--');
    hoursSpan.text('--');
    minutesSpan.text('--');
    secondsSpan.text('--');
    var clockInterval = setInterval(function () {
      var now = new Date();
      now = Date.parse(now) / 1000;
      var timeLeft = endTime - now;
      var days = Math.floor(timeLeft / 86400);
      var hours = Math.floor((timeLeft - days * 86400) / 3600);
      var minutes = Math.floor((timeLeft - days * 86400 - hours * 3600) / 60);
      var seconds = Math.floor(timeLeft - days * 86400 - hours * 3600 - minutes * 60);

      if (days < '10') {
        days = '0' + days;
      }

      if (hours < '10') {
        hours = '0' + hours;
      }

      if (minutes < '10') {
        minutes = '0' + minutes;
      }

      if (seconds < '10') {
        seconds = '0' + seconds;
      }

      daysSpan.text(days);
      hoursSpan.text(hours);
      minutesSpan.text(minutes);
      secondsSpan.text(seconds);

      if (timeLeft <= 0) {
        clearInterval(clockInterval);
        daysSpan.text('00');
        hoursSpan.text('00');
        minutesSpan.text('00');
        secondsSpan.text('00');
        $('.count-down-body-copy p').addClass('d-none');
        $('.countdown-cta').removeClass('d-none');
      }
    }, 1000);
  }
}

module.exports = {
  countDownClockFunctions: initCountDownClock()
};

/***/ }),

/***/ "./cartridges/app_mk_storefront/cartridge/client/default/js/experience/components/commerceAssets/parallax.js":
/*!*******************************************************************************************************************!*\
  !*** ./cartridges/app_mk_storefront/cartridge/client/default/js/experience/components/commerceAssets/parallax.js ***!
  \*******************************************************************************************************************/
/***/ (function(module, __unused_webpack_exports, __webpack_require__) {

"use strict";


var lax = __webpack_require__(/*! lax.js */ "./node_modules/lax.js/lib/lax.min.js");

var SCREENSIZE = (__webpack_require__(/*! ../../../utilities/constants */ "./cartridges/app_mk_storefront/cartridge/client/default/js/utilities/constants.js").SCREENSIZE);

var isMobile = $(window).width() <= SCREENSIZE.MOBILEMAX;
var parallaxContainer = $('.parallax-container');
var startMaxHeight = $('.parallax-container').css('max-height');
/**
 * Helper function to update css properties
 *  @param {jquery} element - jquery element
 *  @param {Integer} height - updated height
 *  @param {Integer} maxHeight - updated max-height
 */

function updateCssProps(element, height, maxHeight) {
  element.css({
    height: height,
    'max-height': maxHeight
  });
}
/**
 * Adds mobile parallax functionality
 */


function mobileParallax() {
  window.onload = function () {
    var imgHeight = isMobile ? $('.parallax-mobile-wrapper .mobile-img').height() * 0.38 : $('.parallax-mobile-wrapper .tablet-img').height() * 0.6;

    if ($(window).width() <= SCREENSIZE.TABLETMAX) {
      updateCssProps(parallaxContainer, imgHeight, 'none');
    }

    lax.init();
    lax.addDriver('scrollY', function () {
      return window.scrollY;
    });
    lax.addElements('.mobile-img', {
      scrollY: {
        translateY: [['elInY', 'elCenterY', 'elOutY'], [-300, -20, 90]]
      }
    });
    lax.addElements('.tablet-img', {
      scrollY: {
        translateY: [['elInY', 'elCenterY', 'elOutY'], [-200, -40, 90]]
      }
    });
  };
}
/**
 * Checks for window resize and adjusts mobile parallax container
 */


function parallaxContainerResize() {
  $(window).resize(function () {
    var imgHeight;
    var windowWidth = $(window).width();

    if (windowWidth >= SCREENSIZE.DESKTOPMIN) {
      return false;
    } else if (windowWidth <= SCREENSIZE.TABLETMAX && windowWidth > SCREENSIZE.MOBILEMAX) {
      imgHeight = $('.parallax-mobile-wrapper .tablet-img').height() * 0.6;
      updateCssProps(parallaxContainer, imgHeight, 'none');
    } else if (windowWidth <= SCREENSIZE.MOBILEMAX) {
      imgHeight = $('.parallax-mobile-wrapper .mobile-img').height() * 0.38;
      updateCssProps(parallaxContainer, imgHeight, 'none');
    } else {
      updateCssProps(parallaxContainer, startMaxHeight, startMaxHeight);
    }
  });
}

module.exports = {
  parallaxFunctions: mobileParallax(),
  parallaxResize: parallaxContainerResize()
};

/***/ }),

/***/ "./cartridges/app_mk_storefront/cartridge/client/default/js/experience/components/commerceLayouts/carouselCustom.js":
/*!**************************************************************************************************************************!*\
  !*** ./cartridges/app_mk_storefront/cartridge/client/default/js/experience/components/commerceLayouts/carouselCustom.js ***!
  \**************************************************************************************************************************/
/***/ (function(__unused_webpack_module, __unused_webpack_exports, __webpack_require__) {

"use strict";


var debounce = __webpack_require__(/*! lodash/debounce */ "./node_modules/lodash/debounce.js");

var SCREENSIZE = (__webpack_require__(/*! ../../../../js/utilities/constants */ "./cartridges/app_mk_storefront/cartridge/client/default/js/utilities/constants.js").SCREENSIZE);

var isMobile = $(window).width() <= SCREENSIZE.MOBILEMAX;
/**
 * @function getPlayPauseButtonClassNames
 * @description a getter for CSS class names needed for generating, selecting, or updating the play/pause button
 * @returns {Object} containing base class name, "play" class name, and "pause" class name
 */

function getPlayPauseButtonClassNames() {
  var baseClassName = 'play-pause-button';
  return {
    baseClassName: baseClassName,
    playClassName: "".concat(baseClassName, "--play"),
    pauseClassName: "".concat(baseClassName, "--pause")
  };
}
/**
 * @function addPlayPauseButton
 * @description adds play/pause button markup to the provided slick slider element
 * @param {jQuery} $slickSliderElement the element that has been slick-initialized
 * @param {string} playLabel the accessible label when the button can be clicked to play
 * @param {string} pauseLabel the accessible label when the button can be clicked to pause
 * @returns {jQuery} the play/pause button that has been generated
 */


function addPlayPauseButton($slickSliderElement, playLabel, pauseLabel) {
  var _getPlayPauseButtonCl = getPlayPauseButtonClassNames(),
      baseClassName = _getPlayPauseButtonCl.baseClassName,
      playClassName = _getPlayPauseButtonCl.playClassName,
      pauseClassName = _getPlayPauseButtonCl.pauseClassName;

  var $controlsContainer = $slickSliderElement.find('+ .mk-custom-carousel-controls');
  var buttonSelector = ".".concat(baseClassName);
  var $existingButton = $controlsContainer.find(buttonSelector);

  if ($existingButton.length) {
    return $existingButton; // do not add button if one already exists
  }

  var slickData = $slickSliderElement.slick('getSlick');
  var paused = slickData.paused;
  var accessibleLabel = paused ? playLabel : pauseLabel;
  var buttonClassNames = paused ? "".concat(baseClassName, " ").concat(playClassName) : "".concat(baseClassName, " ").concat(pauseClassName);
  var buttonMarkup = "\n        <div class=\"h-100\">\n            <button class=\"".concat(buttonClassNames, "\">\n                <span class=\"sr-only\">").concat(accessibleLabel, "</span>\n            </button>\n        </div>\n    ");
  $controlsContainer.append(buttonMarkup);
  return $controlsContainer.find(buttonSelector);
}
/**
 * @function addPlayPauseClickHandler
 * @description adds click handler to play/pause button to make it functional
 * @param {jQuery} $playPauseButton the play/pause button
 * @param {jQuery} $slickSliderElement the parent element that is slick-initialized
 * @param {string} playLabel the accessible label when the button can be clicked to play
 * @param {string} pauseLabel the accessible label when the button can be clicked to pause
 */


function addPlayPauseClickHandler($playPauseButton, $slickSliderElement, playLabel, pauseLabel) {
  var _getPlayPauseButtonCl2 = getPlayPauseButtonClassNames(),
      playClassName = _getPlayPauseButtonCl2.playClassName,
      pauseClassName = _getPlayPauseButtonCl2.pauseClassName;

  $playPauseButton.off('click'); // remove any existing click handlers

  $playPauseButton.on('click', function () {
    var slickData = $slickSliderElement.slick('getSlick');
    var paused = slickData.paused;
    var $accessibleLabelElement = $playPauseButton.find('.sr-only');

    if (paused) {
      $slickSliderElement.slick('slickPlay'); // Now that the carousel is playing, update button appearance & label to indicate it's now a "pause" button

      $playPauseButton.removeClass(playClassName).addClass(pauseClassName);
      $accessibleLabelElement.text(pauseLabel);
    } else {
      $slickSliderElement.slick('slickPause'); // Now that the carousel is paused, update button appearance & label to indicate it's now a "play" button

      $playPauseButton.removeClass(pauseClassName).addClass(playClassName);
      $accessibleLabelElement.text(playLabel);
    }
  });
}
/**
 * @function localizeSlideIndicatorAriaLabels
 * @description updates aria-label on slide indicators (aka "dot controls") to support localization
 * @param {jQuery} $slickSliderElement the element that has been slick-initialized
 * @param {string} ariaLabelBase text to use as the basis for each aria-label
 */


function localizeSlideIndicatorAriaLabels($slickSliderElement, ariaLabelBase) {
  var $controlsContainer = $slickSliderElement.find('+ .mk-custom-carousel-controls');
  var $slideIndicatorListItems = $controlsContainer.find('.slick-dots li');
  var numberOfDots = $slideIndicatorListItems.length;
  $slideIndicatorListItems.each(function (index, li) {
    var ariaLabel = ariaLabelBase.replace('{0}', index + 1).replace('{1}', numberOfDots);
    var $button = $(li).find('button');
    $button.attr('aria-label', ariaLabel);
  });
}
/**
 * @function rearrangeElementsOnSlickDestroy
 * @description removes & re-appends "single text" block to ensure elements end up in the correct order after slick is destroyed
 * @param {jQuery} $slickSliderElement the element that has been slick-initialized
 */


function rearrangeElementsOnSlickDestroy($slickSliderElement) {
  $slickSliderElement.off('destroy');
  $slickSliderElement.on('destroy', function () {
    var $singleTextBlock = $slickSliderElement.find('.n-up-single-text-container');

    if ($singleTextBlock.length) {
      $singleTextBlock.remove();
      $slickSliderElement.append($singleTextBlock);
    }
  });
}
/**
 * @function initCustomCarousels
 * @description initializes all "MK Custom" Carousels on the page
 * @param {string} carouselContainerSelector CSS selector for the container that carries needed data attributes
 * @param {string} slickSliderSelector CSS selector for the element to be slick-initialized
 */


function initCustomCarousels(carouselContainerSelector, slickSliderSelector) {
  var $carouselContainers = $(carouselContainerSelector);
  $carouselContainers.each(function (index, container) {
    var slickConfig = $(container).data('slick');
    var playLabel = $(container).data('button-label-play');
    var pauseLabel = $(container).data('button-label-pause');
    var slideIndicatorAriaLabelBase = $(container).data('slide-indicator-aria-label');
    var $elementToSlick = $(container).find(slickSliderSelector).not('.slick-initialized');
    var $controlsContainer = $elementToSlick.find('+ .mk-custom-carousel-controls');
    $controlsContainer.empty();
    $elementToSlick.data('slick', slickConfig);
    $elementToSlick.slick(); // In some cases, slick slider is immediately destroyed after initialization according to breakpoint-based settings.
    // To avoid adding controls to a non-carousel, customize controls only if slick slider is active (i.e., if it has 'slick-initialized' CSS class).

    var $slickSliderElement = $(container).find("".concat(slickSliderSelector, ".slick-initialized"));
    var $playPauseButton = addPlayPauseButton($slickSliderElement, playLabel, pauseLabel);
    addPlayPauseClickHandler($playPauseButton, $slickSliderElement, playLabel, pauseLabel);
    localizeSlideIndicatorAriaLabels($slickSliderElement, slideIndicatorAriaLabelBase); // When slick is destroyed, elements can end up in the wrong order. rearrangeElementsOnSlickDestroy resolves this.

    rearrangeElementsOnSlickDestroy($slickSliderElement);
  });
}

$(window).on('resize', debounce(function () {
  // Reinitialize in cases where breakpoint-based settings have caused the carousel to be destroyed after initialization
  initCustomCarousels('.mk-custom-carousel-container', '.experience-region.experience-slides');

  if ($(window).width() <= SCREENSIZE.MOBILEMAX) {
    initCustomCarousels('.two-up-container', '.two-up-carousel');
    initCustomCarousels('.three-up-container', '.three-up-carousel');
  }

  initCustomCarousels('.four-up-container', '.four-up-carousel');
  initCustomCarousels('.simple-gallery-container', '.experience-region.experience-slides');
}, 500));
jQuery(initCustomCarousels('.mk-custom-carousel-container', '.experience-region.experience-slides'));

if (isMobile) {
  jQuery(initCustomCarousels('.three-up-container', '.three-up-carousel'));
  jQuery(initCustomCarousels('.two-up-container', '.two-up-carousel'));
}

jQuery(initCustomCarousels('.four-up-container', '.four-up-carousel'));
jQuery(initCustomCarousels('.simple-gallery-container', '.experience-region.experience-slides'));

/***/ }),

/***/ "./cartridges/app_mk_storefront/cartridge/client/default/js/product/base.js":
/*!**********************************************************************************!*\
  !*** ./cartridges/app_mk_storefront/cartridge/client/default/js/product/base.js ***!
  \**********************************************************************************/
/***/ (function(module, __unused_webpack_exports, __webpack_require__) {

"use strict";


var focusHelper = __webpack_require__(/*! ../components/focus */ "./cartridges/app_mk_storefront/cartridge/client/default/js/components/focus.js");

var clientSideUtil = __webpack_require__(/*! ../utilities/clientSideUtil */ "./cartridges/app_mk_storefront/cartridge/client/default/js/utilities/clientSideUtil.js");

var productImages = __webpack_require__(/*! ../product/productImages */ "./cartridges/app_mk_storefront/cartridge/client/default/js/product/productImages.js");

var productSetImages = __webpack_require__(/*! ../product/productSet */ "./cartridges/app_mk_storefront/cartridge/client/default/js/product/productSet.js");

var SCREENSIZE = (__webpack_require__(/*! ../utilities/constants */ "./cartridges/app_mk_storefront/cartridge/client/default/js/utilities/constants.js").SCREENSIZE);

var updateFavorites = (__webpack_require__(/*! ./favorites */ "./cartridges/app_mk_storefront/cartridge/client/default/js/product/favorites.js").updateFavorites);

var bvHelper = __webpack_require__(/*! int_bazaarvoice_sfra_custom/product/bvHelper */ "../../capri-core-sfcc/src/integrations/link_bazaarvoice-release-20.1.0/cartridges/int_bazaarvoice_sfra_custom/cartridge/client/default/js/product/bvHelper.js");

var DOMpurify = __webpack_require__(/*! dompurify */ "./node_modules/dompurify/dist/purify.js");

var sizeGuideTabs = __webpack_require__(/*! ../product/localizeSizeLabels */ "./cartridges/app_mk_storefront/cartridge/client/default/js/product/localizeSizeLabels.js");
/**
 * Retrieves the relevant pid value
 * @param {jquery} $el - DOM container for a given add to cart button
 * @return {string} - value to be used when adding product to cart
 */


function getPidValue($el) {
  var pid;

  if ($('#quickViewModal').hasClass('show') && !$('.product-set').length) {
    pid = $($el).closest('.modal-content').find('.product-quickview').data('pid');
  } else if ($('#inStoreInventoryModal').hasClass('show')) {
    pid = $($el).data('pid');
  } else if ($('.product-set-detail').length || $('.product-set').length) {
    pid = $($el).closest('.product-detail').find('.product-id').text();
  } else {
    pid = $($el).closest('.product-detail:not(".bundle-item")').data('pid');
  }

  return pid;
}
/**
 * Retrieve contextual quantity selector
 * @param {jquery} $el - DOM container for the relevant quantity
 * @return {jquery} - quantity selector DOM container
 */

/**
* Retrieve contextual quantity selector
* @param {jquery} $el - DOM container for the relevant quantity
* @return {jquery} - quantity selector DOM container
*/


function getQuantitySelector($el) {
  var quantitySelected;

  if ($($el && $('.set-item').length) && $('.instore-pickup-modal').hasClass('show')) {
    var pid = $el.attr('data-pid');
    quantitySelected = $(".product-detail[data-pid=".concat(pid, "]")).find('.quantity-select').val();
  } else if ($el && $('.set-item').length) {
    quantitySelected = $($el).closest('.product-detail').find('.quantity-select');
  } else if ($el && $('.product-bundle').length) {
    var quantitySelectedModal = $($el).closest('.modal-footer').find('.quantity-select');
    var quantitySelectedPDP = $($el).closest('.bundle-footer').find('.quantity-select');

    if (quantitySelectedModal.val() === undefined) {
      quantitySelected = quantitySelectedPDP;
    } else {
      quantitySelected = quantitySelectedModal;
    }
  } else {
    quantitySelected = $('.quantity-select');
  }

  return quantitySelected;
}
/**
 * Retrieves the value associated with the Quantity pull-down menu
 * @param {jquery} $el - DOM container for the relevant quantity
 * @return {string} - value found in the quantity input
 */


function getQuantitySelected($el) {
  if ($('.instore-pickup-modal').hasClass('show')) {
    return getQuantitySelector($el);
  }

  return getQuantitySelector($el).val();
}
/**
 * Process the attribute values for an attribute that has image swatches
 *
 * @param {Object} attr - Attribute
 * @param {string} attr.id - Attribute ID
 * @param {Object[]} attr.values - Array of attribute value objects
 * @param {string} attr.values.value - Attribute coded value
 * @param {string} attr.values.url - URL to de/select an attribute value of the product
 * @param {boolean} attr.values.isSelectable - Flag as to whether an attribute value can be
 *     selected.  If there is no variant that corresponds to a specific combination of attribute
 *     values, an attribute may be disabled in the Product Detail Page
 * @param {jQuery} $productContainer - DOM container for a given product
 * @param {Object} msgs - object containing resource messages
 */


function processSwatchValues(attr, $productContainer, msgs) {
  attr.values.forEach(function (attrValue) {
    var $attrValue = $productContainer.find('[data-attr="' + attr.id + '"] [data-attr-value="' + attrValue.value + '"]');
    var $swatchButton = $attrValue.parent();

    if (attrValue.selected) {
      $attrValue.addClass('selected');
      $attrValue.siblings('.selected-assistive-text').text(msgs.assistiveSelectedText);
    } else {
      $attrValue.removeClass('selected');
      $attrValue.siblings('.selected-assistive-text').empty();
    }

    if (attrValue.url) {
      $swatchButton.attr('data-url', DOMpurify.sanitize(attrValue.url));
    } else {
      $swatchButton.removeAttr('data-url');
    } // Disable if not selectable


    $attrValue.removeClass('selectable unselectable');
    $attrValue.addClass(attrValue.selectable ? 'selectable' : 'unselectable');
  });
}
/**
 * Process attribute values associated with an attribute that does not have image swatches
 *
 * @param {Object} attr - Attribute
 * @param {string} attr.id - Attribute ID
 * @param {Object[]} attr.values - Array of attribute value objects
 * @param {string} attr.values.value - Attribute coded value
 * @param {string} attr.values.url - URL to de/select an attribute value of the product
 * @param {boolean} attr.values.isSelectable - Flag as to whether an attribute value can be
 *     selected.  If there is no variant that corresponds to a specific combination of attribute
 *     values, an attribute may be disabled in the Product Detail Page
 * @param {jQuery} $productContainer - DOM container for a given product
 */


function processNonSwatchValues(attr, $productContainer) {
  var $attr = '[data-attr="' + attr.id + '"]';
  var $defaultOption = $productContainer.find($attr + ' .select-' + attr.id + ' option:first');
  DOMpurify.sanitize($defaultOption.attr('value', attr.resetUrl));
  attr.values.forEach(function (attrValue) {
    var $attrValue = $productContainer.find($attr + ' [data-attr-value="' + attrValue.value + '"]');
    DOMpurify.sanitize($attrValue.attr('value', attrValue.url).removeAttr('disabled'));

    if (!attrValue.selectable) {
      $attrValue.attr('disabled', true);
    }
  });
}
/**
 * Routes the handling of attribute processing depending on whether the attribute has image
 *     swatches or not
 *
 * @param {Object} attrs - Attribute
 * @param {string} attr.id - Attribute ID
 * @param {jQuery} $productContainer - DOM element for a given product
 * @param {Object} msgs - object containing resource messages
 */


function updateAttrs(attrs, $productContainer, msgs) {
  // Currently, the only attribute type that has image swatches is Color.
  var attrsWithSwatches = ['color'];
  attrs.forEach(function (attr) {
    if (attrsWithSwatches.indexOf(attr.id) > -1) {
      processSwatchValues(attr, $productContainer, msgs);
    } else {
      processNonSwatchValues(attr, $productContainer);
    }
  });
}
/**
 * Updates the availability status in the Product Detail Page
 *
 * @param {Object} response - Ajax response object after an
 *                            attribute value has been [de]selected
 * @param {jQuery} $productContainer - DOM element for a given product
 */


function updateAvailability(response, $productContainer) {
  var availabilityValue = '';
  var availabilityMessages = response.product.availability.messages;
  var isColorSelected = false;
  var isSizeSelected = false;
  var countOutOfStockSizes = 0;

  if (response.variationAttributes) {
    var attributes = response.variationAttributes;
    attributes.forEach(function (attribute) {
      var attr = attribute;

      if (attr && attr.attributeId === 'color') {
        isColorSelected = !!attr.values.find(function (value) {
          return value.selected === true;
        });
      }

      if (isColorSelected && attr && attr.attributeId === 'size') {
        isSizeSelected = !!attr.values.find(function (value) {
          return value.selected === true;
        });

        if (!isSizeSelected) {
          var product = response.product;
          product.available = true;
        }

        var variantSizesArray = attr.values;
        variantSizesArray.forEach(function (value) {
          var variantSize = value;

          if (variantSize && variantSize.inStock === false) {
            countOutOfStockSizes++;
          }
        });

        if (countOutOfStockSizes === variantSizesArray.length) {
          availabilityValue = '';
        }
      }
    });
  } else if (!response.product.readyToOrder) {
    availabilityValue = '<li><div>' + response.resources.info_selectforstock + '</div></li>';
  } else {
    availabilityMessages.forEach(function (message) {
      availabilityValue += '<li><div class="availability">' + message + '</div></li>';
    });
  }

  $($productContainer).trigger('product:updateAvailability', {
    product: response.product,
    $productContainer: $productContainer,
    message: availabilityValue,
    resources: response.resources
  });
}
/**
 * calculates width of the size options and updates the styling accordingly
 */


function updateSizeOptionWidth() {
  var length = $('.size-option').length;
  var arr = [];

  for (var i = 0; i < length; i++) {
    arr[i] = $('.size-option:eq(' + i + ')').width();
  }

  var highestWidth = Math.max.apply(Math, arr); // to find max value

  $('.size-option').css('min-width', highestWidth + 'px');
}
/**
 * Generates html for product attributes section
 *
 * @param {array} attributes - list of attributes
 * @return {string} - Compiled HTML
 */


function getAttributesHtml(attributes) {
  if (!attributes) {
    return '';
  }

  var html = '';
  attributes.forEach(function (attributeGroup) {
    if (attributeGroup.ID === 'mainAttributes') {
      attributeGroup.attributes.forEach(function (attribute) {
        html += '<div class="attribute-values">' + attribute.label + ': ' + attribute.value + '</div>';
      });
    }
  });
  return html;
}
/**
 * @typedef UpdatedOptionValue
 * @type Object
 * @property {string} id - Option value ID for look up
 * @property {string} url - Updated option value selection URL
 */

/**
 * @typedef OptionSelectionResponse
 * @type Object
 * @property {string} priceHtml - Updated price HTML code
 * @property {Object} options - Updated Options
 * @property {string} options.id - Option ID
 * @property {UpdatedOptionValue[]} options.values - Option values
 */

/**
 * Updates DOM using post-option selection Ajax response
 *
 * @param {OptionSelectionResponse} optionsHtml - Ajax response optionsHtml from selecting a product option
 * @param {jQuery} $productContainer - DOM element for current product
 */


function updateOptions(optionsHtml, $productContainer) {
  // Update options
  $productContainer.find('.product-options').empty().html(DOMpurify.sanitize(optionsHtml));
}
/**
 * Updating product main image from response containing images
 * @param {Object[]} primaryImageUrls - Array of large product images,along with related information
 * @param {jQuery} $productContainer - DOM element for a given product
 */


function updateMainImage(primaryImageUrls, $productContainer) {
  var isQuickview = $productContainer.hasClass('product-quickview');
  var isProductSetFlyout = $productContainer.parents('#editProductSetModal').length > 0;
  var isEditCartFlyout = isQuickview && $productContainer.parents('.edit-product-modal').length > 0;
  var imageSetArray = primaryImageUrls;

  if (imageSetArray.zoom.length === 0) {
    imageSetArray.zoom = imageSetArray.large;
  }

  if ($('.syte-discovery').length > 0) {
    $productContainer.find('.syte-discovery').attr('data-image-src', DOMpurify.sanitize(imageSetArray.base[0].url));
  }

  if ($('#syte-similar-items-container').length > 0) {
    $('#syte-similar-items-container').attr('data-image-src', DOMpurify.sanitize(imageSetArray.base[0].url));
  }

  if (isEditCartFlyout) {
    $productContainer.find('.primary-images').html('<img src="' + DOMpurify.sanitize(imageSetArray.base[0].url) + '" class="d-block img-fluid" alt="' + DOMpurify.sanitize(imageSetArray.base[0].alt) + ' image number ' + parseInt(DOMpurify.sanitize(imageSetArray.base[0].index), 10) + '" data-zoom-img="" itemprop="image"/>');
  } else if (isProductSetFlyout) {
    $productContainer.find('.product-set-flyout-image .zoom').html('<img src="' + DOMpurify.sanitize(imageSetArray.base[0].url) + '" class="d-block img-fluid" alt="' + DOMpurify.sanitize(imageSetArray.base[0].alt) + ' image number ' + parseInt(DOMpurify.sanitize(imageSetArray.base[0].index), 10) + '" data-zoom-img="" itemprop="image"/>');
  } else {
    var wishListIconsBtns = $productContainer.find('.large-images').html().substring(0, $productContainer.find('.large-images').html().indexOf('<div class="zoom">'));
    $productContainer.find('.js-large-images-list').empty();

    if ($(window).width() <= SCREENSIZE.DESKTOPMIN) {
      $productContainer.find('.js-large-images-list').removeClass('slick-initialized');
      $productContainer.find('.js-large-images-list').removeClass('slick-slider');
    }

    for (var i = 0; i < imageSetArray.large.length; i++) {
      if ($(window).width() > SCREENSIZE.DESKTOPMIN && i > 0) {
        $productContainer.find('.js-large-images-list').append('<li data-large="large-thumbnail-' + DOMpurify.sanitize(imageSetArray.large[i].index) + '" class="large-thumbnail-' + DOMpurify.sanitize(imageSetArray.large[i].index) + '  large-images">' + DOMpurify.sanitize(wishListIconsBtns) + '<div class="zoom"><img data-src="' + DOMpurify.sanitize(imageSetArray.large[i].url) + '" class="zoom-image lazyload d-block img-fluid" loading="lazy" alt="' + DOMpurify.sanitize(imageSetArray.large[i].alt) + ' image number ' + parseInt(DOMpurify.sanitize(imageSetArray.zoom[i].index), 10) + '" data-zoom-img="" data-zoom-image="' + DOMpurify.sanitize(imageSetArray.zoom[i].url) + '" itemprop="image"></div></li>');
      } else {
        $productContainer.find('.js-large-images-list').append('<li data-large="large-thumbnail-' + DOMpurify.sanitize(imageSetArray.large[i].index) + '" class="large-thumbnail-' + DOMpurify.sanitize(imageSetArray.large[i].index) + '  large-images">' + DOMpurify.sanitize(wishListIconsBtns) + '<div class="zoom"><img src="' + DOMpurify.sanitize(imageSetArray.large[i].url) + '" class="zoom-image d-block img-fluid" alt="' + DOMpurify.sanitize(imageSetArray.large[i].alt) + ' image number ' + parseInt(DOMpurify.sanitize(imageSetArray.zoom[i].index), 10) + '" data-zoom-img="" data-zoom-image="' + DOMpurify.sanitize(imageSetArray.zoom[i].url) + '" itemprop="image"></div></li>');
      }
    }

    $('.large-images').first().addClass('first-image');

    if (isQuickview) {
      $productContainer.find('.large-images-list .large-images').not(':first-child').addClass('d-none');
    }
  }
}
/**
 * Updating product thumnail image from response containing images
 * @param {Object[]} imgs - Array of small product images,along with related information
 * @param {jQuery} $productContainer - DOM element for a given product
 */


function updateThumbnailImage(imgs, $productContainer) {
  var count = 0;
  $productContainer.find('.thumbnail-btn.js-thumbnail-btn').remove();

  for (var i = 0; i < imgs.length; i++) {
    var thumbnailControlBtn = '<button type="button" aria-label="thumbnail" data-thumbnail="thumbnail-' + imgs[i].index + '" class="thumbnail-' + imgs[i].index + ' thumbnail-btn js-thumbnail-btn"><img src="' + imgs[i].url + '" class="d-block img-fluid mouseFocusUnActive" alt="' + imgs[i].alt + ' image number ' + parseInt(imgs[i].index, 10) + '" itemprop="image"></button>';

    if (count === 0) {
      if ($(window).width() <= SCREENSIZE.DESKTOPMIN) {
        $productContainer.find('.js-thumbnail-images').append(DOMpurify.sanitize(thumbnailControlBtn));
      } else if ($('.thumbnail-prev').length) {
        $productContainer.find('.thumbnail-prev').after(DOMpurify.sanitize(thumbnailControlBtn));
      } else {
        $productContainer.find('.thumbnail-images').append(DOMpurify.sanitize(thumbnailControlBtn));
      }

      $productContainer.find('.thumbnail-0').addClass('active');
      count++;
    } else {
      $productContainer.find('.thumbnail-' + (imgs[i].index - 1) + '').after(DOMpurify.sanitize(thumbnailControlBtn));
    }

    $productContainer.find('.thumbnail-' + imgs[i].index + ' img').attr('onerror', 'this.parentNode.classList.remove("d-block");this.parentNode.classList.add("d-none");');
  }
}
/**
 * @typespec UpdatedQuantity
 * @type Object
 * @property {boolean} selected - Whether the quantity has been selected
 * @property {string} value - The number of products to purchase
 * @property {string} url - Compiled URL that specifies variation attributes, product ID, options,
 *     etc.
 */

/**
 * Updates the quantity DOM elements post Ajax call
 * @param {UpdatedQuantity[]} quantities -
 * @param {jQuery} $productContainer - DOM container for a given product
 */


function updateQuantities(quantities, $productContainer) {
  if ($productContainer.parent('.bonus-product-item').length <= 0) {
    var optionsHtml = quantities.map(function (quantity) {
      var selected = quantity.selected ? ' selected ' : '';
      return '<option value="' + quantity.value + '"  data-url="' + quantity.url + '"' + selected + '>' + quantity.value + '</option>';
    }).join('');
    getQuantitySelector($productContainer).empty().html(DOMpurify.sanitize(optionsHtml));
  }
}
/**
 * Parses JSON from Ajax call made whenever an attribute value is [de]selected
 * @param {Object} response - response from Ajax call
 * @param {Object} response.product - Product object
 * @param {string} response.product.id - Product ID
 * @param {Object[]} response.product.variationAttributes - Product attributes
 * @param {Object[]} response.product.images - Product images
 * @param {boolean} response.product.hasRequiredAttrsSelected - Flag as to whether all required
 *     attributes have been selected.  Used partially to
 *     determine whether the Add to Cart button can be enabled
 * @param {jQuery} $productContainer - DOM element for a given product.
 * @param {jQuery} selectedElement - DOM element for selected variation attribute.
 */


function handleVariantResponse(response, $productContainer, selectedElement) {
  var productSetPage = $('.product-set-detail').length > 0;
  var cartPage = $('.cart-page').length > 0;
  var klarnaWidget = $('.pdp-klarna-widget');
  var isQuickView = $('body').find('#quickViewModal').length > 0;
  var isChoiceOfBonusProducts = $productContainer.parents('.choose-bonus-product-dialog').length > 0;
  var isVariant;
  var isColorVariant = false;
  var isActionVariant = response.action === 'Product-Variation';

  if (response.product.variationAttributes) {
    updateAttrs(response.product.variationAttributes, $productContainer, response.resources);
    isVariant = response.product.productType === 'variant';

    if (isChoiceOfBonusProducts && isVariant) {
      $productContainer.parent('.bonus-product-item').data('pid', response.product.id);
      $productContainer.parent('.bonus-product-item').data('ready-to-order', response.product.readyToOrder);
    }
  }

  if (selectedElement && selectedElement.hasClass('color-attribute')) {
    isColorVariant = true; // Update primary images

    var primaryImageUrls = response.product.images;
    updateMainImage(primaryImageUrls, $productContainer); // Update thumbnail images

    var thumbnailImageUrls = response.product.images.base;
    updateThumbnailImage(thumbnailImageUrls, $productContainer);
  }

  if (klarnaWidget.length > 0 && isActionVariant) {
    var thresholdValue = klarnaWidget.data('threshold');
    var nowPrice = response.product.price.sales.value;

    if (nowPrice >= thresholdValue) {
      klarnaWidget.addClass('d-none');
    } else {
      klarnaWidget.removeClass('d-none');
    }
  }

  if (!productSetPage && !cartPage && !isQuickView && isColorVariant) {
    clientSideUtil.windowScrollToDestination(0, 0, 'smooth');
    productImages.setupPDPImages();
    productImages.setupMediaZoom();
    $('.zoomContainer').remove();
  } else if (productSetPage && !cartPage && isColorVariant) {
    var productSetFlyout = $productContainer.closest('.product-set-flyout-wrapper').length;

    if (productSetFlyout === 0 && $(window).width() <= SCREENSIZE.DESKTOPMIN) {
      var $mobileImagesList = $productContainer.closest('.product-set-detail').find('.js-product-carousel');
      $mobileImagesList.not('.slick-initialized').slick();
    } else if (productSetFlyout === 0 && $(window).width() > SCREENSIZE.DESKTOPMIN) {
      productSetImages.productSetImages();
      productSetImages.setupMediaZoom();
    }
  } // Update pricing


  if (!isChoiceOfBonusProducts) {
    var $priceSelector = $('.prices .price', $productContainer).length ? $('.prices .price', $productContainer) : $('.prices .price');
    $priceSelector.replaceWith(DOMpurify.sanitize(response.product.price.html));
  } // Update promotions


  $productContainer.find('.promotions').empty().html(DOMpurify.sanitize(response.product.promotionsHtml)); // Update variations

  var selectedSizeTabID = $('.size-locale-tabs').find('button.selected').attr('id') || '';
  $productContainer.find('.variationAttributes').empty().html(DOMpurify.sanitize(response.product.variationsHtml));

  if (productSetPage) {
    var $productSetFlyout = $productContainer.closest('.product-set-flyout-wrapper').closest('.modal-body').length;

    if ($productSetFlyout > 0) {
      $productContainer.find('.variationAttributes .color-attribute-value').find("span[data-isinstock='false']").parent().remove();
      $productContainer.find('.variationAttributes').find("div.size-option[data-isinstock='false']").remove();
    }
  }

  var mainkorsVIPSection = $productContainer.find('.mainkorsVIPSection');

  if (mainkorsVIPSection.data('is-loyalty')) {
    mainkorsVIPSection.removeClass('d-none');
  }

  setTimeout(function () {
    selectedElement.focus();
  }, 100);
  sizeGuideTabs.localizeSizeLabels();

  if (selectedSizeTabID.length) {
    $('.size-locale-tabs').find("button#".concat(selectedSizeTabID)).trigger('click');
  }

  updateSizeOptionWidth();
  updateAvailability(response, $productContainer);

  if (isChoiceOfBonusProducts) {
    var $selectButton = $productContainer.find('.select-bonus-product');
    $selectButton.trigger('bonusproduct:updateSelectButton', {
      product: response.product,
      $productContainer: $productContainer
    });
  } else {
    // Enable "Add to Cart" button if all required attributes have been selected
    $('button.add-to-cart, button.add-to-cart-global, button.update-cart-product-global, button.move-to-cart-wishlist').trigger('product:updateAddToCart', {
      product: response.product,
      $productContainer: $productContainer
    }).trigger('product:statusUpdate', response.product);
  } // Update quantities


  var editWishlist = $productContainer.closest('#editWishlistProductModal').length > 0;

  if (response.quantitySelectorEnabled && !editWishlist) {
    $('.quantity-quick-view').removeClass('d-none');
    updateQuantities(response.product.quantities, $productContainer);
  } else {
    $('.quantity-quick-view').addClass('d-none');
  } // Update attributes


  $productContainer.find('.main-attributes').empty().html(getAttributesHtml(DOMpurify.sanitize(response.product.attributes)));
  var $siteDiscovery = $('.syte-discovery');

  if ($siteDiscovery.length > 0) {
    $siteDiscovery.attr('data-sku', response.product.syteProductId);
    $siteDiscovery.attr('data-image-src', response.product.syteProductImage);
  }

  var $syteCarousel = $('.syte-carousel-js');

  if ($syteCarousel.length > 0) {
    $syteCarousel.attr('data-sku', response.product.syteProductId);
    $syteCarousel.attr('data-image-src', response.product.syteProductImage);
  }

  var sizeInStock = $productContainer.closest('.modal-content').find('.product-quickview .size-option.selected').data('isinstock');
  var colorInStock = $productContainer.closest('.modal-content').find('.product-quickview .color-attribute-value .swatch-circle.selected').data('isinstock');

  if (sizeInStock === false || colorInStock === false) {
    $productContainer.closest('.modal-content').find('.product-quickview .edit-product-title').addClass('d-none');
    $productContainer.closest('.modal-content').find('.product-quickview .notify-product-title.d-none').removeClass('d-none');
  } else {
    $productContainer.closest('.modal-content').find('.product-quickview .edit-product-title.d-none').removeClass('d-none');
    $productContainer.closest('.modal-content').find('.product-quickview .notify-product-title').addClass('d-none');
  }
}
/**
 * updates the product view when a product attribute is selected or deselected or when
 *         changing quantity
 * @param {string} selectedValueUrl - the Url for the selected variation value
 * @param {jQuery} $productContainer - DOM element for current product
 * @param {boolean} selectedElement - current attribute is selected
 * @param {boolean} updateSizeBox - update the size box
*/


function attributeSelect(selectedValueUrl, $productContainer) {
  var selectedElement = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : false;
  var updateSizeBox = arguments.length > 3 && arguments[3] !== undefined ? arguments[3] : false;
  var productSetPage = $('.product-set-detail').length > 0;
  var cartPage = $('.cart-page').length > 0;
  var wishlistPage = $('.main-wishlist');

  if (selectedValueUrl) {
    $('body').trigger('product:beforeAttributeSelect', {
      url: selectedValueUrl,
      container: $productContainer
    });
    $.ajax({
      url: selectedValueUrl,
      method: 'GET',
      success: function success(data) {
        if (updateSizeBox) {
          $productContainer.find('.size-option.selected').removeClass('selected');
          selectedElement.parents('.size-option').addClass('selected');
        }

        handleVariantResponse(data, $productContainer, selectedElement);
        updateOptions(data.product.optionsHtml, $productContainer);
        updateQuantities(data.product.quantities, $productContainer);
        updateFavorites(data.isFavoriteProduct, $productContainer);

        if ($('.afterpay-messaging afterpay-placement').length > 0) {
          if (data.product.price && data.product.price.sales) {
            if (!data.product.isProductAfterpayEligible || data.product.isProductAfterpayEligible.isApplicable === false) {
              $productContainer.find('.afterpay-messaging').addClass('d-none');
            } else {
              $productContainer.find('.afterpay-messaging').removeClass('d-none');
              $productContainer.find('.afterpay-messaging afterpay-placement').attr('data-amount', DOMpurify.sanitize(data.product.price.sales.decimalPrice));
            }
          }
        }

        if (!productSetPage && !cartPage && !wishlistPage) {
          productImages.setupPDPImages();
        }

        if (data.product.comingSoon.isComingSoonAvaiable) {
          $('.comming-soon-msg').removeClass('d-none').empty().append(DOMpurify.sanitize(data.product.comingSoon.message));
        } else {
          $('.comming-soon-msg').addClass('d-none');
        }

        $('body').trigger('product:afterAttributeSelect', {
          data: data,
          container: $productContainer,
          target: selectedElement
        });

        if (selectedElement) {
          if (selectedElement.hasClass('color-attribute')) {
            $('body').trigger('event:productColorSelection', data);
          }

          if (selectedElement.attr('name') === 'Size') {
            $('body').trigger('event:productSizeSelection', data);
          }

          if (selectedElement.hasClass('quantity-select')) {
            $('body').trigger('event:quantityDropdown', data);
          }
        }

        if (data.product.isNotifyMeActive === true) {
          $productContainer.find('.add-to-cart-container button').attr('disabled', false).addClass('notify-me-btn').attr('href', data.product.notifyURL);
          $productContainer.find('.update-cart-product-global').attr('disabled', false).addClass('notify-me-btn').attr('href', data.product.notifyURL);
          $productContainer.find('.move-to-cart-wishlist').attr('disabled', false).addClass('notify-me-btn').attr('href', data.product.notifyURL);

          if (wishlistPage) {
            $productContainer.find('.add-to-cart-url').addClass('notify-me-enabled');
          }
        } else {
          $productContainer.find('.add-to-cart-container button').removeClass('notify-me-btn').attr('href', '');
          $productContainer.find('.update-cart-product-global').removeClass('notify-me-btn').attr('href', '');
          $productContainer.find('.move-to-cart-wishlist').removeClass('notify-me-btn').attr('href', '');

          if (wishlistPage) {
            $productContainer.find('.add-to-cart-url').removeClass('notify-me-enabled');
          }

          if (data.product.availability !== undefined && data.product.availability.dcQuantityAvailable !== undefined) {
            if (!data.product.availability.dcQuantityAvailable) {
              $productContainer.find('.add-to-cart-container button').attr('disabled', true);
              $productContainer.find('.dcquantity-notavailable-msg').removeClass('d-none').empty().append(DOMpurify.sanitize(data.product.availability.dcQuantityNotAvailableMsg));
            } else {
              $productContainer.find('.add-to-cart-container button').attr('disabled', false);
              $productContainer.find('.dcquantity-notavailable-msg').addClass('d-none');
            }
          }
        }
      },
      error: function error() {}
    });
  }
}
/**
 * Retrieves url to use when adding a product to the cart
 * @param {jQuery} elem - Add to Cart button
 * @param {string} uuid - Unique ID for Product Cart Line Item
 * @return {string} - The provided URL to use when adding a product to the cart
 */


function getAddToCartUrl(elem, uuid) {
  var url;

  if (uuid) {
    url = $(elem).parent().find('.switch-to-pickupin-store').val();
  } else {
    url = $(elem).parent().find('.add-to-cart-url').val();
  }

  return url;
}
/**
 * Parses the html for a modal window
 * @param {string} html - representing the body and footer of the modal window
 *
 * @return {Object} - Object with properties body and footer.
 */


function parseHtml(html) {
  var $html = $('<div>').append($.parseHTML(html));
  var body = $html.find('.choice-of-bonus-product');
  var footer = $html.find('.modal-footer').children();
  return {
    body: body,
    footer: footer
  };
}
/**
 * Retrieves url to use when adding a product to the cart
 *
 * @param {Object} data - data object used to fill in dynamic portions of the html
 */


function chooseBonusProducts(data) {
  $('.modal-body').spinner().start();

  if ($('#chooseBonusProductModal').length !== 0) {
    $('#chooseBonusProductModal').remove();
  }

  var bonusUrl;

  if (data.bonusChoiceRuleBased) {
    bonusUrl = data.showProductsUrlRuleBased;
  } else {
    bonusUrl = data.showProductsUrlListBased;
  }

  var htmlString = '<!-- Modal -->' + '<div class="modal fade" id="chooseBonusProductModal" tabindex="-1" role="dialog">' + '<span class="enter-message sr-only" ></span>' + '<div class="modal-dialog choose-bonus-product-dialog" ' + 'data-total-qty="' + data.maxBonusItems + '"' + 'data-UUID="' + data.uuid + '"' + 'data-pliUUID="' + data.pliUUID + '"' + 'data-addToCartUrl="' + data.addToCartUrl + '"' + 'data-pageStart="0"' + 'data-pageSize="' + data.pageSize + '"' + 'data-moreURL="' + data.showProductsUrlRuleBased + '"' + 'data-bonusChoiceRuleBased="' + data.bonusChoiceRuleBased + '">' + '<!-- Modal content-->' + '<div class="modal-content">' + '<div class="modal-header">' + '    <span class="">' + data.labels.selectprods + '</span>' + '    <button type="button" class="close pull-right" data-dismiss="modal">' + '        <span aria-hidden="true">&times;</span>' + '        <span class="sr-only"> </span>' + '    </button>' + '</div>' + '<div class="modal-body"></div>' + '<div class="modal-footer"></div>' + '</div>' + '</div>' + '</div>';
  DOMpurify.sanitize($('body').append(htmlString));
  $('.modal-body').spinner().start();
  $.ajax({
    url: bonusUrl,
    method: 'GET',
    dataType: 'json',
    success: function success(response) {
      var parsedHtml = parseHtml(response.renderedTemplate);
      $('#chooseBonusProductModal .modal-body').empty();
      $('#chooseBonusProductModal .enter-message').text(response.enterDialogMessage);
      $('#chooseBonusProductModal .modal-header .close .sr-only').text(response.closeButtonText);
      $('#chooseBonusProductModal .modal-body').html(parsedHtml.body);
      $('#chooseBonusProductModal .modal-footer').html(parsedHtml.footer);
      $('#chooseBonusProductModal').modal('show');
      $.spinner().stop();
    },
    error: function error() {
      $.spinner().stop();
    }
  });
}
/**
 * Retrieves the bundle product item ID's for the Controller to replace bundle master product
 * items with their selected variants
 *
 * @return {string[]} - List of selected bundle product item ID's
 */


function getChildProducts() {
  var childProducts = [];
  $('.bundle-item').each(function () {
    childProducts.push({
      pid: $(this).find('.product-id').text(),
      quantity: parseInt($(this).find('label.quantity').data('quantity'), 10)
    });
  });
  return childProducts.length ? JSON.stringify(childProducts) : [];
}
/**
 * Retrieve product options
 *
 * @param {jQuery} $productContainer - DOM element for current product
 * @return {string} - Product options and their selected values
 */


function getOptions($productContainer) {
  var options = $productContainer.find('.product-option').map(function () {
    var $elOption = $(this).find('.options-select');
    var urlValue = $elOption.val();
    var selectedValueId = $elOption.find('option[value="' + urlValue + '"]').data('value-id');
    return {
      optionId: $(this).data('option-id'),
      selectedValueId: selectedValueId
    };
  }).toArray();
  return JSON.stringify(options);
}
/**
 * Makes a call to the server to report the event of adding an item to the cart
 *
 * @param {string | boolean} url - a string representing the end point to hit so that the event can be recorded, or false
 */


function miniCartReportingUrl(url) {
  if (url) {
    $.ajax({
      url: url,
      method: 'GET',
      success: function success() {// reporting urls hit on the server
      },
      error: function error() {// no reporting urls hit on the server
      }
    });
  }
}
/**
 * cleartimout and setting the timer for minicart after add a product to cart
 * @param {string} selector - current selector
 * @param {number} millisec - duration after which this event will trigger
 */


function clearAndSetTime(selector, millisec) {
  var timer;
  window.clearTimeout(timer);
  timer = window.setTimeout(function () {
    $(selector).removeClass('show');
  }, millisec);
}
/* Fluid Customization - CUSTOM METHOD FOR FLUID */

/**
 * Add Fluid Configure product to cart from the PDP
 * @param {json} details - JSON configuration of the configurations made within Fluid
 */


function addCustomProductToCart() {
  $(document).on('product:addCustomProductToCart', function (e, details) {
    var apiKey;
    var addToCartUrl;
    var pid;
    var pidsObj;
    var childProducts = [];
    var fluidConfigureQuantity;
    var fluidConfigurePrice;
    var fluidConfigureImageURL;
    var fluidConfigureRecipeID;
    var fluidConfigureOldRecipeID;
    var fluidConfigureUUID;
    var fluidConfigureResourceURL;
    var fluidConfigureValues = {}; // eslint-disable-next-line no-underscore-dangle

    var quantity = details.recipe.product_quantities.product;
    pid = details.itemDetails.itemDetails[0].skuId;

    if (window.configureParams) {
      apiKey = window.configureParams.demandwareConfigureAPIKey;
      addToCartUrl = window.configureParams.addToCartUrl;
      fluidConfigureQuantity = quantity;
      fluidConfigurePrice = details.recipe.custom.price;
      fluidConfigureImageURL = details.recipe.images.front;
      fluidConfigureRecipeID = details.recipe.id;
      fluidConfigureResourceURL = details.recipe.uri + '?api-key=' + apiKey;
      fluidConfigureOldRecipeID = window.configureParams.oldRecipeId ? window.configureParams.oldRecipeId : ''; // This line is used for cart edit functionality

      fluidConfigureUUID = window.configureParams.lineId ? window.configureParams.lineId : ''; // This line is used for cart edit functionality

      if (typeof details.recipe !== 'undefined' && details.recipe !== '' && typeof details.recipe.extended_attributes !== 'undefined') {
        var recipeObject = details.recipe.extended_attributes;
        fluidConfigureValues = {};
        fluidConfigureValues.monogram = '';

        if (typeof recipeObject.monogram !== 'undefined' && typeof recipeObject.monogram.value.extendedId !== 'undefined') {
          fluidConfigureValues.monogram = recipeObject.monogram.value.extendedId;
        }

        fluidConfigureValues.monogram_color = '';

        if (typeof recipeObject.monogram_color !== 'undefined') {
          fluidConfigureValues.monogram_color = recipeObject.monogram_color.value.name;
        }

        fluidConfigureValues.placement = '';

        if (typeof recipeObject.select_a_placement !== 'undefined' && typeof recipeObject.select_a_placement.value !== 'undefined' && typeof recipeObject.select_a_placement.value.info !== 'undefined' && typeof recipeObject.select_a_placement.value.info.vendorId !== 'undefined') {
          fluidConfigureValues.placement = recipeObject.select_a_placement.value.info.vendorId;
        } else if (typeof recipeObject.jewelry !== 'undefined' || typeof recipeObject.watch !== 'undefined') {
          fluidConfigureValues.placement = 'Back';
        }

        fluidConfigureValues.font = '';
        fluidConfigureValues.font_size = '';

        if (typeof recipeObject.font_size !== 'undefined') {
          var monogramFontandFontSize = recipeObject.font_size.value.name;
          var result = monogramFontandFontSize.split('-');

          if (typeof result !== 'undefined' && result !== '') {
            fluidConfigureValues.font = result[1] ? result[1].trim() : '';
            fluidConfigureValues.font_size = result[2] ? result[2].trim() : '';
          }
        }
        /*
        These are all configurations that will eventually be referenced. Leaving this in place for documentation purposes.
         fluidConfigureValues.font = details.recipe.localized_configuration.font ? details.recipe.localized_configuration.font : '';
        fluidConfigureValues.font_position = details.recipe.localized_configuration.font_position ? details.recipe.localized_configuration.font_position : '';
        fluidConfigureValues.font_size = details.recipe.localized_configuration.font_size ? details.recipe.localized_configuration.font_size : '';
        fluidConfigureValues.text = details.recipe.localized_configuration.monogram ? details.recipe.localized_configuration.monogram : '';
        fluidConfigureValues.monogram_color = details.recipe.localized_configuration.monogram_color ? details.recipe.localized_configuration.monogram_color : '';
        fluidConfigureValues.monogram_back_render = details.recipe.localized_configuration.monogram_back_render ? details.recipe.localized_configuration.monogram_back_render : '';
        fluidConfigureValues.monogram_front_render = details.recipe.localized_configuration.monogram_front_render ? details.recipe.localized_configuration.monogram_front_render : '';
        fluidConfigureValues.jewelry_size = details.recipe.localized_configuration.jewelry_size ? details.recipe.localized_configuration.jewelry_size : '';
        fluidConfigureValues.type = details.recipe.localized_configuration.watch ? details.recipe.localized_configuration.watch : (details.recipe.localized_configuration.jewelry ? details.recipe.localized_configuration.jewelry : '');
        fluidConfigureValues.placement = details.recipe.localized_configuration.select_a_placement ? details.recipe.localized_configuration.select_a_placement : '';
        */

      }
    }

    var form = {
      pid: pid,
      pidsObj: pidsObj,
      childProducts: childProducts,
      quantity: quantity,
      fluidConfigureQuantity: fluidConfigureQuantity,
      fluidConfigurePrice: fluidConfigurePrice,
      fluidConfigureImageURL: fluidConfigureImageURL,
      fluidConfigureRecipeID: fluidConfigureRecipeID,
      fluidConfigureOldRecipeID: fluidConfigureOldRecipeID,
      fluidConfigureUUID: fluidConfigureUUID,
      fluidConfigureResourceURL: fluidConfigureResourceURL,
      fluidConfigureValues: JSON.stringify(fluidConfigureValues)
    };
    $('body').spinner().start();
    $(this).trigger('updateAddToCartFormData', form);

    if (addToCartUrl) {
      $.ajax({
        url: addToCartUrl,
        method: 'POST',
        data: form,
        success: function success(data) {
          $('.minicart').trigger('count:update', data);
          $('body').trigger('product:afterAddToCart', data);
          $('#fluidConfigure').spinner().stop();
          miniCartReportingUrl(data.reportingURL);
          var isProductAdded = true;
          var updateProduct = data.updatedLine;
          $('.minicart').trigger('minicart:update', [isProductAdded, data.toastMessageDisplayTime, updateProduct]);
          var selector = '.minicart .popover';
          var timer = setTimeout(function () {
            $(selector).removeClass('show');
          }, data.miniBagFlyOutTimeinMilliSec);
          $('.minicart .popover').on('mouseenter', function () {
            clearTimeout(timer);
          });
          $('body').trigger('event:addToCart', data);
        },
        error: function error() {
          $('#fluidConfigure').spinner().stop();
        }
      });
    }
  });
}
/**
 * @param {jQuery} $productContainer - Add to Cart / PIS CTA
 * @return {string} - Hide/Show Error
 */


function showNoAttributeSelectedError($productContainer) {
  // Need to use this for size selector instead of color attribute
  var $selectedSizeAttr = $productContainer.find('.select-size .size-option');
  var inStock = $productContainer.find('.size-option.selected').length ? $productContainer.find('.size-option.selected').data('isinstock') : true;
  var $selectedColorAttr = $productContainer.find('.color-attribute-value .swatch-circle');
  var sizeNotSelected = $selectedSizeAttr && $selectedSizeAttr.length && !$selectedSizeAttr.hasClass('selected');
  var colorNotSelected = $selectedColorAttr && $selectedColorAttr.length && !$selectedColorAttr.hasClass('selected');

  if (sizeNotSelected || colorNotSelected) {
    $('body').trigger('event:productError', $selectedSizeAttr);
    var $targetAttribute = colorNotSelected ? $selectedColorAttr : $selectedSizeAttr;
    var $attributeSelector = $targetAttribute.closest('.attribute');
    var variationsScrollValue = $('.variationAttributes').offset().top;
    $attributeSelector.find('.attribute-error:first').removeClass('d-none');
    $($('.size-option input')[0]).focus();

    if (!$targetAttribute.isInViewport()) {
      clientSideUtil.windowScrollToDestination(variationsScrollValue, 0, 'smooth');
    }

    $.spinner().stop();
    return false;
  } else if (!inStock && $('.set-item').length && $(this).hasClass('add-to-cart-global')) {
    var $target = colorNotSelected ? $selectedColorAttr : $selectedSizeAttr;
    var $attr = $target.closest('.attribute');
    $attr.find('.productset-attribute-error').removeClass('d-none').focus();
    return false;
  }
}
/**
 * Updating product images from response containing images
 * @param {Object[]} responseImage - Array of large product images,along with related information
 * @param {jQuery} $productContainer - DOM element for a given product
 */


function updateImage(responseImage, $productContainer) {
  // Update primary images
  var primaryImageUrls = responseImage;
  updateMainImage(primaryImageUrls, $productContainer); // Update thumbnail images

  var thumbnailImageUrls = responseImage.base;
  updateThumbnailImage(thumbnailImageUrls, $productContainer);
  productImages.setupMediaZoom();
  productImages.setupPDPImages();
}
/**
 * Hides quickview modal when SizeChart modal is open
 */


function hideQuickView() {
  if ($('#quickViewModal').hasClass('show')) {
    $('#quickViewModal').addClass('d-none');
    $('#sizeChartModal').attr('quickview', true);
  }
}

var base = {
  attributeSelect: attributeSelect,
  clearAndSetTime: clearAndSetTime,
  methods: {
    editBonusProducts: function editBonusProducts(data) {
      chooseBonusProducts(data);
    }
  },
  focusChooseBonusProductModal: function focusChooseBonusProductModal() {
    $('body').on('shown.bs.modal', '#chooseBonusProductModal', function () {
      $('#chooseBonusProductModal').siblings().attr('aria-hidden', 'true');
      $('#chooseBonusProductModal .close').focus();
    });
  },
  onClosingChooseBonusProductModal: function onClosingChooseBonusProductModal() {
    $('body').on('hidden.bs.modal', '#chooseBonusProductModal', function () {
      $('#chooseBonusProductModal').siblings().attr('aria-hidden', 'false');
    });
  },
  trapChooseBonusProductModalFocus: function trapChooseBonusProductModalFocus() {
    $('body').on('keydown', '#chooseBonusProductModal', function (e) {
      var focusParams = {
        event: e,
        containerSelector: '#chooseBonusProductModal',
        firstElementSelector: '.close',
        lastElementSelector: '.add-bonus-products'
      };
      focusHelper.setTabNextFocus(focusParams);
    });
  },
  colorAttribute: function colorAttribute() {
    $(document).on('click', '[data-attr="color"] button', function (e) {
      e.preventDefault();

      if ($(this).attr('disabled')) {
        return;
      }

      var $productContainer = $(this).closest('.set-item');

      if (!$productContainer.length) {
        $productContainer = $(this).closest('.product-detail');
      }

      if (!$(this).find('span').hasClass('selected')) {
        attributeSelect($(this).attr('data-url'), $productContainer, $(this));
      }

      $(this).siblings('button').attr('aria-label').replace($(this).parent().attr('data-attr-selected'), $(this).parent().attr('data-attr-select'));
      $(this).attr('aria-label', $(this).parents('.color-section').attr('data-attr') + $(this).find('span').attr('title') + $(this).parents().find('span.selected-assistive-text').text().trim());
      $('.add-to-favorites, .add-fav-heart').attr('aria-label', $('.add-fav-aria').val() + ' ' + $(this).find('span').attr('title'));
    });
  },
  selectAttribute: function selectAttribute() {
    $(document).on('change keypress', '.variationAttributes input[type="checkbox"], .attributes input[type="checkbox"]', function (e) {
      e.preventDefault(); // keypress handler

      if (e.which === 13) {
        this.checked = !this.checked;
      } // handle if checkbox already checked


      if ($(this).is(':checked') === false) {
        $(this).prop('checked', true);
        return;
      } // allow only 1 checkbox to be checked


      var group = 'input:checkbox[name="' + $(this).attr('name') + '"]';
      $(group).prop('checked', false);
      $(this).prop('checked', true); // get the product container

      var $productContainer = $(this).closest('.set-item');

      if (!$productContainer.length) {
        $productContainer = $(this).closest('.product-detail');
      } // handle attribute change


      attributeSelect(e.currentTarget.value, $productContainer, $(this), true);
    });
  },
  sizeChart: function sizeChart() {
    $(document).on('click', '.size-chart a', function (e) {
      e.preventDefault();
      var url = $(this).attr('href');

      if (!$('#sizeChartModal').length) {
        $.ajax({
          url: DOMpurify.sanitize(url),
          type: 'get',
          dataType: 'json',
          success: function success(data) {
            $('body').append(DOMpurify.sanitize(data.content));
            hideQuickView();
            $('#sizeChartModal').modal('show');

            if (!data.initialDisplayInches) {
              $('.nav a[href="#table-cm"]').tab('show');
            }
          }
        });
      } else {
        hideQuickView();
        $('#sizeChartModal').modal('show');
      }
    });
  },
  availability: function availability() {
    $(document).on('change', '.quantity-select', function (e) {
      e.preventDefault();
      var $productContainer = $(this).closest('.product-detail');

      if (!$productContainer.length) {
        $productContainer = $(this).closest('.modal-content').find('.product-quickview');
      }

      if ($('.bundle-items', $productContainer).length === 0) {
        attributeSelect($(e.currentTarget).find('option:selected').data('url'), $productContainer, $(this));
      }
    });
  },
  addToCart: function addToCart() {
    $(document).off('click', 'button.add-to-cart, button.add-to-cart-global').on('click', 'button.add-to-cart, button.add-to-cart-global', function () {
      if ($(this).hasClass('notify-me-btn')) {
        return;
      }

      var $this = $(this);
      var addToCartUrl;
      var pid;
      var pidsObj;
      var storeId;
      var setPids;
      var $productContainer = $(this).closest('.product-detail');
      var dialog = $(this).closest('.instore-pickup-modal');
      var uuid = dialog.data('uuid');
      var inStockColor = $productContainer.find('.color-attribute-value .swatch-circle.selected') ? $productContainer.find('.color-attribute-value .swatch-circle.selected').data('isinstock') : true;
      var inStockSize = $productContainer.find('.size-option.selected').length ? $productContainer.find('.size-option.selected').data('isinstock') : true;
      var inStock = inStockSize && inStockColor;
      var $selectedSizeAttr = $productContainer.find('.select-size .size-option');
      var $selectedColorAttr = $productContainer.find('.color-attribute-value .swatch-circle');
      var isProductSetFlyout = false;
      var isInStorePickUp = false;
      var error;
      var addtobagsets = $(this);

      if (!inStock && $('.set-item').length && $(this).hasClass('add-to-cart-global')) {
        var $target;

        if (!inStockSize) {
          $target = $selectedSizeAttr;
          error = '.productset-attribute-error-valid-size';
        } else {
          $target = $selectedColorAttr;
          error = '.productset-attribute-error';
        }

        var $attr = $target.closest('.attribute');
        $attr.find(error).removeClass('d-none').focus();
        return false;
      }

      if (showNoAttributeSelectedError($productContainer) === false) {
        return;
      }

      $('body').trigger('product:beforeAddToCart', this);

      if ($('.set-item').length && $(this).hasClass('add-to-cart-global')) {
        $('.product-flyout-close').trigger('click');
        setPids = [];
        $('.product-detail').each(function () {
          if (!$(this).hasClass('product-set-detail')) {
            setPids.push({
              pid: $(this).find('.product-id').text(),
              qty: $(this).find('.quantity-select').val(),
              options: getOptions($(this))
            });
          }
        });
        pidsObj = JSON.stringify(setPids);
        isProductSetFlyout = true;
      }

      pid = getPidValue($(this));

      if (!$productContainer.length) {
        $productContainer = $(this).closest('.quick-view-dialog').find('.product-detail');
      }

      addToCartUrl = getAddToCartUrl($(this), uuid);
      storeId = $(this).data('store-id');
      var form = {
        pid: pid,
        pidsObj: pidsObj,
        storeId: storeId,
        childProducts: getChildProducts(),
        quantity: getQuantitySelected($(this)),
        uuid: uuid,
        option: $(this).data('option'),
        isProductSetFlyout: isProductSetFlyout
      };

      if (!$('.bundle-item').length) {
        form.options = getOptions($productContainer);
      }

      if (uuid) {
        $('.modal-content').spinner().start();
      }

      $(this).trigger('updateAddToCartFormData', form);

      if ($(this).parent().hasClass('add-to-cart-and-pickup-button')) {
        isInStorePickUp = true;
      }

      if (addToCartUrl) {
        $.ajax({
          url: addToCartUrl,
          method: 'POST',
          data: form,
          success: function success(data) {
            // If added from Quickview in cart, reload the page to get the new cart items
            // TODO: create method to re-render the cart template
            if ($('.cart.cart-page, .cart.cart-empty').length) {
              location.reload();
            }

            if (data.productIsGated && data.korsvipModal !== '') {
              if ($('.set-item').length === 0) {
                $('#korsvipModal').remove();
                $('.product-detail').append(DOMpurify.sanitize(data.korsvipModal));
                $('#korsvipModal').insertAfter('#quickViewModal');
                $('#quickViewModal').modal('hide');
                $('#korsvipModal').modal('show');
                return false;
              }

              $('#korsvipModal').remove();

              if (addtobagsets.closest('.product-detail').hasClass('product-set-flyout-wrapper')) {
                $('.product-set-detail').append(DOMpurify.sanitize(data.korsvipModal));
                $('#korsvipModal').insertAfter('#quickViewModal');
                $('#quickViewModal').modal('hide');
                $('#korsvipModal').modal('show');
              } else {
                addtobagsets.closest('.product-detail').append(DOMpurify.sanitize(data.korsvipModal));
                $('#korsvipModal').insertAfter('#quickViewModal');
                $('#quickViewModal').modal('hide');
                $('#korsvipModal').modal('show');
                return false;
              }
            }

            if (data.error) {
              $.spinner().stop();
              clientSideUtil.floatToastMessage(data.message, data.toastMessageDisplayTime, false);
              return false;
            }

            if (isInStorePickUp) {
              $('body').trigger('event:buyOnlinePickupInStore', data);
            }

            if (uuid) {
              var dataTosend = {
                data: data,
                shipmentType: 'storePickup'
              };
              $('.count-shipping-item-cart').empty().append('(' + DOMpurify.sanitize(data.cartModel.noOfEcomItems) + ')');
              $('body').trigger('shipmentChanged', dataTosend);
              $('body').trigger('event:productShipmentChange', data);
              return false;
            }

            $('.minicart').trigger('count:update', data);
            $('body').trigger('product:afterAddToCart', data.message);
            $('#inStoreInventoryModal').modal('hide').attr('showQuickView', false);
            $('body').trigger('event:addToCart', data);
            $.spinner().stop();
            miniCartReportingUrl(data.reportingURL);
            var isProductAdded = true;
            $('.minicart').trigger('minicart:update', [isProductAdded, data.toastMessageDisplayTime]);
            var selector = '.minicart .popover';
            var timer = setTimeout(function () {
              $(selector).removeClass('show');
              $this.attr('tabindex', 0);
              $this.focus();
            }, data.miniBagFlyOutTimeinMilliSec);
            $('.minicart .popover').on('mouseenter', function () {
              clearTimeout(timer);
            });
            $(document).on('touchstart click', '#mkCloseMinicart', function () {
              setTimeout(function () {
                $this.attr('tabindex', 0);
                $this.focus();
              }, 100);
            });
          },
          error: function error(err) {
            $.spinner().stop();

            if (uuid) {
              clientSideUtil.floatToastMessage(err.responseJSON.errorMessage, err.responseJSON.toastMsgAndTimeOutSec.toastMessageDisplayTime, false);
            }
          }
        });
      }
    });
  },
  selectBonusProduct: function selectBonusProduct() {
    $(document).on('click', '.select-bonus-product', function () {
      var $choiceOfBonusProduct = $(this).parents('.choice-of-bonus-product');
      var pid = $(this).data('pid');
      var maxPids = $('.choose-bonus-product-dialog').data('total-qty');
      var submittedQty = parseInt($choiceOfBonusProduct.find('.bonus-quantity-select').val(), 10);
      var totalQty = 0;
      $.each($('#chooseBonusProductModal .selected-bonus-products .selected-pid'), function () {
        totalQty += $(this).data('qty');
      });
      totalQty += submittedQty;
      var optionID = $choiceOfBonusProduct.find('.product-option').data('option-id');
      var valueId = $choiceOfBonusProduct.find('.options-select option:selected').data('valueId');

      if (totalQty <= maxPids) {
        var selectedBonusProductHtml = '' + '<div class="selected-pid row" ' + 'data-pid="' + pid + '"' + 'data-qty="' + submittedQty + '"' + 'data-optionID="' + (optionID || '') + '"' + 'data-option-selected-value="' + (valueId || '') + '"' + '>' + '<div class="col-sm-11 col-9 bonus-product-name" >' + $choiceOfBonusProduct.find('.product-name').html() + '</div>' + '<div class="col-1"><i class="fa fa-times" aria-hidden="true"></i></div>' + '</div>';
        $('#chooseBonusProductModal .selected-bonus-products').append(selectedBonusProductHtml);
        $('.pre-cart-products').html(totalQty);
        $('.selected-bonus-products .bonus-summary').removeClass('alert-danger');
      } else {
        $('.selected-bonus-products .bonus-summary').addClass('alert-danger');
      }
    });
  },
  removeBonusProduct: function removeBonusProduct() {
    $(document).on('click', '.selected-pid', function () {
      $(this).remove();
      var $selected = $('#chooseBonusProductModal .selected-bonus-products .selected-pid');
      var count = 0;

      if ($selected.length) {
        $selected.each(function () {
          count += parseInt($(this).data('qty'), 10);
        });
      }

      $('.pre-cart-products').html(count);
      $('.selected-bonus-products .bonus-summary').removeClass('alert-danger');
    });
  },
  enableBonusProductSelection: function enableBonusProductSelection() {
    $('body').on('bonusproduct:updateSelectButton', function (e, response) {
      $('button.select-bonus-product', response.$productContainer).attr('disabled', !response.product.readyToOrder || !response.product.available);
      var pid = response.product.id;
      $('button.select-bonus-product', response.$productContainer).data('pid', pid);
    });
  },
  showMoreBonusProducts: function showMoreBonusProducts() {
    $(document).on('click', '.show-more-bonus-products', function () {
      var url = $(this).data('url');
      $('.modal-content').spinner().start();
      $.ajax({
        url: url,
        method: 'GET',
        success: function success(html) {
          var parsedHtml = parseHtml(html);
          $('.modal-body').append(parsedHtml.body);
          $('.show-more-bonus-products:first').remove();
          $('.modal-content').spinner().stop();
        },
        error: function error() {
          $('.modal-content').spinner().stop();
        }
      });
    });
  },
  addBonusProductsToCart: function addBonusProductsToCart() {
    $(document).on('click', '.add-bonus-products', function () {
      var $readyToOrderBonusProducts = $('.choose-bonus-product-dialog .selected-pid');
      var queryString = '?pids=';
      var url = $('.choose-bonus-product-dialog').data('addtocarturl');
      var pidsObject = {
        bonusProducts: []
      };
      $.each($readyToOrderBonusProducts, function () {
        var qtyOption = parseInt($(this).data('qty'), 10);
        var option = null;

        if (qtyOption > 0) {
          if ($(this).data('optionid') && $(this).data('option-selected-value')) {
            option = {};
            option.optionId = $(this).data('optionid');
            option.productId = $(this).data('pid');
            option.selectedValueId = $(this).data('option-selected-value');
          }

          pidsObject.bonusProducts.push({
            pid: $(this).data('pid'),
            qty: qtyOption,
            options: [option]
          });
          pidsObject.totalQty = parseInt($('.pre-cart-products').html(), 10);
        }
      });
      queryString += JSON.stringify(pidsObject);
      queryString = queryString + '&uuid=' + $('.choose-bonus-product-dialog').data('uuid');
      queryString = queryString + '&pliuuid=' + $('.choose-bonus-product-dialog').data('pliuuid');
      $.spinner().start();
      $.ajax({
        url: url + queryString,
        method: 'POST',
        success: function success(data) {
          $.spinner().stop();

          if (data.error) {
            $('#chooseBonusProductModal').modal('hide');

            if ($('.add-to-cart-messages').length === 0) {
              $('body').append('<div class="add-to-cart-messages"></div>');
            }

            $('.add-to-cart-messages').append(DOMpurify.sanitize('<div class="alert alert-danger add-to-basket-alert text-center">' + DOMpurify.sanitize(data.errorMessage) + '</div>'));
            setTimeout(function () {
              $('.add-to-basket-alert').remove();
            }, 20000);
          } else {
            $('.configure-bonus-product-attributes').html(DOMpurify.sanitize(data));
            $('.bonus-products-step2').removeClass('hidden-xl-down');
            $('#chooseBonusProductModal').modal('hide');

            if ($('.add-to-cart-messages').length === 0) {
              $('body').append('<div class="add-to-cart-messages"></div>');
            }

            $('.minicart-quantity').html(DOMpurify.sanitize(data.totalQty));
            $('.add-to-cart-messages').append(DOMpurify.sanitize('<div class="alert alert-success add-to-basket-alert text-center">' + DOMpurify.sanitize(data.msgSuccess) + '</div>'));
            setTimeout(function () {
              $('.add-to-basket-alert').remove();

              if ($('.cart-page').length) {
                location.reload();
              }
            }, 20000);
          }
        },
        error: function error() {
          $.spinner().stop();
        }
      });
    });
  },
  updateAddToCartCommon: function updateAddToCartCommon(response) {
    // update local add to cart (for sets)
    $('.quantity-select', response.$productContainer).attr('disabled', !response.product.readyToOrder);
    var inStock = response.product.variationAttributes.find(function (attribute) {
      if (attribute.attributeId === 'size') {
        return attribute.attributeId === 'size';
      }

      return attribute.attributeId === 'color';
    }).values.find(function (value) {
      return value.selected === true;
    }).inStock;

    if (inStock) {
      $('.quantity-select').attr('disabled', false);
    } else {
      $('.quantity-select').attr('disabled', true);
    }
  },
  getPidValue: getPidValue,
  observingBV: bvHelper.observingBV,
  getQuantitySelected: getQuantitySelected,
  miniCartReportingUrl: miniCartReportingUrl,
  sizeBoxCalc: updateSizeOptionWidth,
  updateImage: updateImage,

  /* Fluid Customization */
  addCustomProductToCart: addCustomProductToCart,
  showNoAttributeSelectedError: showNoAttributeSelectedError
};
module.exports = Object.assign(module.exports, base);

/***/ }),

/***/ "./cartridges/app_mk_storefront/cartridge/client/default/js/product/detail.js":
/*!************************************************************************************!*\
  !*** ./cartridges/app_mk_storefront/cartridge/client/default/js/product/detail.js ***!
  \************************************************************************************/
/***/ (function(module, __unused_webpack_exports, __webpack_require__) {

"use strict";


var base = __webpack_require__(/*! ./base */ "./cartridges/app_mk_storefront/cartridge/client/default/js/product/base.js");

var SCREENSIZE = (__webpack_require__(/*! ../utilities/constants */ "./cartridges/app_mk_storefront/cartridge/client/default/js/utilities/constants.js").SCREENSIZE);

var reviewsPresent = false;
var scrollTwentyFiveTriggered = false;
var scrollFiftyTriggered = false;
/**
 * Enable/disable UI elements
 * @param {boolean} enableOrDisable - true or false
 */

function updateAddToCartEnableDisableOtherElements(enableOrDisable) {
  $('button.add-to-cart-global').attr('disabled', enableOrDisable);
}
/**
 * update loyalty points based on quantity
 */


function updateLoyaltyPoint() {
  var points = $('.loyal-point-js').attr('data-loyalty-point');
  var currentLocal = $('.loyal-point-js').data('locale').replace('_', '-');
  points = new Intl.NumberFormat(currentLocal).format(points);
  $('.loyal-point-message-js span').html(points);
}
/**
 * update reviews content styling
 * @param {*} matchedElement - matched element
 */


var updateReviewsContent = function updateReviewsContent(matchedElement) {
  var windowWidth = $(window).width();
  var maxContentWidth = 651;
  var reviewContent = $('.bv-rnr__sc-10ra6n1-0');
  var reviews = matchedElement ? $(matchedElement).length : null;

  if (reviews === null && !reviewsPresent && windowWidth >= SCREENSIZE.TABLETMIN) {
    reviewContent.css('text-align', 'center');
  } else {
    reviewContent.css('text-align', 'left');
  }

  if (reviews > 0 && windowWidth >= SCREENSIZE.DESKTOPMIN) {
    var contentWidth = windowWidth < 1224 ? maxContentWidth : reviewContent.width() / 3;
    $('.WwxUI').css('justify-content', 'flex-start');
    $('.eHQNnv').css({
      width: contentWidth,
      textAlign: 'center'
    });
  }

  if (reviews > 0 && windowWidth < 1224) {
    reviewContent.css('flex-direction', 'column');
  }
}; // Function to trigger scroll events


window.addEventListener('scroll', function () {
  var scrollPosition = Math.floor(window.scrollY);
  var pageHeight = document.documentElement.scrollHeight;
  var pageTwentyFiveHeight = Math.floor(pageHeight * 0.25);
  var pageFiftyHeight = Math.floor(pageHeight * 0.5);

  if (scrollPosition >= pageTwentyFiveHeight && !scrollTwentyFiveTriggered) {
    $('body').trigger('event:scroll25');
    scrollTwentyFiveTriggered = true;
  } else if (scrollPosition >= pageFiftyHeight && !scrollFiftyTriggered) {
    $('body').trigger('event:scroll50');
    scrollFiftyTriggered = true;
  }
});
module.exports = {
  methods: {
    updateAddToCartEnableDisableOtherElements: updateAddToCartEnableDisableOtherElements,
    updateLoyaltyPoint: updateLoyaltyPoint
  },
  availability: base.availability,
  addToCart: base.addToCart,

  /* Fluid Customization */
  addCustomProductToCart: base.addCustomProductToCart,
  updateIDForSelector: function updateIDForSelector() {
    $('.image-detail-container #quantity-1').parents('.product-set-detail.product-detail').not('.container').each(function (ind, ele) {
      $(ele).find('#quantity-1').attr('id', $(ele).attr('data-pid') + '-' + $(ele).find('#quantity-1').attr('id'));
      $(ele).find('.select-size').attr('id', $(ele).attr('data-pid') + '-' + $(ele).find('.select-size').attr('id'));
      $(ele).find('.select-size input').each(function (i, elem) {
        var currentElementId = $(elem).attr('id');
        $(elem).attr('id', $(ele).attr('data-pid') + '-' + currentElementId);
        $(elem).siblings().attr('for', $(ele).attr('data-pid') + '-' + currentElementId);
      });
      $(ele).find('[data-bv-show="rating_summary"]').attr('id', $(ele).attr('data-pid') + '-' + $(ele).find('[data-bv-show="rating_summary"]').attr('id'));
      $(ele).find('[data-bv-show="rating_summary"] ul').removeAttr('id');
    });
  },
  updateAttributesAndDetails: function updateAttributesAndDetails() {
    $('body').on('product:statusUpdate', function (e, data) {
      var $productContainer = $('.product-detail[data-pid="' + data.id + '"]');
      $productContainer.find('.description-and-detail .product-attributes').empty().html(data.attributesHtml);

      if (data.shortDescription) {
        $productContainer.find('.description-and-detail .description').removeClass('hidden-xl-down');
        $productContainer.find('.description-and-detail .description .content').empty().html(data.shortDescription);
      } else {
        $productContainer.find('.description-and-detail .description').addClass('hidden-xl-down');
      }

      if (data.longDescription) {
        $productContainer.find('.description-and-detail .details').removeClass('hidden-xl-down');
        $productContainer.find('.description-and-detail .details .content').empty().html(data.longDescription);
      } else {
        $productContainer.find('.description-and-detail .details').addClass('hidden-xl-down');
      }
    });
  },
  showSpinner: function showSpinner() {
    $('body').on('click', '.add-to-cart', function () {
      if ($(this).hasClass('add-to-cart-label-js')) {
        $.spinner().start();
      } else {
        $(this).closest('.modal-content').spinner().start();
      }
    });
  },
  updateColorAttributeName: function updateColorAttributeName() {
    $('.color-swatch .swatch-circle').on('mouseover', function () {
      $(this).closest('.color-swatch').find('.display-color-name').html(this.title);
    }).on('mouseleave', function () {
      var colorName = $(this).closest('.color-attribute-value').find('.swatch-circle.selected').attr('title');
      $(this).closest('.attribute.color-swatch').find('.display-color-name').html(colorName);
    });
    $(document).on('focus', '.color-attribute', function () {
      var colorTitle = $(this).find('.swatch-circle').attr('title');
      $(this).closest('.color-swatch').find('.display-color-name').html(colorTitle);
    });
  },
  updateAttribute: function updateAttribute() {
    $('body').on('product:afterAttributeSelect', function (e, response) {
      $('.attribute.size .attribute-error').addClass('d-none');

      if ($('.product-detail>.bundle-items').length) {
        response.container.data('pid', response.data.product.id);
        response.container.find('.product-id').text(response.data.product.id);
      } else if ($('.product-set-detail').eq(0)) {
        response.container.data('pid', response.data.product.id);
        response.container.find('.product-id').text(response.data.product.id);
      } else {
        $('.product-id').text(response.data.product.id);
        $('.product-detail:not(".bundle-item")').data('pid', response.data.product.id);
      }

      if ($('.loyal-details-container').length > 0) {
        updateLoyaltyPoint();
      }

      var currentSize = $('.size-option input:checked');

      if (currentSize) {
        currentSize.focus();
      }
    });
  },
  updateAddToCart: function updateAddToCart() {
    $('body').on('product:updateAddToCart', function (e, response) {
      base.updateAddToCartCommon(response);

      if (!response.product.available || !response.product.readyToOrder) {
        $('button.add-to-cart', response.$productContainer).text(response.product.soldOutLabel.pdp);
        $('button.add-to-cart', response.$productContainer).attr('disabled', true);
        $('.quantity.selector', response.$productContainer).addClass('d-none');
      } else {
        var addToCartLabel = $('button.add-to-cart', response.$productContainer).data('primary-label');
        $('button.add-to-cart', response.$productContainer).html(addToCartLabel);
        $('button.add-to-cart', response.$productContainer).attr('disabled', !response.product.available);
        $('.quantity.selector', response.$productContainer).removeClass('d-none');
      }

      module.exports.methods.updateAddToCartEnableDisableOtherElements(false);
    });
  },
  updateAvailability: function updateAvailability() {
    $('body').on('product:updateAvailability', function (e, response) {
      $('div.availability', response.$productContainer).data('ready-to-order', response.product.readyToOrder).data('available', response.product.available);
      $('.availability-msg li', response.$productContainer).empty().html(response.product.availability.messages[0] ? '<div class="availability text-uppercase">' + response.product.availability.messages[0] + '</div>' : '');

      if ($('.global-availability').length) {
        var allAvailable = $('.product-availability').toArray().every(function (item) {
          return $(item).data('available');
        });
        var allReady = $('.product-availability').toArray().every(function (item) {
          return $(item).data('ready-to-order');
        });
        $('.global-availability').data('ready-to-order', allReady).data('available', allAvailable);
        $('.global-availability .availability-msg li').empty().html(allReady ? response.product.availability.messages[0] : response.resources.info_selectforstock);
      }

      if (response.product.loyaltyPoints > 0) {
        $('.loyal-point-js').attr('data-loyalty-point', response.product.loyaltyPoints);
      }
    });
  },
  copyProductLink: function copyProductLink() {
    $('body').on('click', '#fa-link', function () {
      event.preventDefault();
      var $temp = $('<input>');
      $('body').append($temp);
      $temp.val($('#shareUrl').val()).select();
      document.execCommand('copy');
      $temp.remove();
      $('.copy-link-message').attr('role', 'alert');
      $('.copy-link-message').removeClass('d-none');
      setTimeout(function () {
        $('.copy-link-message').addClass('d-none');
      }, 3000);
    });
  },
  checkForSRPorPLP: function checkForSRPorPLP() {
    if (localStorage.isNavigatedFromSearchresults === 'true') {
      $('.srp-breadcrumb').removeClass('d-none');
      $('.backtoSRP').attr('href', localStorage.Url);
    } else {
      $('.plp-breadcrumb').removeClass('d-none');
    }
  },
  localStorageClearPDP: function localStorageClearPDP() {
    $(document).on('click', '.backtoSRP', function () {
      localStorage.removeItem('isNavigatedFromSearchresults');
    });
  },
  stickyAddToCart: function stickyAddToCart() {
    if (window.outerWidth <= SCREENSIZE.DESKTOPMIN) {
      var $paymentCTA = $('.quantity-addtocart-grid-pdp .add-to-cart-container');
      var addToBagCTAHeight = $paymentCTA.find('.add-to-cart').outerHeight();
      var headerHeight = $('header').outerHeight();
      $(window).scroll(function () {
        var addToCartTop = $('.prices-add-to-cart-actions').offset().top + addToBagCTAHeight;
        var currentTopPos = $(window).scrollTop() + headerHeight - addToBagCTAHeight;

        if (currentTopPos > addToCartTop) {
          $paymentCTA.addClass('sticky-btn');
          $('body').addClass('stick-add-to-cart');
        } else {
          $paymentCTA.removeClass('sticky-btn');
          $('body').removeClass('stick-add-to-cart');
        }
      });
    }
  },
  bazaarVoice: function bazaarVoice() {
    if ($('#data-bv-show').length) {
      $('.product-ratings').each(base.observingBV);
    }
  },
  observingReviewContent: function observingReviewContent() {
    var target = $('.reviews');

    if (target.length) {
      var callback = function callback(mutationsList, observer) {
        // eslint-disable-next-line array-callback-return
        var matchedElement = mutationsList.find(function (m) {
          if (m.attributeName === 'class' && $(m.target).hasClass('bv-rnr__sc-11r39gb-1')) {
            reviewsPresent = true;
            observer.disconnect();
            return m.target;
          }
        });
        updateReviewsContent(matchedElement);
      };

      var observerIns = new MutationObserver(callback);
      observerIns.observe(target.get(0), {
        childList: true,
        subtree: true,
        attributeFilter: ['class']
      });
    }
  },
  shopThisLook: function shopThisLook() {
    $('.js-shop-this-look').not('.slick-initialized').slick({
      slidesToShow: 1,
      slidesToScroll: 1,
      accessibility: true
    });
  },
  monogramEngraveContainer: function monogramEngraveContainer() {
    var fluidPage = $('body').find('.container-fluid.product-detail');

    if (fluidPage.length > 0) {
      $('div#maincontent div.container').first().addClass('fluidMEContainer');
    } else {
      $('div#maincontent div.container').removeClass('fluidMEContainer');
    }
  },
  updateKorsVIP: function updateKorsVIP() {
    var loyaltyCustomer = $('body').find('.js-loyalty-customer');
    var authenticatedCustomer = $('.authenticated-user');
    var loyaltyContainer = $('.loyal-details-container');

    if (authenticatedCustomer.length === 0) {
      loyaltyContainer.find('.loyal-account-container').removeClass('d-none');
    } else if (authenticatedCustomer.length > 0 && loyaltyCustomer.length === 0) {
      var korsvipurl = $('.js-join-korsvip')[0].dataset.korsvipUrl;
      loyaltyContainer.find('.loyal-account-container').removeClass('d-none');
      loyaltyContainer.find('a.account-link').attr('href', korsvipurl);
    }
  },
  initialLoadPDP: function initialLoadPDP() {
    $(window).on('load', function () {
      // ToDo: Add trigger event for wishlist functionality
      var productDetails = $('.product-detail');
      var wishlistedProducts = $('.wishlistedItems').length > 0 ? $('.wishlistedItems').val().split(',') : [];

      if (productDetails.length === 1) {
        if (wishlistedProducts && wishlistedProducts.includes(productDetails.data('pid').toString())) {
          productDetails.find('.add-fav-heart').addClass('d-none');
          productDetails.find('.add-to-favorites').addClass('d-none');
          productDetails.find('.remove-fav-heart').removeClass('d-none');
          productDetails.find('.remove-from-favorites').removeClass('d-none');
        } else {
          productDetails.find('.add-fav-heart').removeClass('d-none');
          productDetails.find('.add-to-favorites').removeClass('d-none');
          productDetails.find('.remove-fav-heart').addClass('d-none');
          productDetails.find('.remove-from-favorites').addClass('d-none');
        }

        $('body').trigger('event:pdpVisit');
      }
    });
  },
  sizeBoxCalc: base.sizeBoxCalc,
  sizeChart: base.sizeChart(),
  focusChooseBonusProductModal: base.focusChooseBonusProductModal()
};

/***/ }),

/***/ "./cartridges/app_mk_storefront/cartridge/client/default/js/product/favorites.js":
/*!***************************************************************************************!*\
  !*** ./cartridges/app_mk_storefront/cartridge/client/default/js/product/favorites.js ***!
  \***************************************************************************************/
/***/ (function(module, __unused_webpack_exports, __webpack_require__) {

"use strict";


var clientSideUtil = __webpack_require__(/*! ../utilities/clientSideUtil */ "./cartridges/app_mk_storefront/cartridge/client/default/js/utilities/clientSideUtil.js");

var wishlisthelper = __webpack_require__(/*! ./wishlist */ "./cartridges/app_mk_storefront/cartridge/client/default/js/product/wishlist.js");

var isWishlistMobileEnabled = $('.right-nav').find('.wishlist-icon').hasClass('wishlist-icon-js');

var SCREENSIZE = (__webpack_require__(/*! ../utilities/constants */ "./cartridges/app_mk_storefront/cartridge/client/default/js/utilities/constants.js").SCREENSIZE);

var isMobile = $(window).width() <= SCREENSIZE.TABLETMAX;
/**
 * appends params to a url
 * @param {string} data - data returned from the server's ajax call
 * @param {Object} button - button that was clicked to add a product to the favorites
 */

function displayMessage(data) {
  $.spinner().stop();
  var status;
  var message = data.msg ? data.msg : data.productRemovedMsg;

  if (data.success) {
    status = 'alert-success';
  } else {
    status = 'alert-danger';
  }

  if ($('.add-to-wishlist-messages').length === 0) {
    $('body').append('<div class="add-to-wishlist-messages "></div>');
  }

  $('.add-to-wishlist-messages').empty().append('<div class="add-to-wishlist-alert text-center ' + status + '">' + message + '</div>');
}
/**
 * Show/hide favorite icons and buttons
 * @param {Object} productDetail - product detail container element
 * @param {Object} element - current fav button
 */


function toggleFavorites(productDetail, element) {
  if (productDetail) {
    var detailContainer = productDetail; // Check if set product

    var productSet = detailContainer.find('.product-set-detail.product-wrapper');

    if (productSet.length > 0) {
      detailContainer = productSet;
    }

    detailContainer.find('.btn-favorite').toggleClass('d-none');

    if ($(element).length && $(element).hasClass('btn-favorite')) {
      $(element).siblings('.btn-favorite').focus();
    }
  }
}
/**
 * Show/hide add to favorite buttons
 * @param {Object} isFavoriteProduct - is in favorites list
 * @param {element } productDetail - response object
 */


function updateFavorites(isFavoriteProduct, productDetail) {
  if (isFavoriteProduct !== undefined && productDetail) {
    productDetail.find('.btn-favorite').addClass('d-none');

    if (isFavoriteProduct) {
      productDetail.find('.remove-fav-heart').removeClass('d-none');
      productDetail.find('.remove-from-favorites').removeClass('d-none');
    } else {
      productDetail.find('.add-to-favorites').removeClass('d-none');
      productDetail.find('.add-fav-heart').removeClass('d-none');
    }
  }
}

module.exports = {
  addToFavorites: function addToFavorites() {
    $(document).on('click', '.add-to-favorites, .add-fav-heart', function (e) {
      e.preventDefault();
      var element = $(this);
      var pid = element.closest('.product-detail').attr('data-pid');
      var url = element.data('href');
      var optionId = element.closest('.product-detail').find('.product-option').attr('data-option-id');
      var optionVal = element.closest('.product-detail').find('.options-select option:selected').attr('data-value-id');
      var $targetPLPTile = $('.product-tile-show[data-pid=' + pid + ']');
      $('div').removeClass('active-favorites-ada-btn');
      $(this).closest('div').addClass('active-favorites-ada-btn');
      optionId = optionId || null;
      optionVal = optionVal || null;

      if (!url || !pid) {
        return;
      }

      $.spinner().start();
      $.ajax({
        url: url,
        type: 'post',
        dataType: 'json',
        data: {
          pid: pid,
          optionId: optionId,
          optionVal: optionVal
        },
        success: function success(data) {
          var isSuccess = true;

          if ($('.product-quickview.product-detail').length > 0) {
            clientSideUtil.floatToastMessage(data.msg, data.toastMessageDisplayTime, isSuccess);
          } // If favorited from te quickview on cart page, reload the page
          // TODO: create method to re-render the cart template


          if ($('.cart.cart-page').length) {
            location.reload();
          }

          $.spinner().stop();
          toggleFavorites(element.closest('.product-detail'), element);
          $('body').trigger('event:addProductToFavourites', data);
          $targetPLPTile.find('.wishlistTile.add-wish-list').addClass('d-none');
          $targetPLPTile.find('.wishlistTile.remove-from-wishlist').removeClass('d-none');
          wishlisthelper.updateHeaderHeartIcon(data.wishlistedItems);

          if (isWishlistMobileEnabled || !isMobile) {
            wishlisthelper.popupdisplay(true, {
              addWishlist: true,
              removeWishlist: false,
              toastTime: data.toastMessageDisplayTime
            });
            var timer = setTimeout(function () {
              $('.miniwishlist .popover').removeClass('show');
            }, data.miniFavouriteFlyOutTimeinMilliSec);
            $('.miniwishlist .popover').on('mouseenter', function () {
              clearTimeout(timer);
            });
          } else {
            clientSideUtil.floatToastMessage(data.msg, data.toastMessageDisplayTime, isSuccess);
          }
        },
        error: function error(err) {
          displayMessage(err, element);
        }
      });
      return false;
    });
  },
  removeFromFavorites: function removeFromFavorites() {
    $(document).on('click', '.remove-from-favorites, .remove-fav-heart', function (e) {
      e.preventDefault();
      var element = $(this);
      var pid = element.closest('.product-detail').data('pid');
      var url = element.data('href');
      var $targetPLPTile = $('.product-tile-show[data-pid=' + pid + ']');
      url = url + '?pid=' + pid;

      if (!url || !pid) {
        return;
      }

      $.spinner().start();
      $.ajax({
        url: url,
        type: 'get',
        dataType: 'json',
        data: {},
        success: function success(data) {
          var isSuccess = true;

          if ($('.product-quickview.product-detail').length > 0) {
            clientSideUtil.floatToastMessage(data.productRemovedMsg, data.toastMessageDisplayTime, isSuccess);
          }

          $.spinner().stop();
          toggleFavorites(element.closest('.product-detail'), element);
          $('body').trigger('event:removeProductFromFavourites', data);
          $targetPLPTile.find('.wishlistTile.remove-from-wishlist').addClass('d-none');
          $targetPLPTile.find('.wishlistTile.add-wish-list').removeClass('d-none');
          wishlisthelper.updateHeaderHeartIcon(data.wishlistedItems);

          if (isWishlistMobileEnabled || !isMobile) {
            wishlisthelper.popupdisplay(true, {
              addWishlist: false,
              removeWishlist: true,
              toastTime: data.toastMessageDisplayTime
            });
            var timer = setTimeout(function () {
              $('.miniwishlist .popover').removeClass('show');
            }, data.miniFavouriteFlyOutTimeinMilliSec);
            $('.miniwishlist .popover').on('mouseenter', function () {
              clearTimeout(timer);
            });
          } else {
            clientSideUtil.floatToastMessage(data.productRemovedMsg, data.toastMessageDisplayTime, isSuccess);
          }
        },
        error: function error(err) {
          displayMessage(err, element);
        }
      });
      return false;
    });
  },
  toggleFavorites: toggleFavorites,
  updateFavorites: updateFavorites
};

/***/ }),

/***/ "./cartridges/app_mk_storefront/cartridge/client/default/js/product/localizeSizeLabels.js":
/*!************************************************************************************************!*\
  !*** ./cartridges/app_mk_storefront/cartridge/client/default/js/product/localizeSizeLabels.js ***!
  \************************************************************************************************/
/***/ (function(module) {

"use strict";


module.exports = {
  localizeSizeLabels: function localizeSizeLabels() {
    var $inputWrappers = $('[data-sizecountry]');
    $inputWrappers.each(function (index, element) {
      var locale = $(element).parents('[role="tabpanel"]').data('locale');
      var sizeData = $(element).data('sizecountry');

      if (sizeData && locale && sizeData[locale]) {
        var localizedLabel = sizeData[locale]; // Update visible label

        var $label = $(element).find('label');
        $label.text(localizedLabel); // Update aria label
        // Note: this updates the aria label with the localized size label but does NOT localize the rest of the aria label.
        // (For example: in "Size S in stock", only the "S" will change.)

        var isInStock = $(element).data('isinstock');
        var ariaLabelBase = isInStock ? $(element).data('ariaLabelInStock') : $(element).data('ariaLabelOutOfStock');
        var localizedAriaLabel = ariaLabelBase.replace('{0}', localizedLabel);
        var $input = $(element).find('input');
        $input.attr('aria-label', localizedAriaLabel);
      }
    }); // Find tabs and tabPanels

    var $tabList = $('.size-locale-tabs');
    var $tabs = $tabList.find("[role='tab']");
    var tabs = [];
    var tabPanels = [];
    $tabs.each(function (index, tab) {
      tabs.push($(tab));
      var tabPanelId = $(tab).attr('aria-controls');
      tabPanels.push($("#".concat(tabPanelId)));
    }); // Add click handler

    $tabs.each(function (index, tab) {
      $(tab).on('click', function (event) {
        var $selectedTab = $(event.target);
        var $selectedTabPanel = $("#".concat($selectedTab.attr('aria-controls'))); // "Unselect" all tabs

        $tabs.attr('aria-selected', false).removeClass('selected'); // Set this tab as selected

        $selectedTab.attr('aria-selected', true).addClass('selected'); // Hide all tab panels

        tabPanels.forEach(function (tabPanel) {
          $(tabPanel).attr('hidden', true);
          $(tabPanel).attr('aria-expanded', false);
        }); // Show the selected panel

        $selectedTabPanel.attr('aria-expanded', true);
        $selectedTabPanel.removeAttr('hidden');
      });
    }); // Add arrow navigation

    var tabFocus = 0;
    $tabList.on('keydown', function (event) {
      if (event.key === 'ArrowRight' || event.key === 'ArrowLeft') {
        // "Unselect" selected tab
        tabs[tabFocus].attr('tabindex', -1);

        if (event.key === 'ArrowRight') {
          // Move right
          tabFocus++; // If we're at the end, go to the start

          if (tabFocus >= tabs.length) {
            tabFocus = 0;
          }
        } else if (event.key === 'ArrowLeft') {
          // Move left
          tabFocus--; // If we're at the start, move to the end

          if (tabFocus < 0) {
            tabFocus = tabs.length - 1;
          }
        } // Select new tab


        tabs[tabFocus].attr('tabindex', 0);
        tabs[tabFocus].focus();
      }
    });
  }
};

/***/ }),

/***/ "./cartridges/app_mk_storefront/cartridge/client/default/js/product/productImages.js":
/*!*******************************************************************************************!*\
  !*** ./cartridges/app_mk_storefront/cartridge/client/default/js/product/productImages.js ***!
  \*******************************************************************************************/
/***/ (function(module, __unused_webpack_exports, __webpack_require__) {

"use strict";


var SCREENSIZE = (__webpack_require__(/*! ../utilities/constants */ "./cartridges/app_mk_storefront/cartridge/client/default/js/utilities/constants.js").SCREENSIZE);

var isDesktop = $(window).width() > SCREENSIZE.DESKTOPMIN;
var isFluid = window.configureParams ? 'true' : 'false';

var imageZoom = __webpack_require__(/*! ../thirdParty/zoom */ "./cartridges/app_mk_storefront/cartridge/client/default/js/thirdParty/zoom.js");

var mediaZoom = __webpack_require__(/*! ../thirdParty/mediaZoom */ "./cartridges/app_mk_storefront/cartridge/client/default/js/thirdParty/mediaZoom.js");

var debounce = __webpack_require__(/*! lodash/debounce */ "./node_modules/lodash/debounce.js");

var isQuickView = function isQuickView() {
  return $('body').find('#quickViewModal').length > 0;
};

var isEditModal = function isEditModal() {
  return $('body').find('#editWishlistProductModal').length > 0;
};

var isMobile = $(window).width() <= SCREENSIZE.DESKTOPMIN;
var arr = [];
var productDetailsPosTop;
var imageListPosTop;
var initialImageWidth = false; // const $pdpContainer = $('.image-detail-container');

var $imageListContainer = $('.js-large-images');
var $imageList = $('.js-large-images-list');
var $thumbnail = $('.js-thumbnail-images');
var $productContent = $('.js-product-detail');
var $pdpStickyStopper = $('.pdp-sticky-stopper'); // const imageListCount = $imageList.children('li').length;

var $thumbnailNextBtn = $('.js-next-btn');
var $thumbnailPrevBtn = $('.js-prev-btn');
/**
 * Smooth scroll to product images on clicking thumbnail
 * @param {$thumbnailID} tid - passing thumnail ID
 *
 */

function productSmoothScroll(tid) {
  var $largeImageID = $('.large-' + tid);
  var $headerHeight = $('header').height();
  var $position = $largeImageID.offset().top - $headerHeight;
  $('html, body').animate({
    scrollTop: $position
  }, 500);
}
/**
 * Get image ID on click
 *
 */


function getImageID() {
  $('.js-thumbnail-btn').on('click.desktop', function () {
    var $thumbnailID = $(this).data('thumbnail');

    if (!$(this).hasClass('active')) {
      productSmoothScroll($thumbnailID);
    }
  });
}
/**
 * Navigate to previous image when clicking prev thumbnail
 *
 */


function previousThumbnail() {
  $('.js-prev-btn').on('click.desktop', function () {
    var $currentThumb = $('.js-thumbnail-btn.active');
    var $previousThumb = $currentThumb.prev('.js-thumbnail-btn');
    var $thumbID = $previousThumb.data('thumbnail');

    if ($previousThumb.length !== 0) {
      productSmoothScroll($thumbID);
    }
  });
}
/**
 * Navigate to next image when clicking prev thumbnail
 *
 */


function nextThumbnail() {
  $('.js-next-btn').on('click.desktop', function () {
    var $currentThumb = $('.js-thumbnail-btn.active');
    var $nextThumb = $currentThumb.next('.js-thumbnail-btn');
    var $thumbID = $nextThumb.data('thumbnail');

    if ($nextThumb.length !== 0) {
      productSmoothScroll($thumbID);
    }
  });
}
/**
 * Adding class active to first thumbnail on default
 *
 */


function defaultActive() {
  $('.js-thumbnail-btn:eq(0)').addClass('active');
}
/**
 * Resets zoom to 0%
 *
 */


function resetImgZoom() {
  var $zoomedContainers = $('.zoom');

  if ($zoomedContainers.length) {
    $zoomedContainers.each(function () {
      var $zoomedImg = $(this).children('img');
      $zoomedImg.attr({
        'data-scale': 1,
        'data-translate-x': 0,
        'data-translate-y': 0
      }).removeAttr('style');
      $zoomedContainers.removeClass('zoom-active');
    });
  }
}
/**
 * Sets Thumbnail to match active slide
 *  @param {string} nextSlide - Slider Slider next slide index
 *
 */


function setActiveThumbnail(nextSlide) {
  var deviceWidth = window.outerWidth;
  var $thumbnailContainer = $('.thumbnail-images');
  var $targetThumbnail = $(".thumbnail-".concat(nextSlide));
  var targetThumbnailPos = $targetThumbnail.offset().left;
  $('.js-thumbnail-btn').removeClass('active');
  $targetThumbnail.addClass('active');

  if (targetThumbnailPos < 0) {
    $thumbnailContainer.scrollLeft(0);
  } else if (targetThumbnailPos + $targetThumbnail.outerWidth() > deviceWidth) {
    $thumbnailContainer.scrollLeft(targetThumbnailPos);
  }
}
/**
 * When clicking on a mobile thumbnail, navigate slider
 *
 */


function mobileThumbnailClick() {
  $('.js-thumbnail-btn').on('click.mobile', function () {
    var targetSlide = $(this).index();
    $('.js-large-images-list').slick('slickGoTo', targetSlide);
  });
}
/**
 * Setup for image zoom functionality on mobile
 */


function imageZoomConfig() {
  // eslint-disable-next-line no-undef
  imageZoom.zoom({
    active: 'zoom-active',
    transition: 'zoom-transition',
    visible: 'visible',
    zoom: 'zoom' // Image container class

  }, {
    scaleDefault: 2.5,
    // Used on doubleclick, doubletap and resize
    scaleMax: 4,
    // Maximum zoom
    scaleMin: 1,
    // Minimum zoom
    transitionDuration: 200,
    // This should correspond with zoom-transition transition duration
    doubleclickDelay: 300,
    // Delay between clicks - used when scripts decides if user performed doubleclick or not
    slickCarousel: 'js-large-images-list',
    // Slick Carousel parent element
    isMobile: isMobile,
    // source is mobile or not
    hideThumbnail: $('.js-hide-thumbnail-images-wrapper').length > 0 // toggled on/off show thumbnail config

  }, function (container, zoomActive) {
    var $zoomImg = $(container).find('img');
    var hiResImg = $zoomImg.data('zoom-image');

    if (hiResImg) {
      $zoomImg.attr('src', hiResImg);
    }

    $('.js-large-images-list').not('.slick-initialized').slick('slickSetOption', {
      touchMove: !zoomActive,
      swipe: !zoomActive
    });
  });
}
/**
 * Setup mobile image carousel and zoom functionality
 *
 */


function mobileZoomImagesInt() {
  var productCarousel = '.js-product-carousel';
  var productSlidesCount = $(productCarousel).data('slides-to-show');
  var productArrows = $(productCarousel).data('arrows');
  var productDots = true;
  var $mobileImagesList = $('.js-large-images-list');
  var isThumbnailEnabled = $('.thumbnail-wrapper').data('is-thumbnail-visible'); // Rearrange the thumbnails to be after the mobile carousel

  $('.thumbnail-wrapper').insertAfter('.large-images-wrapper').removeClass('hidden-md-down');
  $('.thumbnails-shimmer').remove();
  $thumbnailNextBtn.remove();
  $thumbnailPrevBtn.remove();
  $mobileImagesList.on('init.mobile', function () {
    mobileThumbnailClick();
  });

  if ($('.hide-dot-indicator').length > 0) {
    productDots = false;
  }

  if (isThumbnailEnabled) {
    productArrows = $(productCarousel).data('arrows');
    productDots = false;
  }

  $($mobileImagesList).not('.slick-initialized').slick({
    slidesToShow: productSlidesCount,
    slidesToScroll: 1,
    accessibility: true,
    arrows: productArrows,
    dots: productDots,
    swipe: true
  });
  $imageList.on('beforeChange.mobile', function (event, slick, currentSlide, nextSlide) {
    if (currentSlide === nextSlide) {
      return false;
    }

    resetImgZoom();
    setActiveThumbnail(nextSlide);
  });
  imageZoomConfig();
}
/**
 * on page scroll or accordion click switch the thumbnail accordingly
 *
 */


function switchThumbnail() {
  var $windowScroll = $(window).scrollTop();
  var headerHeight = $('header').outerHeight();
  var $length = $('.js-large-images li').length; // Set the active thumbnail to the main image in view

  for (var j = 0; j <= $length - 1; j++) {
    // determining which image has the scollbar crossed
    arr[j] = $('.js-large-images li:eq(' + j + ')').offset().top - headerHeight - 2;

    if ($windowScroll > arr[j]) {
      $('.js-thumbnail-btn').removeClass('active');
      $('.thumbnail-' + j).addClass('active');
    }
  }
}
/**
 * On scroll, keeps the left side thumbnail bar stick until bottom of images
 *
 */


function stickyThumbnail() {
  var thumbnailYPos = $thumbnail.length > 0 ? $thumbnail.offset().top : 0;
  var thumbnailHeight = $thumbnail.length > 0 ? $thumbnail.outerHeight() : 0;
  $(window).on('scroll.desktop', function () {
    var stickyStopTopOffset = $pdpStickyStopper.offset().top;
    var $windowScroll = $(window).scrollTop();
    var headerHeight = $('header').outerHeight();

    if ($windowScroll + thumbnailHeight + headerHeight + 50 >= stickyStopTopOffset) {
      $thumbnail.removeClass('sticky');
      $thumbnail.addClass('bottom');
    } else if (thumbnailYPos - headerHeight <= $windowScroll) {
      $thumbnail.addClass('sticky');
      $thumbnail.removeClass('bottom');
    }

    switchThumbnail();
  });
}
/**
 * @function resetProductDetailsLeftMargin
 * @description Sets explicit left margin on product details element. Helper function to ensure left/right alignment remains consistent while scrolling.
 */


function resetProductDetailsLeftMargin() {
  $productContent.css({
    marginLeft: ''
  });
  $productContent.css({
    marginLeft: $productContent.css('margin-left')
  });
}
/**
 * Sticky Product Details
 *
 */


function stickyProductDetails() {
  var stickyStopTopOffset = $pdpStickyStopper.offset().top;
  var lastScrollTop = 0; // Padding to offset the sticky scrolling element from the top of the screen.

  var visualPadding = 20; // Set fixed left margin to ensure left/right alignment remains consistent while scrolling

  resetProductDetailsLeftMargin();
  $(window).on('resize.desktop', debounce(function () {
    resetProductDetailsLeftMargin();
  }, 0));
  $(window).on('scroll.desktop', debounce(function () {
    var productImageContainerHeight = $imageList.outerHeight();
    var productDetailsHeight = $productContent.outerHeight();
    var productDetailsOffsetTop = $productContent.offset().top;
    var $windowScroll = $(window).scrollTop();
    var headerHeight = $('header').outerHeight();
    var $windowHeight = $(window).scrollTop() + window.innerHeight;
    var lastOffset = $productContent.offset().top + ($productContent.height() - 10); // adding min section shown while fixed scrolling (buffer value - 200px)

    var endpoint = $imageList.offset().top + $imageList.height();
    var productcontentTotal = $productContent.height() + $('.product-detail-container').offset().top;
    var scrollDirection = '';
    var currentScroll = $(this).scrollTop();

    if (currentScroll > lastScrollTop) {
      scrollDirection = 'down';
    } else {
      scrollDirection = 'up';
    }

    lastScrollTop = currentScroll;

    if (productcontentTotal > window.innerHeight) {
      if (scrollDirection === 'down' && productImageContainerHeight > productDetailsHeight) {
        $imageListContainer.removeClass('bottom');

        if ($windowHeight > lastOffset && $windowHeight < endpoint && window.innerHeight < stickyStopTopOffset) {
          // become sticky on scroll
          productDetailsPosTop = $productContent.offset().top - headerHeight - 20;
          $productContent.removeClass('sticky');
          $productContent.css({
            position: 'fixed',
            top: '',
            bottom: 0,
            width: '100%'
          });
        } else if ($windowHeight > stickyStopTopOffset) {
          $productContent.css({
            position: 'absolute',
            top: '',
            bottom: 0
          });
        } else if ($windowHeight > endpoint && window.innerHeight < stickyStopTopOffset) {
          // Stick to the bottom
          $productContent.removeClass('sticky');
          $productContent.css({
            position: 'absolute',
            top: 'auto',
            bottom: 0
          });
        } else {
          $productContent.removeClass('sticky');
          $productContent.css({
            position: '',
            top: '',
            bottom: ''
          });
        }
      } else if (scrollDirection === 'up' && productImageContainerHeight > productDetailsHeight && window.innerHeight < stickyStopTopOffset) {
        // Remain in place so user can scroll up
        $productContent.removeClass('sticky');

        if ($windowHeight > endpoint) {
          $productContent.css({
            position: 'absolute',
            top: '',
            bottom: 0
          });
        } else {
          $productContent.css({
            position: 'absolute',
            top: productDetailsPosTop,
            bottom: ''
          });
        }

        if ($windowScroll === 0) {
          $productContent.removeClass('sticky');
          $productContent.css({
            position: 'initial',
            top: '',
            bottom: ''
          });
        } else if ($windowScroll + 10 < productDetailsOffsetTop - headerHeight && window.innerHeight < stickyStopTopOffset) {
          // Re-stick and stay stuck while scrolling up
          $productContent.addClass('sticky');
          $productContent.css({
            position: '',
            top: headerHeight + visualPadding,
            bottom: ''
          });
        }
      }
    } else {
      $productContent.addClass('sticky');
      $productContent.css({
        position: '',
        top: headerHeight + visualPadding,
        bottom: ''
      });
    }
  }, 0));
}
/**
 * Sticky Desktop Main Image
 *
 */


function stickyMainProductImage() {
  // let stickyStopTopOffset = $pdpStickyStopper.offset().top;
  // let imageListYPos = $imageListContainer.offset().top;
  var $windowHeight = $(window).scrollTop() + window.innerHeight;
  var endpoint = $productContent.offset().top + $productContent.height();
  var productDetailsHeight = $productContent.outerHeight();
  var productImageContainerHeight = $imageList.outerHeight();
  var headerHeight = $('header').outerHeight();
  var zoomOutValue = window.innerHeight - headerHeight - $('.js-large-images-list li').height();
  var lastOffset = $imageList.height() + ($imageList.offset().top - 10) + (zoomOutValue >= 1 ? zoomOutValue : 0);
  var imageListTotal = $imageList.height() + $('.image-detail-container').offset().top;
  $imageListContainer.css({
    position: '',
    top: '',
    bottom: ''
  });

  if (imageListTotal > window.innerHeight) {
    if ($windowHeight > lastOffset && $windowHeight < endpoint && productImageContainerHeight < productDetailsHeight) {
      $imageListContainer.removeClass('top').addClass('sticky');

      if (zoomOutValue >= 1) {
        $imageListContainer.css('bottom', zoomOutValue);
      }

      imageListPosTop = $imageListContainer.offset().top - headerHeight - 20;
    } else if ($windowHeight > endpoint && productImageContainerHeight < productDetailsHeight) {
      $imageListContainer.removeClass('top').removeClass('sticky').addClass('bottom');
      $imageListContainer.css('bottom', '');
      imageListPosTop = $imageListContainer.offset().top - headerHeight - 20;
    } else {
      $imageListContainer.removeClass('sticky').removeClass('bottom').removeClass('top');
      $imageListContainer.css('bottom', '');
      imageListPosTop = $imageListContainer.offset().top - headerHeight - 20;
    }
  } else if (productImageContainerHeight < productDetailsHeight) {
    $imageListContainer.removeClass('sticky').removeClass('bottom').addClass('top');
    $imageListContainer.css('bottom', '');
  }
}
/**
 * Sets large image container width
 * @param {string} minDesktopWidth - minimum desktop width
 * @param {string} imgWidth - width of large image
 */


function initImageWidth(minDesktopWidth, imgWidth) {
  if (minDesktopWidth) {
    $imageListContainer.css({
      width: imgWidth,
      'min-width': imgWidth
    });
    $('.large-images-container').css({
      width: imgWidth,
      'min-width': imgWidth
    });
  }

  $imageListContainer.css({
    width: $imageListContainer.outerWidth(),
    'min-width': $imageListContainer.outerWidth()
  });
}
/**
 * @function resetImageListContainerWidth
 * @description Sets explicit width on image list container element. Helper function to ensure width remains consistent while scrolling.
 */


function resetImageListContainerWidth() {
  var minDesktop = isDesktop && $(window).width() < 1200;
  var imageWidth;

  if (!initialImageWidth) {
    initialImageWidth = true; // wait until page load to set image container width

    $(window).on('load', function () {
      imageWidth = $('.large-images img').width();
      initImageWidth(minDesktop, imageWidth);
    });
  } else {
    imageWidth = $('.large-images img').width();
    initImageWidth(minDesktop, imageWidth);
  }
}
/**
 * Sticky Desktop Main Image
 *
 */


function stickyMainProductImageHandler() {
  var lastScrollTop = 0;
  resetImageListContainerWidth();
  $(window).on('resize', debounce(function () {
    $imageListContainer.css({
      width: '',
      'min-width': ''
    });
    $('.large-images-container').css({
      width: '',
      'min-width': ''
    });
    resetImageListContainerWidth();
  }, 0));
  $(window).on('scroll.desktop', function () {
    var stickyStopTopOffset = $pdpStickyStopper.offset().top;
    var productDetailsHeight = $productContent.outerHeight();
    var productImageContainerHeight = $imageList.outerHeight();
    var imageListYPos = $imageListContainer.offset().top;
    var $windowScroll = $(window).scrollTop();
    var headerHeight = $('header').outerHeight();
    var scrollDirection = '';
    var currentScroll = $(this).scrollTop();

    if (currentScroll > lastScrollTop) {
      scrollDirection = 'down';
    } else {
      scrollDirection = 'up';
    }

    lastScrollTop = currentScroll;

    if (scrollDirection === 'down') {
      stickyMainProductImage();
    } else if (scrollDirection === 'up') {
      // Re-stick and stay stuck while scrolling up
      if (productImageContainerHeight < productDetailsHeight && window.innerHeight + $windowScroll < stickyStopTopOffset) {
        $imageListContainer.removeClass('sticky').removeClass('bottom').removeClass('top');
        $imageListContainer.css({
          position: 'absolute',
          top: imageListPosTop,
          bottom: 'auto'
        });
      }

      if (imageListYPos - headerHeight > $windowScroll && $windowScroll > $productContent.offset().top - headerHeight && productImageContainerHeight < productDetailsHeight) {
        $imageListContainer.removeClass('bottom').addClass('top');
        $imageListContainer.css({
          position: '',
          top: '',
          bottom: ''
        });
      } else if ($productContent.offset().top - headerHeight > $windowScroll && productImageContainerHeight < productDetailsHeight) {
        $imageListContainer.removeClass('bottom').removeClass('top');
        $imageListContainer.css({
          position: '',
          top: '',
          bottom: ''
        });
      }
    }
  });
}
/**
 * on accordion click retain sticky behavior only for desktop
 *
 */


function onAccordionClick() {
  $(window).on('collapsible:toggle.desktop', function (e, collapsibleEl) {
    // Product Details Column
    var $windowScroll = $(window).scrollTop();
    var headerHeight = $('header').outerHeight();
    var productDetailsHeight = $productContent.outerHeight();
    var stickyStopTopOffset = $pdpStickyStopper.offset().top;
    var productDetailsOffsetTop = $productContent.offset().top;
    var productImageContainerHeight = $imageList.outerHeight(); // const imageEndPoint = $imageList.height() + $imageList.offset().top;

    var productcontentTotal = $productContent.height() + $productContent.offset().top;
    var $windowHeight = $(window).scrollTop() + window.innerHeight;
    var visualPadding = 20; // Listen to the collapsibleItem.js custom event to check if details or design section is opened
    // if a different collapsible item is toggled, exit the function instead

    var collapsibleToggle = false;

    if ($(collapsibleEl).length && $(collapsibleEl).hasClass('pdp-design-details')) {
      collapsibleToggle = true;
    } else if ($(collapsibleEl).length && !$(collapsibleEl).hasClass('pdp-design-details')) {
      return false;
    }

    if (collapsibleToggle) {
      if ($windowHeight > stickyStopTopOffset) {
        if (productImageContainerHeight < productDetailsHeight) {
          $imageListContainer.removeClass('sticky').addClass('bottom');
          $imageListContainer.css({
            position: '',
            top: '',
            bottom: ''
          });
        }
      }

      if (productImageContainerHeight < productDetailsHeight) {
        $imageListContainer.removeClass('bottom').addClass('sticky');
        $productContent.removeClass('sticky');
        $productContent.css({
          position: 'static',
          top: 0,
          bottom: 'auto'
        });
        $imageListContainer.css({
          position: '',
          top: '',
          bottom: ''
        });

        if ($windowHeight > productcontentTotal) {
          $imageListContainer.removeClass('sticky').addClass('bottom');
        }
      } else {
        $imageListContainer.removeClass('bottom').removeClass('top');
        $productContent.addClass('sticky');
        $productContent.css({
          position: '',
          top: '0'
        });
        productDetailsPosTop = $productContent.offset().top - headerHeight - 20;
        $imageListContainer.css({
          position: '',
          top: '',
          bottom: ''
        });
      }

      if ($windowScroll + 10 < productDetailsOffsetTop - headerHeight && productImageContainerHeight > productDetailsHeight) {
        // Re-stickto top if product detail height allows to see the whole sidebar
        $productContent.addClass('sticky');
        $productContent.css({
          position: '',
          top: headerHeight + visualPadding,
          bottom: ''
        });
      }

      stickyMainProductImage();
    }

    switchThumbnail();
  });
}
/**
 * on send by dropdown change retain sticky behavior only for desktop
 *
 */


function onSendByTypeChange() {
  $('body').on('change.desktop', '#gctype', function () {
    var $windowScroll = $(window).scrollTop();
    var headerHeight = $('header').outerHeight();
    var productDetailsHeight = $productContent.outerHeight();
    var stickyStopTopOffset = $pdpStickyStopper.offset().top;
    var productDetailsOffsetTop = $productContent.offset().top;
    var productImageContainerHeight = $imageList.outerHeight();
    var productcontentTotal = $productContent.height() + $productContent.offset().top;
    var $windowHeight = $(window).scrollTop() + window.innerHeight;
    var visualPadding = 20;
    var sendByChange = $('.js-gctype option:selected').data('gctype');

    if (sendByChange === 'virtual') {
      if ($windowHeight > stickyStopTopOffset) {
        if (productImageContainerHeight < productDetailsHeight) {
          $imageListContainer.removeClass('sticky').addClass('bottom');
          $imageListContainer.css({
            position: '',
            top: '',
            bottom: ''
          });
        }
      }

      if (productImageContainerHeight < productDetailsHeight) {
        $imageListContainer.removeClass('bottom').addClass('sticky');
        $productContent.removeClass('sticky');
        $productContent.css({
          position: 'static',
          top: 0,
          bottom: 'auto'
        });
        $imageListContainer.css({
          position: '',
          top: '',
          bottom: ''
        });

        if ($windowHeight > productcontentTotal) {
          $imageListContainer.removeClass('sticky').addClass('bottom');
        }
      } else {
        $imageListContainer.removeClass('bottom').removeClass('top');
        $productContent.addClass('sticky');
        $productContent.css({
          position: '',
          top: '0'
        });
        productDetailsPosTop = $productContent.offset().top - headerHeight - 20;
        $imageListContainer.css({
          position: '',
          top: '',
          bottom: ''
        });
      }

      if ($windowScroll + 10 < productDetailsOffsetTop - headerHeight && productImageContainerHeight > productDetailsHeight) {
        // Re-stickto top if product detail height allows to see the whole sidebar
        $productContent.addClass('sticky');
        $productContent.css({
          position: '',
          top: headerHeight + visualPadding,
          bottom: ''
        });
      }

      stickyMainProductImage();
    }

    switchThumbnail();
  });
}
/**
* media zoom Image - Only for Desktop
*/


function initializingMediaZoom() {
  $('.zoom-image').ezPlus({
    zoomType: 'inner',
    zoomWindowFadeIn: 200,
    zoomWindowFadeOut: 200
  });
}

module.exports = {
  setupPDPImages: function setupPDPImages() {
    if (!isQuickView() && $(window).width() > SCREENSIZE.DESKTOPMIN && isFluid !== 'true' && !isEditModal() && $thumbnail.length > 0) {
      getImageID();
      previousThumbnail();
      nextThumbnail();
      stickyMainProductImageHandler();
      stickyProductDetails();
      stickyThumbnail();
      defaultActive();
      onAccordionClick();
      onSendByTypeChange();
      switchThumbnail();
    } else if ($(window).width() <= SCREENSIZE.DESKTOPMIN && isFluid !== 'true') {
      defaultActive();
      mobileZoomImagesInt();
    }
  },
  setupMediaZoom: function setupMediaZoom() {
    if (isDesktop && isFluid !== 'true') {
      mediaZoom.productMediaZoom();
      initializingMediaZoom();
    }
  },
  landscapeViewResize: function landscapeViewResize() {
    $(window).on('resize', function () {
      if ($(window).width() > SCREENSIZE.DESKTOPMIN) {
        $('.zoomContainer').remove();
        $productContent.css({
          top: 0
        });
        $('.js-thumbnail-btn').off('.mobile');
        $imageList.off('.mobile');

        if ($imageList.hasClass('slick-initialized')) {
          $imageList.slick('unslick');
        }

        $('.thumbnail-wrapper').prependTo('.images-wrapper').addClass('hidden-md-down');
        $thumbnailNextBtn.appendTo('.thumbnail-images');
        $thumbnailPrevBtn.prependTo('.thumbnail-images');
        getImageID();
        previousThumbnail();
        nextThumbnail();
        stickyMainProductImageHandler();
        stickyProductDetails();
        stickyThumbnail();
        onAccordionClick();
        onSendByTypeChange();
        switchThumbnail();
      } else if ($(window).width() <= SCREENSIZE.DESKTOPMIN) {
        var detail = __webpack_require__(/*! ./detail */ "./cartridges/app_mk_storefront/cartridge/client/default/js/product/detail.js");

        detail.stickyAddToCart();
        $('.zoomContainer').remove();
        $(window).off('.desktop');
        $('.js-thumbnail-btn').off('.desktop');
        $('.product-detail-content').css({
          position: 'sticky'
        });
        $thumbnail.css({
          position: 'sticky'
        });
        $('.large-images-wrapper').removeClass('bottom');
        mobileZoomImagesInt();
        $('.js-thumbnail-btn').each(function (index, btn) {
          var jqBtn = $(btn);

          if ($(jqBtn).hasClass('active') && index !== 0) {
            $imageList.slick('slickGoTo', index);
          }
        });
        $imageListContainer.css({
          width: '',
          'min-width': ''
        });
        imageZoomConfig();
      }
    });
  }
};

/***/ }),

/***/ "./cartridges/app_mk_storefront/cartridge/client/default/js/product/productSet.js":
/*!****************************************************************************************!*\
  !*** ./cartridges/app_mk_storefront/cartridge/client/default/js/product/productSet.js ***!
  \****************************************************************************************/
/***/ (function(module, __unused_webpack_exports, __webpack_require__) {

"use strict";


var SCREENSIZE = (__webpack_require__(/*! ../utilities/constants */ "./cartridges/app_mk_storefront/cartridge/client/default/js/utilities/constants.js").SCREENSIZE);

var isDesktop = $(window).width() >= SCREENSIZE.DESKTOPMIN;
var isTabletOrBelow = $(window).width() < SCREENSIZE.DESKTOPMIN;

var imageZoom = __webpack_require__(/*! ../thirdParty/zoom */ "./cartridges/app_mk_storefront/cartridge/client/default/js/thirdParty/zoom.js");

var mediaZoom = __webpack_require__(/*! ../thirdParty/mediaZoom */ "./cartridges/app_mk_storefront/cartridge/client/default/js/thirdParty/mediaZoom.js");

var $imageList = $('.js-large-images-list');
/**
* media zoom Image - Only for Desktop
*/

function initializingMediaZoom() {
  $('.zoom-image').ezPlus({
    zoomType: 'inner',
    zoomWindowFadeIn: 200,
    zoomWindowFadeOut: 200
  });
}
/**
 * assign thumbnail ID to Large image ID
 * @param {$thumbnailID} tid - passing thumnail ID
 * @param {button} elem - passing the button that clicked
 */


function assignImageID(tid, elem) {
  var largeId = elem.closest('.product-set-detail').find('.large-' + tid);
  elem.closest('.product-set-detail').find('.js-large-images-list li').addClass('d-none');
  largeId.removeClass('d-none');
}
/**
 * appending thumbnail image to large image on click
 */


function imageAppend() {
  $('body').on('click.appendImage', '.js-thumbnail-btn', function () {
    var thumbId = $(this).data('thumbnail');
    $(this).closest('.product-set-detail').find('.js-thumbnail-btn').removeClass('active');
    $(this).addClass('active');
    assignImageID(thumbId, $(this));
    $('.zoomContainer').remove();
    initializingMediaZoom();
  });
  $('body').on('click.appendImage', '.js-prev-btn', function () {
    var $currentThumb = $(this).closest('.product-set-detail').find('.js-thumbnail-btn.active');
    var $previousThumb = $currentThumb.prev('.js-thumbnail-btn');

    if ($previousThumb.length !== 0) {
      $currentThumb.removeClass('active');
      $previousThumb.addClass('active');
      var thumbId = $previousThumb.data('thumbnail');
      assignImageID(thumbId, $(this));
      $('.zoomContainer').remove();
      initializingMediaZoom();
    }
  });
  $('body').on('click.appendImage', '.js-next-btn', function () {
    var $currentThumb = $(this).closest('.product-set-detail').find('.js-thumbnail-btn.active');
    var $nextThumb = $currentThumb.next('.js-thumbnail-btn');

    if ($nextThumb.length !== 0) {
      $currentThumb.removeClass('active');
      $nextThumb.addClass('active');
      var thumbId = $nextThumb.data('thumbnail');
      assignImageID(thumbId, $(this));
      $('.zoomContainer').remove();
      initializingMediaZoom();
    }
  });
}
/**
 * Adding class active to first thumbnail on default
 *
 */


function defaultActive() {
  $('.product-set-detail').each(function () {
    $(this).find('.js-thumbnail-btn:eq(0)').addClass('active');
  });
}
/**
 * Resets zoom to 0%
 *
 */


function resetImgZoom() {
  var $zoomedContainers = $('.zoom');

  if ($zoomedContainers.length) {
    $zoomedContainers.each(function () {
      var $zoomedImg = $(this).children('img');
      $zoomedImg.attr({
        'data-scale': 1,
        'data-translate-x': 0,
        'data-translate-y': 0
      }).removeAttr('style');
      $zoomedContainers.removeClass('zoom-active');
    });
  }
}
/**
 * Sets Thumbnail to match active slide
 *  @param {string} nextSlide - Slider Slider next slide index
 *
 */


function setActiveThumbnail(nextSlide) {
  var deviceWidth = window.outerWidth;
  var $thumbnailContainer = $('.thumbnail-images');
  var $targetThumbnail = $(".thumbnail-".concat(nextSlide));
  var targetThumbnailPos = $targetThumbnail.offset().left;

  if (targetThumbnailPos < 0) {
    $thumbnailContainer.scrollLeft(0);
  } else if (targetThumbnailPos + $targetThumbnail.outerWidth() > deviceWidth) {
    $thumbnailContainer.scrollLeft(targetThumbnailPos);
  }
}
/**
 * When clicking on a mobile thumbnail, navigate slider
 *
 */


function mobileThumbnailClick() {
  $('.js-thumbnail-btn').on('click', function () {
    var targetSlide = $(this).index();
    $(this).closest('.product-set-detail').find('.js-large-images-list').slick('slickGoTo', targetSlide);
    $(this).closest('.product-set-detail').find('.js-thumbnail-btn').removeClass('active');
    $(this).addClass('active');
  });
}
/**
 * Setup mobile image carousel and zoom functionality
 *
 */


function mobileZoomImagesInt() {
  var productCarousel = '.js-product-carousel';
  var productSlidesCount = $(productCarousel).data('slides-to-show');
  var productArrows = $(productCarousel).data('arrows');
  var $mobileImagesList = $('.js-large-images-list');
  var $thumbnailNextBtn = $('.js-next-btn');
  var $thumbnailPrevBtn = $('.js-prev-btn');
  $('.product-set-detail').find('.thumbnail-wrapper').removeClass('hidden-md-down');
  $('.thumbnail-wrapper').each(function () {
    var $largeImage = $(this).closest('.product-set-detail').find('.large-images-wrapper');
    $(this).insertAfter($largeImage);
  });
  $mobileImagesList.on('init', function () {
    mobileThumbnailClick();
  });
  $thumbnailNextBtn.remove();
  $thumbnailPrevBtn.remove(); // Adding .not('slick-initialized') stops code from breaking due to multiple slider calls

  $($mobileImagesList).not('.slick-initialized').slick({
    slidesToShow: productSlidesCount,
    slidesToScroll: 1,
    accessibility: true,
    arrows: productArrows,
    dots: false
  });
  $imageList.on('beforeChange', function (event, slick, currentSlide, nextSlide) {
    if (currentSlide === nextSlide) {
      return false;
    }

    resetImgZoom();
    $(this).closest('.product-set-detail').find(".thumbnail-".concat(currentSlide)).removeClass('active');
    $(this).closest('.product-set-detail').find(".thumbnail-".concat(nextSlide)).addClass('active');
    setActiveThumbnail(nextSlide);
  }); // eslint-disable-next-line no-undef

  imageZoom.zoom({
    active: 'zoom-active',
    transition: 'zoom-transition',
    visible: 'visible',
    zoom: 'zoom' // Image container class

  }, {
    scaleDefault: 2.5,
    // Used on doubleclick, doubletap and resize
    scaleMax: 4,
    // Maximum zoom
    scaleMin: 1,
    // Minimum zoom
    transitionDuration: 200,
    // This should correspond with zoom-transition transition duration
    doubleclickDelay: 300,
    // Delay between clicks - used when scripts decides if user performed doubleclick or not
    slickCarousel: 'js-large-images-list' // Slick Carousel parent element

  }, function (container, zoomActive) {
    var $zoomImg = $(container).find('img');
    var hiResImg = $zoomImg.data('zoomImg');

    if (hiResImg) {
      $zoomImg.attr('src', hiResImg);
    }

    $('.js-large-images-list').slick('slickSetOption', {
      touchMove: !zoomActive,
      swipe: !zoomActive
    });
  });
}
/**
 * To validate if size & color selection is done
 * @return {string} - return false if selection is not done
 * @param {jquery} elem - DOM container of the corresponding next button
 */


function variantValidation(elem) {
  var $productContainer = elem; // Need to use this for size selector instead of color attribute

  var $selectedSizeAttr = $productContainer.find('.select-size .size-option');
  var inStock = $productContainer.find('.size-option.selected').length ? $productContainer.find('.size-option.selected').data('isinstock') : true;
  var inStockColor = $productContainer.find('.color-value.selected').length ? $productContainer.find('.color-value.selected').data('isinstock') : true;
  var $selectedColorAttr = $productContainer.find('.color-attribute-value .swatch-circle.selected');
  var sizeNotSelected = $selectedSizeAttr && $selectedSizeAttr.length && !$selectedSizeAttr.hasClass('selected');
  var $sizeSelected = $selectedSizeAttr.hasClass('selected');
  var $nosizeAttribute = $('.variationAttributes').hasClass('.select-size .size-option');
  var colorNotSelected = $selectedColorAttr && $selectedColorAttr.length && !$selectedColorAttr.hasClass('selected');

  if (sizeNotSelected || colorNotSelected) {
    $('body').trigger('event:productError', $selectedSizeAttr);
    var $targetAttribute = colorNotSelected ? $selectedColorAttr : $selectedSizeAttr;
    var $attributeSelector = $targetAttribute.closest('.attribute');
    $attributeSelector.find('.attribute-error:first').removeClass('d-none');
    setTimeout(function () {
      $attributeSelector.find('.size-option:first input').focus();
    }, 3000);
    return false;
  } else if (!inStockColor) {
    var $target = $selectedColorAttr;
    var $attr = $target.closest('.attribute');
    $attr.find('.attribute-error:first').removeClass('d-none').attr('role', 'alert').focus();
    return false;
  } else if (!inStock) {
    var _$target = $selectedSizeAttr;

    var _$attr = _$target.closest('.attribute');

    _$attr.find('.attribute-error:first').removeClass('d-none').attr('role', 'alert').focus();

    return false;
  }

  if ($sizeSelected || !$nosizeAttribute) {
    $('.add-to-cart-global').removeAttr('disabled');
  }

  return true;
}
/**
 * @param {string} activeResponsePrice - price for a given product
 * @param {string} qtyUpdated - quantity for a given product
 */


function updateProductSetQtyPrice(activeResponsePrice, qtyUpdated) {
  /* Qty*/
  var prevQty = $('.product-set-flyout-wrapper.visited').find('.quantity-select');
  var prevQtyTotal = 0;
  $.each(prevQty, function (key, qty) {
    prevQtyTotal += parseInt($(qty).val(), 10);
  });
  var activeQty = parseInt($('.product-set-flyout-wrapper.active').find('.quantity-select').val(), 10);
  var currentQty = prevQtyTotal + activeQty;
  currentQty = currentQty > 1 ? currentQty + ' items' : currentQty + ' item';
  $('.product-set-flyout-wrapper.active .qty-value').html(currentQty);
  /* Price*/

  var currency = $('.product-set-flyout-wrapper.active').find('.default-price .sales .value').text().trim().match(/[^0-9/.-]+/g);
  var activePrice;
  var prevPrice = $('.product-set-flyout-wrapper.active').prev('.product-set-flyout-wrapper.visited').find('.price-value').text();

  if (activeResponsePrice) {
    activePrice = Number(activeResponsePrice.replace(/[^0-9/.-]+/g, ''));
  } else {
    activePrice = $($('.product-set-flyout-wrapper.active').find('.default-price .sales .value')[0]).text().trim();
    activePrice = Number(activePrice.replace(/[^0-9/.-]+/g, ''));
  }

  prevPrice = Number(prevPrice.replace(/[^0-9/.-]+/g, ''));

  if (!qtyUpdated) {
    activePrice *= activeQty;
  }

  var currentPrice = prevPrice + activePrice;
  $('.product-set-flyout-wrapper.active .price-value').html(currency[0] + currentPrice.toFixed(2));
}
/**
 * @param {jQuery} elem - price container element for a given product
 */


function quantityPriceTotal(elem) {
  var qtyValue = elem.find('.quantity-select').val();
  var qtyText = qtyValue > 1 ? qtyValue + ' items' : qtyValue + ' item';
  var currency = elem.find('.default-price .sales .value').text().trim().match(/[^0-9/.-]+/g);
  var priceValue = elem.find('.default-price .sales .value').text().trim().replace(/[^0-9/.-]+/g, '');
  priceValue *= qtyValue;
  var messageHtml = '<div class="total-amount-messsage"> <span class="total-title"> Total Amount </span>(<span class="qty-value">' + qtyText + '</span>): <span class="price-value">' + currency[0] + priceValue.toFixed(2) + '</span> </div>';
  var $priceWrapper = elem.find('.prices-add-to-cart-actions');
  var $total = $('<div class="total-amount"></div>');
  $total.append(messageHtml);
  $total.insertBefore($priceWrapper);
}

module.exports = {
  productSetImages: function productSetImages() {
    if (isDesktop) {
      $('body').off('.appendImage');
      $('.product-set-detail').find('.js-thumbnail-btn').removeClass('active');
      $('.js-large-images-list li:not(:first-child)').addClass('d-none'); // Hide Large images except first

      $('.product-set-detail').find('.js-thumbnail-btn:eq(0)').addClass('active'); // Default active

      $('.js-large-images-list li:first-child').removeClass('d-none');
      imageAppend();
    } else if (isTabletOrBelow) {
      mobileZoomImagesInt();
      defaultActive();
    }
  },
  setupMediaZoom: function setupMediaZoom() {
    if (isDesktop) {
      mediaZoom.productMediaZoom();
      initializingMediaZoom();
    }
  },
  buyAllProducts: function buyAllProducts() {
    $('.js-buy-all-set').click(function () {
      var productSetDetailLength = $('.product-set-wrapper .product-set-detail').length;
      $('.product-set-flyout-image').empty();
      $('.product-set-flyout-details').empty();

      for (var i = 0; i < productSetDetailLength; i++) {
        $('.product-set-wrapper .product-set-detail:eq(' + i + ')').find('.large-thumbnail-0:eq(0)').children().clone().appendTo('.product-set-flyout-wrapper:eq(' + i + ') .product-set-flyout-image');
        $('.product-set-wrapper .product-set-detail:eq(' + i + ')').find('.product-detail-content').clone().appendTo('.product-set-flyout-wrapper:eq(' + i + ') .product-set-flyout-details');
        $('.product-set-flyout-wrapper:eq(' + i + ') .product-set-flyout-details').find('.product-ratings').remove();
        $('.product-set-flyout-wrapper:eq(' + i + ')').find('.product-set-flyout-next').clone().appendTo('.product-set-flyout-wrapper:eq(' + i + ') .quantity-addtocart-grid-set');
        var $Container = $('.product-set-flyout-wrapper:eq(' + i + ')');
        quantityPriceTotal($Container);
        $('.product-set-flyout-details:eq(' + i + ') .attributes .thirdparty-payment').addClass('d-none');
      }

      var $flyoutDetails = $('.modal-body .product-set-flyout-details');

      if ($flyoutDetails.length > 0) {
        $flyoutDetails.find(".color-attribute-value span[data-isinstock='false']").parent().remove();
        $flyoutDetails.find("div.size-option[data-isinstock='false']").remove();
      }

      $('.product-set-flyout-details .product-set-flyout-next').removeClass('d-none');
      $('.product-set-flyout-wrapper').removeClass('active');
      $('.product-set-flyout-wrapper:eq(0)').addClass('active');
      $('.product-set-flyout-wrapper .cart-and-ipay, .product-set-flyout-wrapper .design-and-detail').remove();
      $('.product-set-flyout-wrapper:first-child .product-set-flyout-previous').remove();
      $('.product-set-flyout-wrapper:last-child .product-set-flyout-next').remove();
      $('.global-add-to-cart-wrapper .cart-and-ipay').clone().appendTo('.product-set-flyout-wrapper:last-child .quantity-addtocart-grid-set');
      $('.product-set-flyout-details .quantity-select').val(1);
      $('.product-set-flyout-details .full-pdp-link span').addClass('d-inline');
    });
  },
  changeQuantity: function changeQuantity() {
    var flyout = $('.product-set-flyout-details');
    flyout.on('change', '.quantity-select', function () {
      var $productContainer = $(this).closest('.product-detail');
      var inStockSize = $productContainer.find('.size-option.selected').length ? $productContainer.find('.size-option.selected').data('isinstock') : true;
      var inStockColor = $productContainer.find('.color-value.selected').length ? $productContainer.find('.color-value.selected').data('isinstock') : true;

      if (inStockSize && inStockColor) {
        var totalQuantity = $('.quantity-select', flyout).toArray().reduce(function (acc, el) {
          var value = acc + parseInt($(el).val() || 0, 10);
          return value;
        }, 0);
        var addToCartGlobal = $('.add-to-cart-global', flyout);
        var label = addToCartGlobal.data('primaryLabel');
        addToCartGlobal.text(label + ' (' + totalQuantity + ')').attr('aria-label', label + ' ' + totalQuantity);
      }

      updateProductSetQtyPrice();
    });
  },
  nextButton: function nextButton() {
    $(document).on('click', '.product-set-flyout-next', function () {
      var currentItem = $(this).closest('.product-set-flyout-wrapper');
      var nextItem = currentItem.next('.product-set-flyout-wrapper');
      var $productContainer = $(this).closest('.product-detail');
      var selection = variantValidation($productContainer);

      if (selection) {
        currentItem.removeClass('active').addClass('visited');
        nextItem.addClass('active');
        setTimeout(function () {
          nextItem.find('.product-set-flyout-next:visible').focus();
        }, 100);
        updateProductSetQtyPrice();
      }
    });
  },
  previousButton: function previousButton() {
    $(document).on('click', '.product-set-flyout-previous', function () {
      var currentItem = $(this).closest('.product-set-flyout-wrapper');
      var prevItem = currentItem.prev('.product-set-flyout-wrapper');
      currentItem.removeClass('active visited');
      prevItem.addClass('active').removeClass('visited');
      setTimeout(function () {
        prevItem.find('.product-set-flyout-previous:visible').focus();
      }, 100);
      updateProductSetQtyPrice();
    });
  },
  cancelButton: function cancelButton() {
    $(document).on('click', '.product-flyout-cancel-link, .blurred-background', function (e) {
      e.preventDefault();
      $('.product-flyout-close').trigger('click');
    });
  },
  selectItemsFromSet: function selectItemsFromSet() {
    $(document).on('click', '.select-set', function () {
      var position = $('#scroll-js') && $('#scroll-js').length ? $('#scroll-js').offset().top - $('header').height() : 0;
      $('html, body').animate({
        scrollTop: position
      }, 500);
    });
  },
  changeVariant: function changeVariant() {
    $(document).on('product:afterAttributeSelect', function (e, response) {
      if ($('.product-set-flyout-wrapper.active').length > 0) {
        $('.product-set-flyout-wrapper.active').find('.product-set-flyout-details .full-pdp-link-js').attr('href', response.data.product.selectedProductUrl);
      } // if size is selected, prevent the focus to move to first color variant - instead stay on the same element


      if ($(response.target).attr('id') && $(response.target).attr('id').indexOf('size') > -1) {
        $('#size_' + response.data.product.id + '_' + response.data.product.variationAttributes[1].displayValue + '_' + response.data.locale.split('_')[1]).focus();
      }

      if (response.container.parent('.product-set-flyout-wrapper').length !== 0) {
        if (response.data.product.price && response.data.product.price.sales) {
          updateProductSetQtyPrice(response.data.product.price.sales.formatted);
        }

        if (response.data.product.total) {
          updateProductSetQtyPrice(response.data.product.total.sales.formatted, true);
        }
      }
    });
  },
  shopThisBundlePopUp: function shopThisBundlePopUp() {
    $(document).on('shown.bs.modal', '#editProductSetModal', function () {
      $('.product-flyout-close').focus();

      if ($(this).find('.product-set-flyout-wrapper').length > 0) {
        $('.btn-add-to-favorites').addClass('d-none');
        $('.product-set-flyout-wrapper').find('label').map(function (i, ind) {
          $(ind).siblings().attr('id', 'flyout-' + $(ind).siblings().attr('id'));
          $(ind).attr('for', $(ind).siblings().attr('id'));
          return true;
        });
        $('.product-set-flyout-wrapper').each(function (ind, ele) {
          var id = $(ele).attr('data-pid');
          $(ele).find('.add-fav-heart').attr('aria-label', $(ele).find('.add-fav-heart').attr('aria-label') + ' ' + $(ele).find('.product-name')[0].innerText);
          $(ele).find('.remove-fav-heart').attr('aria-label', $(ele).find('.remove-fav-heart').attr('aria-label') + ' ' + $(ele).find('.product-name')[0].innerText);
          $(ele).find('.quantity-select').attr('id', 'flyout-' + id + '-' + $(ele).find('.quantity-select').attr('id'));
          $(ele).find('.select-size').attr('id', 'flyout-' + id + '-' + $(ele).find('.select-size').attr('id'));
          $(ele).find('[data-bv-show="rating_summary"]').attr('id', 'flyout-' + id + '-' + $(ele).find('[data-bv-show="rating_summary"]').attr('id'));
          $(ele).find('[data-bv-show="rating_summary"] ul').removeAttr('id');
        });
      }
    });
  },
  closeThisBundlePopUp: function closeThisBundlePopUp() {
    $(document).on('hidden.bs.modal', '#editProductSetModal', function () {
      $('.btn-add-to-favorites').removeClass('d-none');
    });
  },
  setFavorites: function setFavorites() {
    // ToDo: Add trigger event for wishlist functionality
    if ($('.js-buy-all-set').length > 0) {
      var products = $('#scroll-js .product-detail');
      var wishlistedProducts = $('.wishlistedItems').length > 0 ? $('.wishlistedItems').val().split(',') : [];
      products.each(function () {
        if (wishlistedProducts && wishlistedProducts.includes($(this).data('product-id').toString())) {
          $(this).find('.add-fav-heart').addClass('d-none');
          $(this).find('.add-to-favorites').addClass('d-none');
          $(this).find('.remove-fav-heart').removeClass('d-none');
          $(this).find('.remove-from-favorites').removeClass('d-none');
        } else {
          $(this).find('.add-fav-heart').removeClass('d-none');
          $(this).find('.add-to-favorites').removeClass('d-none');
          $(this).find('.remove-fav-heart').addClass('d-none');
          $(this).find('.remove-from-favorites').addClass('d-none');
        }
      });
    }
  },
  productSetFlyoutModal: function productSetFlyoutModal() {
    $(document).on('click', '.size-chart-modal .close, .size-chart-modal, .blurred-background', function () {
      $('#editProductSetModal').css('z-index', 1050);

      if ($('#editProductSetModal').hasClass('show')) {
        $('body').addClass('overflow-hidden');
      } else {
        $('body').removeClass('overflow-hidden');
      }
    });
  },
  productSetSizeModal: function productSetSizeModal() {
    $(document).on('click', '.size-guide-cta', function () {
      $('#editProductSetModal').css('z-index', 1040);
    });
  },
  productSetReadMore: function productSetReadMore() {
    var $productDescription = $('.product-description-container .product-description');

    if (isTabletOrBelow && $productDescription.length) {
      $productDescription.css('display', '-webkit-box');
      $('.product-set-cta-container').click(function () {
        var readMore = $('.product-set-read-more');
        var readLess = $('.product-set-read-less');

        if (readMore.hasClass('d-none')) {
          $productDescription.css('-webkit-line-clamp', '4');
          readMore.removeClass('d-none');
          readLess.addClass('d-none');
        } else {
          $productDescription.css('-webkit-line-clamp', 'unset');
          readMore.addClass('d-none');
          readLess.removeClass('d-none');
        }
      });
    }
  }
};

/***/ }),

/***/ "./cartridges/app_mk_storefront/cartridge/client/default/js/product/reflektionCarousel.js":
/*!************************************************************************************************!*\
  !*** ./cartridges/app_mk_storefront/cartridge/client/default/js/product/reflektionCarousel.js ***!
  \************************************************************************************************/
/***/ (function(module, __unused_webpack_exports, __webpack_require__) {

"use strict";


var Handlebars = __webpack_require__(/*! handlebars */ "./node_modules/handlebars/dist/handlebars.min.js");

var cookie = __webpack_require__(/*! ../components/cookie */ "./cartridges/app_mk_storefront/cartridge/client/default/js/components/cookie.js");

var DOMpurify = __webpack_require__(/*! dompurify */ "./node_modules/dompurify/dist/purify.js"); // Declare global vars for country code, locale, and currency


var countrySelectorData = $('.country-selector').data() || '';
var countryCode = countrySelectorData && countrySelectorData.currentCountry ? countrySelectorData.currentCountry.toLowerCase() : '';
var countryLocale = countrySelectorData && countrySelectorData.currentLocale ? countrySelectorData.currentLocale.toLowerCase().slice(0, 2) : '';
var countryCurrency = countrySelectorData && countrySelectorData.currency ? countrySelectorData.currency : '';
var reflektionCarouselContainer = $('.rfk-carousel');
var currencyType = reflektionCarouselContainer.attr('data-currency');
Handlebars.registerHelper('ifCond', function (v1, operator, v2, options) {
  switch (operator) {
    case '<':
      return parseFloat(v1, 10) < parseFloat(v2, 10) ? options.fn(this) : options.inverse(this);

    case '>':
      return parseFloat(v1, 10) > parseFloat(v2, 10) ? options.fn(this) : options.inverse(this);

    default:
      return options.inverse(this);
  }
});
Handlebars.registerHelper('formattedPrice', function (price) {
  var locale = countryLocale + '-' + countryCode.toUpperCase();
  var formattedPrice;

  if (price % 1 === 0) {
    // Check if decimal value is having 0 or other number
    formattedPrice = new Intl.NumberFormat(locale, {
      style: 'currency',
      currency: currencyType,
      minimumFractionDigits: 0
    }).format(price);
  } else {
    formattedPrice = new Intl.NumberFormat(locale, {
      style: 'currency',
      currency: currencyType
    }).format(price);
  }

  return formattedPrice;
});

var waitForRFK = function waitForRFK(attempts, fn) {
  /* eslint-disable-next-line no-unused-expressions */
  window.rfk ? window.rfk : window.rfk = [];

  if (Object.keys(window.rfk).length) {
    fn();
  } else if (attempts > 0) {
    setTimeout(function () {
      /* eslint-disable-next-line no-param-reassign */
      waitForRFK(attempts -= 1, fn);
    }, 3000);
  } else {
    return false;
  }
};
/**
 * Track when RFK carousel appears
 * @param  {string} rfkID Reflection widget ID
 */


function rfkAppear(rfkID) {
  var tracking = {
    type: 'widget',
    name: 'appear',
    value: {
      rfkid: rfkID,
      context: {
        page: {
          locale_country: countryCode,
          locale_language: countryLocale,
          locale_currency: countryCurrency
        }
      }
    }
  };
  waitForRFK(3, function () {
    window.rfk.push(['trackEvent', tracking]);
  });
}
/**
 * Track when RFK carousel links are clicked
 * @param  {string} rfkID Reflection widget ID
 */


function rfkClick() {
  $(document).on('click', '.rfk-carousel .product-tile-component-image, .rfk-carousel .product-tile-name a', function () {
    var rfkId = $(this).parents('.slick-slider').data('widget-id');
    var skuId = $(this).parents('.product-tile').find('.product-tile-masterID').html().trim();
    var tracking = {
      type: 'widget',
      name: 'click',
      value: {
        rfkid: rfkId,
        products: [{
          sku: skuId
        }],
        context: {
          page: {
            locale_country: countryCode,
            locale_language: countryLocale,
            locale_currency: countryCurrency
          }
        }
      }
    };
    waitForRFK(3, function () {
      window.rfk.push(['trackEvent', tracking]);
    });
  });
}
/**
 * Initialize Reflektion Slick Carousel
 */


function rflSlickSetup() {
  $('.rfk-carousel').not('.slick-initialized').each(function () {
    var productTileCount = $(this).find('.product-tile');

    if (productTileCount.length > 4) {
      $(this).slick({
        infinite: false,
        slidesToShow: 4,
        slidesToScroll: 4,
        responsive: [{
          breakpoint: 1024,
          settings: {
            arrows: true,
            slidesToShow: 4,
            slidesToScroll: 4,
            dots: true
          }
        }, {
          breakpoint: 510,
          settings: {
            arrows: false,
            slidesToShow: 2,
            slidesToScroll: 2,
            variableWidth: true
          }
        }]
      });
    }
  });
}
/**
 * Initialize Reflektion carousel by calling server endpoint to fetch product data
 * @return {Object} initializes Reflektion carousel if present on the page.
 */


function initRFKCarousel() {
  if (!$('.rfk-carousel').length) {
    return false;
  }

  var reflektionURL = reflektionCarouselContainer.data('recommendations-url');
  var skuID = [];

  if ($('.product-set-detail').length || $('.product-set').length) {
    skuID.push($('.product-set-detail').data('pid').toString());
  } else if ($('.product-detail').length) {
    skuID.push($('.product-detail:not(".bundle-item")').data('pid').toString());
  } else if ($('.cart-remove-btn').length) {
    var productContainer = $('.product-remove .cart-remove-btn');
    productContainer.each(function () {
      skuID.push($(this).data('pid').toString());
    });
  } // Collect the RFK widget IDs


  var batch = [];
  reflektionCarouselContainer.each(function () {
    batch.push({
      widget: {
        rfkid: this.id
      }
    });
  });
  var customerUUID = cookie.getCookie('__ruid') || '';
  var customerIP = $('#rfk-data-ip').val() || '';
  var userAgent = window.navigator.userAgent || '';

  var CONSTANTS = __webpack_require__(/*! ../utilities/constants */ "./cartridges/app_mk_storefront/cartridge/client/default/js/utilities/constants.js");

  var localeCountry = countryCode;

  if (!CONSTANTS.NA_COUNTRIES.includes(countryCode)) {
    localeCountry = countryLocale === 'en' ? 'gb' : countryLocale;
  }

  var requestObject = {
    context: {
      page: {
        uri: window.location.pathname,
        skus: skuID,
        locale_country: localeCountry,
        locale_language: countryLocale,
        user: {
          uuid: customerUUID
        },
        geo: {
          ip: customerIP
        },
        browser: {
          user_agent: userAgent
        }
      },
      store: {
        id: countryCode
      }
    },
    batch: batch,
    content: {
      product: {}
    }
  };
  $.ajax({
    url: reflektionURL,
    type: 'post',
    dataType: 'json',
    data: '{"data":' + JSON.stringify(requestObject) + '}',
    success: function success(response) {
      reflektionCarouselContainer.empty(); // Grabbing the Handlebar template

      var productTileTemplate = $('#producttile-handlebar').html();
      var rfkTileTemplate = Handlebars.compile(productTileTemplate); // Generating each widget markup from the API data and Handlebars

      if (response.batch) {
        response.batch.forEach(function (batchData) {
          // eslint-disable-next-line no-param-reassign
          batchData.crossSellCartridge = $("#".concat(batchData.widget.rfkid)).prev('.rfk-header').prop('innerText');
          var renderedHTML = rfkTileTemplate(batchData);
          $("#".concat(batchData.widget.rfkid)).html(DOMpurify.sanitize(renderedHTML)); // setup analytics data

          rfkAppear(batchData.widget.rfkid);
        });
      } else {
        // eslint-disable-next-line no-param-reassign
        response.crossSellCartridge = $("#".concat(response.widget.rfkid)).prev('.rfk-header').prop('innerText');
        var renderedHTML = rfkTileTemplate(response);
        $("#".concat(response.widget.rfkid)).html(DOMpurify.sanitize(renderedHTML)); // setup analytics data

        rfkAppear(response.widget.rfkid);
      }

      rfkClick();
      rflSlickSetup();
    },
    error: function error() {
      $('.rfk-carousel-container').empty();
    }
  });
}

module.exports = {
  initRFKCarousel: initRFKCarousel
};

/***/ }),

/***/ "./cartridges/app_mk_storefront/cartridge/client/default/js/product/sharedwishlist.js":
/*!********************************************************************************************!*\
  !*** ./cartridges/app_mk_storefront/cartridge/client/default/js/product/sharedwishlist.js ***!
  \********************************************************************************************/
/***/ (function(module, __unused_webpack_exports, __webpack_require__) {

"use strict";


var clientSideUtil = __webpack_require__(/*! ../utilities/clientSideUtil */ "./cartridges/app_mk_storefront/cartridge/client/default/js/utilities/clientSideUtil.js");

module.exports = {
  addToWishlist: function addToWishlist() {
    $('body').on('click', '.sharedWishlistTile', function (e) {
      e.preventDefault();
      var url = $(this).attr('href');
      var pid = $(this).closest('.product-info').data('pid');

      if ($('.wishlist-icon-wrapper').length > 0) {
        $(this).closest('.wishlist-icon-wrapper').find('.sharedRemovewishlistTile').removeClass('d-none');
        $(this).addClass('d-none');
      }

      $.spinner().start();
      $.ajax({
        url: url,
        type: 'post',
        dataType: 'json',
        data: {
          pid: pid
        },
        success: function success(data) {
          var isSuccess = true;
          clientSideUtil.floatToastMessage(data.msg, 5000, isSuccess);
          $.spinner().stop();
        },
        error: function error(err) {
          clientSideUtil.floatToastMessage(err, 5000, false);
          $.spinner().stop();
        }
      });
    });
  },
  removeWishlist: function removeWishlist() {
    $('body').on('click', '.sharedRemovewishlistTile', function (e) {
      e.preventDefault();
      var url = $(this).attr('href');
      var pid = $(this).closest('.product-info').data('pid');
      $(this).closest('.wishlist-icon-wrapper').find('.sharedWishlistTile').removeClass('d-none');
      $(this).addClass('d-none');
      $.spinner().start();
      $.ajax({
        url: url,
        type: 'post',
        dataType: 'json',
        data: {
          pid: pid
        },
        success: function success(data) {
          var isSuccess = true;
          clientSideUtil.floatToastMessage(data.productRemovedMsg, 5000, isSuccess);
          $.spinner().stop();
        },
        error: function error(err) {
          clientSideUtil.floatToastMessage(err, 5000, false);
          $.spinner().stop();
        }
      });
    });
  }
};

/***/ }),

/***/ "./cartridges/app_mk_storefront/cartridge/client/default/js/product/wishlist.js":
/*!**************************************************************************************!*\
  !*** ./cartridges/app_mk_storefront/cartridge/client/default/js/product/wishlist.js ***!
  \**************************************************************************************/
/***/ (function(module, __unused_webpack_exports, __webpack_require__) {

"use strict";


var base = __webpack_require__(/*! ../product/base */ "./cartridges/app_mk_storefront/cartridge/client/default/js/product/base.js");

var focusHelper = __webpack_require__(/*! ../components/focus */ "./cartridges/app_mk_storefront/cartridge/client/default/js/components/focus.js");

var sharedwishlist = __webpack_require__(/*! ../product/sharedwishlist */ "./cartridges/app_mk_storefront/cartridge/client/default/js/product/sharedwishlist.js");

var SCREENSIZE = (__webpack_require__(/*! ../utilities/constants */ "./cartridges/app_mk_storefront/cartridge/client/default/js/utilities/constants.js").SCREENSIZE);

var isMobile = $(window).width() <= SCREENSIZE.MOBILEMAX;
var isDesktop = $(window).width() >= SCREENSIZE.DESKTOPMIN;

var clientSideUtil = __webpack_require__(/*! ../utilities/clientSideUtil */ "./cartridges/app_mk_storefront/cartridge/client/default/js/utilities/clientSideUtil.js");

var DOMpurify = __webpack_require__(/*! dompurify */ "./node_modules/dompurify/dist/purify.js");

var sizeGuideTabs = __webpack_require__(/*! ./localizeSizeLabels */ "./cartridges/app_mk_storefront/cartridge/client/default/js/product/localizeSizeLabels.js");

var notifyMe = __webpack_require__(/*! ../components/notifyMe */ "./cartridges/app_mk_storefront/cartridge/client/default/js/components/notifyMe.js");

var MENUCLOSEDELAY = (__webpack_require__(/*! ../utilities/constants */ "./cartridges/app_mk_storefront/cartridge/client/default/js/utilities/constants.js").MENUCLOSEDELAY);

var updateMiniWishlist = true;
var isWishlistMobileEnabled = $('.right-nav').find('.wishlist-icon').hasClass('wishlist-icon-js');
var isMob = $(window).width() <= SCREENSIZE.TABLETMAX;
/**
 * appends params to a url
 * @param {string} data - data returned from the server's ajax call
 * @param {Object} button - button that was clicked to add a product to the wishlist
 */

function displayMessage(data, button) {
  $.spinner().stop();
  var status;

  if (data.success) {
    status = 'alert-success';
  } else {
    status = 'alert-danger';
  }

  if ($('.add-to-wishlist-messages').length === 0) {
    $('body').append('<div class="add-to-wishlist-messages "></div>');
  }

  $('.add-to-wishlist-messages').empty().append('<div class="add-to-wishlist-alert text-center ' + status + '">' + DOMpurify.sanitize(data.msg) + '</div>');
  setTimeout(function () {
    $('.add-to-wishlist-messages').remove();
    button.removeAttr('disabled');
  }, 5000);
}
/**
 * Parses the html for a modal window
 * @param {string} html - representing the body and footer of the modal window
 *
 * @return {Object} - Object with properties body and footer.
 */


function parseHtml(html) {
  var $html = $('<div>').append($.parseHTML(html));
  var body = $html.find('.product-quickview');
  var footer = $html.find('.modal-footer').children();
  return {
    body: body,
    footer: footer
  };
}
/**
 * load notify me form
 * @param {string} pid - product ID
 * @param {Object} $selector - selector for form container
 * @param {string} url - url to GET form from
 */


function loadNotifyMeForm(pid, $selector, url) {
  $.ajax({
    url: url + '&formOnly=true',
    method: 'GET',
    dataType: 'json',
    success: function success(data) {
      if (data.success) {
        $selector.empty();
        $selector.html(DOMpurify.sanitize(data.renderedTemplate));
        $('#notify-email').focus();
      } else {
        $selector.html('');
      }
    },
    error: function error() {
      $selector.html('');
    }
  });
}
/**
 * replaces the content in the modal window for product variation to be edited.
 * @param {string} editFavoriteUrl - url to be used to retrieve a new product model
 */


function fillModalElement(editFavoriteUrl) {
  $.ajax({
    url: editFavoriteUrl,
    method: 'GET',
    dataType: 'json',
    success: function success(response) {
      var parsedHtml = parseHtml(response.renderedTemplate);
      $('#editWishlistProductModal .modal-body').empty();
      $('#editWishlistProductModal .modal-body').html(parsedHtml.body);
      $('#editWishlistProductModal .modal-header .close').attr('aria-label', DOMpurify.sanitize(response.closeButtonText));
      $('#editWishlistProductModal .enter-message').text(response.enterDialogMessage);
      $('.default-price').each(function () {
        if ($(this).find('.list').length) {
          $(this).find('.list .sr-only').text($(this).find('.list').text());
        }

        $(this).find('.sales .sr-only').text($(this).find('.sales').text());
      });
      var $notifyMeContainer = $('div.notify-me-form-container', response.$productContainer);
      var $addToCartGrid = $('div.quantity-addtocart-grid-quick-view', response.$productContainer);
      sizeGuideTabs.localizeSizeLabels();

      if (!response.product.available) {
        if (response.product.isNotifyMeActive) {
          $('div.quantity-addtocart-grid-quick-view').find('.add-to-cart-url').addClass('notify-me-enabled');
          $notifyMeContainer.removeClass('d-none');
          $('.full-pdp-link').addClass('d-none');
          loadNotifyMeForm(response.product.id, $notifyMeContainer, response.product.notifyURL);
        }
      } else {
        $addToCartGrid.removeClass('d-none');
        $notifyMeContainer.addClass('d-none');
        var addToCartLabel = $('button.update-cart-product-global', response.$productContainer).response('primary-label');
        $('button.move-to-cart-wishlist', response.$productContainer).html(addToCartLabel);
      }

      $.spinner().stop();
    },
    error: function error() {
      $.spinner().stop();
    }
  });
}
/**
 * Generates the modal window on the first call.
 *
 */


function getModalHtmlElement() {
  if ($('#editWishlistProductModal').length !== 0) {
    $('#editWishlistProductModal').remove();
  }

  var htmlString = '<!-- Modal -->' + '<div class="modal right fade edit-product-modal pr-0" id="editWishlistProductModal" tabindex="-1" role="dialog" aria-label="edit-modal">' + '<span class="enter-message sr-only" ></span>' + '<div class="modal-dialog quick-view-dialog cart-quick-view-dialog">' + '<!-- Modal content-->' + '<div class="modal-content rounded-0">' + '<div class="modal-header rounded-0">' + '    <button type="button" class="close pull-right" data-dismiss="modal"></button>' + '</div>' + '<div class="modal-body"></div>' + '<div class="modal-footer"></div>' + '</div>' + '</div>' + '</div>';
  $('body').append(htmlString);
}
/**
 * Generates the border bottom after each row
 */


function borderBottomInRows() {
  var leftovers;

  if (isMobile) {
    leftovers = $('.main-wishlist .product-info:visible').length % 2;
  } else {
    leftovers = $('.main-wishlist .product-info:visible').length % 3;
  }

  $('.main-wishlist:visible .product-info:nth-last-child(-n+' + leftovers + ')').css('border-bottom', 'none');
}
/**
 * Generates padding for the error scenario
 */


function errorMessages() {
  if ($('.invalid-feedback').hasClass('visible')) {
    if (isMobile) {
      $('.overview-container .buttons-wishlist').css('padding-bottom', '65px');
      $('.tile-body').css('margin-bottom', '160px');
      $('.overview-container-cart .buttons-wishlist').css('padding-bottom', '60px');
    } else if (isDesktop) {
      $('.overview-container .buttons-wishlist').css('padding-bottom', '65px');
      $('.tile-body').css('margin-bottom', '140px');
      $('.overview-container-cart .buttons-wishlist').css('padding-bottom', '60px');
      $('.invalid-feedback').attr('id', 'selectOption');
      $('.select-attributes-wishList .select-attributes-btn').attr('aria-describedby', 'selectOption');
    } else {
      $('.overview-container .buttons-wishlist').css('padding-bottom', '80px');
      $('.tile-body').css('margin-bottom', '160px');
    }
  }
}
/**
 * Generates list of sold out products
 * @param {string} data - data returned from the server's ajax call
 */


function fetchingSoldOutProducts(data) {
  for (var i = 0; i < data.unavailableProducts.length; i++) {
    var soldOutProductID = data.unavailableProducts[i];
    var el = $('.product-grid').find('.product-info.pid-' + soldOutProductID + '.product-tile-wrapper');
    el.find('.invalid-feedback').css('display', 'block').addClass('visible').empty().append(DOMpurify.sanitize(data.OOSProductErrorMsg));
    el.find('.secondary-button-custom').addClass('is-invalid').closest('.buttons-wishlist');
    el.find('.sold-out').addClass('d-none');
    el.find('.remove-sold-out').removeClass('d-none');
    errorMessages();
  }
}
/**
 * Generates toast message for sold out and master products in wishlist
 * @param {string} data - data returned from the server's ajax call
 */


function floatMessagesForWishlist(data) {
  if ($('.float-toast-message-perma').children('.float-toast-errors').length !== 0) {
    if (!isMobile) {
      $('.float-toast-errors').removeAttr('role');
    }

    $('.cart-toasters').find('.toast-alert-error.wishlist-error').removeClass('d-none').empty().append('<span role ="alert">' + DOMpurify.sanitize(data.wishlistHasInvalidProductsErrorMessage) + '</span>');
    var toastMargin = $('.float-toast-message-perma').height() + 18;
    $('.cart-toasters .float-toast-message').css('margin-top', toastMargin);
  }
}
/**
 * Generates list of master products
 * @param {string} data - data returned from the server's ajax call
 */


function fetchingMasterProducts(data) {
  for (var i = 0; i < data.masterProducts.length; i++) {
    var masterProductID = DOMpurify.sanitize(data.masterProducts[i]);
    var el = $('.product-grid').find('.product-info.pid-' + masterProductID + '.product-tile-wrapper');
    el.find('.invalid-feedback').css('display', 'block').addClass('visible').empty().append(DOMpurify.sanitize(data.masterProductErrorMsg));
    el.find('.secondary-button-custom').addClass('is-invalid').closest('.buttons-wishlist');
    errorMessages();
  }
}
/**
 *
 * @param {html} elem - html element
 * @returns {boolean} - true if option selelcted
 */


function isSizeSelected(elem) {
  if (elem) {
    if (elem.find('.size-option').length === 0 || elem.find('.size-option.selected').length > 0) {
      elem.find('.select-size').removeClass('has-error');
      return true;
    }

    elem.find('.select-size').addClass('has-error');
    elem.find('.quickview-attribute-error').removeClass('d-none');
    elem.find('.select-size .size-option[data-isinstock="true"] input').removeAttr('aria-describedby');
    elem.find('.select-size .size-option[data-isinstock="true"]:first input').attr('aria-describedby', 'quickviewError');
    setTimeout(function () {
      elem.find('.select-size .size-option[data-isinstock="true"]:first input').focus();
    }, 1000);
  }

  return false;
}
/**
 * To check if the js-share btn has partially enabled class and stop the modal trigger
 */


function checkPartiallyEnabled() {
  var partiallyEnabled = $('.js-share-button:visible').hasClass('partially-enabled');

  if (!partiallyEnabled) {
    $('.js-share-button:visible').attr('data-target', '#shareFlyoutModal');
  } else {
    $('.js-share-button:visible').attr('data-target', '');
  }
}
/**
 * Deleting stored local storage value for share flyout error
 */


function deleteLocalStorageErrorShare() {
  if (localStorage.getItem('shareFlyoutError')) {
    $('.share-icon.partially-enabled').trigger('click');
    localStorage.removeItem('shareFlyoutError');
  }
}
/**
* Returns static wishlisted items
* @param {string} wishlistedItems - string containing currently wishlisted items
* @returns {Array} wishlisted items
* */


function getWishlistedProducts(wishlistedItems) {
  var wishlistedProducts;

  if (!wishlistedItems) {
    wishlistedProducts = $('.wishlistedItems').length > 0 ? $('.wishlistedItems').val().split(',') : '';
  } else {
    wishlistedProducts = wishlistedItems;
  }

  return wishlistedProducts.length > 0 ? wishlistedProducts : [];
}
/**
* Update heart icon header when adding and removing products while page loader
* @param {string} wishlistedItems - string containing currently wishlisted items
*/


function fillHeaderHeart(wishlistedItems) {
  updateMiniWishlist = true;

  if ($('.wishlistedItems').length > 0 && wishlistedItems !== undefined) {
    $('.wishlistedItems').val(DOMpurify.sanitize(wishlistedItems));
  }

  var wishlistedProducts = getWishlistedProducts(wishlistedItems);
  var noWishlistItems = wishlistedProducts.length === 0 || wishlistedProducts[0] === '' || wishlistedProducts[0] === 'null';
  var $wishlistIcon = $('.wishlist-icon');
  $wishlistIcon.find('.mk-icon.mk-heart').toggleClass('d-none', !noWishlistItems);
  $wishlistIcon.find('.mk-icon.mk-heart-filled').toggleClass('d-none', noWishlistItems);
}
/**
 * @param {boolean} updatewishlist - if miniwishlist is updated
 * @param {Object} wData - wishlist object data
 */


function popupdisplay() {
  var updatewishlist = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : false;
  var wData = arguments.length > 1 ? arguments[1] : undefined;

  if (updatewishlist) {
    var url = $('.miniwishlist').data('action-url');

    if (!updateMiniWishlist) {
      $('.miniwishlist .popover').addClass('show');
      return;
    }

    $('.miniwishlist .popover').addClass('show');
    $.get(url, function (data) {
      $('.miniwishlist .popover').empty();
      $('.miniwishlist .popover').append(data);

      if (wData !== undefined) {
        if (wData.addWishlist) {
          $('.toast-success').removeClass('d-none');
          $('.toast-remove').addClass('d-none');
        } else if (wData.removeWishlist) {
          $('.toast-remove').removeClass('d-none');
          $('.toast-success').addClass('d-none');
        }

        clientSideUtil.clearAndSetTime('.toast-message-miniwishlist .toast-basket-alert', wData.toastTime);
      }

      updateMiniWishlist = false;
      $('.popover .popover-overlay').on('touchstart click', function (event) {
        event.stopPropagation();
        $('.miniwishlist .popover').removeClass('show');
      });
      $('.mk-close-miniwishlist').on('touchstart click', function (event) {
        event.stopPropagation();
        setTimeout(function () {
          $('.miniwishlist .popover').removeClass('show');
        }, 300);
      });
    });
  }
}

module.exports = {
  addwishlistHeart: sharedwishlist.addToWishlist(),
  removewishlistHeart: sharedwishlist.removeWishlist(),
  borderBottomInRows: borderBottomInRows,
  isSizeSelected: isSizeSelected,
  checkPartiallyEnabled: checkPartiallyEnabled,
  errorMessages: errorMessages,
  popupdisplay: popupdisplay,
  fillHeaderHeart: fillHeaderHeart,
  addToWishlist: function addToWishlist() {
    $('.add-to-wish-list').on('click', function (e) {
      e.preventDefault();
      var url = $(this).data('href');
      var button = $(this);
      var pid = $(this).closest('.product-detail').data('pid');
      var optionId = $(this).closest('.product-detail').find('.product-option').attr('data-option-id');
      var optionVal = $(this).closest('.product-detail').find('.options-select option:selected').attr('data-value-id');
      optionId = optionId || null;
      optionVal = optionVal || null;

      if (!url || !pid) {
        return;
      }

      $.spinner().start();
      $(this).attr('disabled', true);
      $.ajax({
        url: url,
        type: 'post',
        dataType: 'json',
        data: {
          pid: pid,
          optionId: optionId,
          optionVal: optionVal
        },
        success: function success(data) {
          displayMessage(data, button);

          if (isWishlistMobileEnabled || !isMob) {
            popupdisplay(true);
            var timer = setTimeout(function () {
              $('.miniwishlist .popover').addClass('show');
            }, 4000);
            $('.miniwishlist .popover').on('mouseenter', function () {
              clearTimeout(timer);
            });
          }
        },
        error: function error(err) {
          displayMessage(err, button);
        }
      });
      e.stopImmediatePropagation();
      return false;
    });
  },
  addToCart: function addToCart() {
    $(document).on('click', '.overview-container button.add-to-cart-wishlist', function () {
      var addToCartUrl;
      var pid = $(this).closest('.product-info').data('pid');
      var quantityNew = parseInt($(this).closest('.product-info').find('.quantity-select').val(), 10);
      var action = $('.page').data('action');
      $('body').trigger('product:beforeAddToCart', this);
      addToCartUrl = $('.add-to-cart-url').val();
      var elMyAccount = $('.main-wishlist .product-info:visible').length;
      var sharedListid = null;

      if ($('.js-shared-fav-page').length > 0) {
        var querystring = $('.page').data('querystring');

        if (querystring) {
          sharedListid = querystring.split('&id=')[1];
        }
      }

      var form = {
        pid: pid,
        quantity: quantityNew,
        options: [],
        productCount: elMyAccount,
        action: action,
        sharedListid: sharedListid
      };
      $(this).trigger('updateAddToCartFormData', form);

      if (addToCartUrl) {
        $.spinner().start();
        $.ajax({
          url: addToCartUrl,
          method: 'POST',
          data: form,
          success: function success(data) {
            var isSuccess = true;

            if (DOMpurify.sanitize(data.wishlistOOSError)) {
              $('.main-wishlist').empty().append(DOMpurify.sanitize(data.renderedTemplate));
              var el = $('.product-grid:visible').find('.product-info.pid-' + DOMpurify.sanitize(data.productID) + '.product-tile-wrapper');
              el.find('.invalid-feedback').css('display', 'block').addClass('visible').empty().append(DOMpurify.sanitize(data.OOSProductErrorMsg));
              el.find('.secondary-button-custom').addClass('is-invalid').closest('.buttons-wishlist');
              el.find('.sold-out').addClass('d-none');
              el.find('.remove-sold-out').removeClass('d-none');
              errorMessages();
              fillHeaderHeart(data.wishlistedItems);
              $.spinner().stop();

              if ($('.float-toast-message-perma').children('.float-toast-errors').length !== 0) {
                $('.cart-toasters').find('.toast-alert-error.wishlist-error').removeClass('d-none').empty().append(DOMpurify.sanitize(data.message));
                var toastMargin = $('.float-toast-message-perma').height() + 18;
                $('.cart-toasters .float-toast-message').css('margin-top', toastMargin);
              }
            } else if (data.cart.numItems === 0) {
              $('body').trigger('event:favAddToCart', data);
              location.reload();
            } else {
              $('body').trigger('product:afterAddToCart', data.message);
              $.spinner().stop();
              base.miniCartReportingUrl(data.reportingURL);
              $('.minicart-quantity').html(DOMpurify.sanitize(data.quantityTotal)).removeClass('invisible');
              var isProductAdded = true;
              $('.minicart').trigger('minicart:update', [isProductAdded, data.toastMessageDisplayTime]);
              var selector = '.minicart .popover';
              var timer = setTimeout(function () {
                $(selector).removeClass('show');
              }, data.miniBagFlyOutTimeinMilliSec);
              $('.minicart .popover').on('mouseenter', function () {
                clearTimeout(timer);
              });
              $('.main-wishlist').empty().append(DOMpurify.sanitize(data.renderedTemplate));
              $('.cart-toasters .toast-alert-error.wishlist-error').addClass('d-none').empty();
              $('.js-favourite-heading').empty().append(DOMpurify.sanitize(data.senderName));

              if (data.cartRenderedTemplate) {
                $('.product-card-section').empty().append(DOMpurify.sanitize(data.cartRenderedTemplate));
              }

              fillHeaderHeart(data.wishlistedItems);
              clientSideUtil.floatToastMessage(data.message, data.toastMessageDisplayTime, isSuccess);
              $('body').trigger('event:addToCart', data);
            }
          },
          error: function error() {
            $.spinner().stop();
          }
        });
      }
    });
  },
  moveToCart: function moveToCart() {
    $(document).on('click', '.quick-view-dialog .move-to-cart-wishlist', function () {
      var productDetail = $(this).closest('.product-detail');
      var cartPage = $('.cart-page');

      if (!isSizeSelected(productDetail) || cartPage) {
        return;
      }

      var buttonBlock = $(this).closest('.wishlist-item-update-button-block').find('.add-to-cart-url');
      var addToCartUrl = buttonBlock.val();
      var uuid = buttonBlock.data('uuid');
      var pid = base.getPidValue($(this));
      var quantityNew = 1;
      var elMyAccount = $('.product-info').length;
      var action = $('.page').data('action');
      var querystring = $('.page').data('querystring');
      var sharedListid = null;

      if (querystring) {
        sharedListid = querystring.split('&id=')[1];
      }

      $('body').trigger('product:beforeAddToCart', this);
      var form = {
        pid: pid,
        uuid: uuid,
        quantity: quantityNew,
        options: [],
        productCount: elMyAccount,
        action: action,
        sharedListid: sharedListid
      };
      $(this).trigger('updateAddToCartFormData', form);

      if (addToCartUrl) {
        $.spinner().start();
        $.ajax({
          url: addToCartUrl,
          method: 'POST',
          data: form,
          success: function success(data) {
            var isSuccess = true;
            $.spinner().stop();
            $('body').trigger('product:afterAddToCart', data.message);
            $('#editWishlistProductModal').modal('hide');
            base.miniCartReportingUrl(data.reportingURL);
            $('.minicart-quantity').html(DOMpurify.sanitize(data.quantityTotal)).removeClass('invisible');
            var isProductAdded = true;
            $('.minicart').trigger('minicart:update', [isProductAdded, data.toastMessageDisplayTime]);
            var selector = '.minicart .popover';
            var timer = setTimeout(function () {
              $(selector).removeClass('show');
            }, data.miniBagFlyOutTimeinMilliSec);
            $('.minicart .popover').on('mouseenter', function () {
              clearTimeout(timer);
            });

            if (data.renderedTemplate) {
              $('.main-wishlist').empty().append(DOMpurify.sanitize(data.renderedTemplate));
              $('.js-favourite-heading').empty().append(DOMpurify.sanitize(data.senderName));
            }

            clientSideUtil.floatToastMessage(data.message, data.toastMessageDisplayTime, isSuccess);
            deleteLocalStorageErrorShare();
          },
          error: function error() {
            $.spinner().stop();
          }
        });
      }
    });
  },
  updateWishListItem: function updateWishListItem() {
    $(document).on('click', '.quick-view-dialog .update-wishlist-item', function () {
      var productDetail = $(this).closest('.product-detail');

      if (!isSizeSelected(productDetail)) {
        return;
      }

      var updateButtonBlock = $(this).closest('.wishlist-item-update-button-block').find('.update-wishlist-url');
      var updateProductUrl = updateButtonBlock.val();
      var uuid = updateButtonBlock.data('uuid');
      var querystring = $('.page').data('querystring');
      var sharedListid = null;

      if (querystring) {
        sharedListid = querystring.split('&id=')[1];
      }

      var form = {
        uuid: uuid,
        pid: base.getPidValue($(this)),
        sharedListid: sharedListid
      };

      if (updateProductUrl) {
        $.spinner().start();
        $.ajax({
          url: DOMpurify.sanitize(updateProductUrl),
          method: 'POST',
          data: form,
          success: function success(data) {
            $.spinner().stop();
            var isSuccess = true;
            $('#editWishlistProductModal').modal('hide');

            if (data.renderedTemplate) {
              $('.main-wishlist').empty().append(DOMpurify.sanitize(data.renderedTemplate));
              $('.js-favourite-heading').empty().append(DOMpurify.sanitize(data.senderName));
              $('.cart-toasters .toast-alert-error.wishlist-error').addClass('d-none').empty();
            }

            clientSideUtil.floatToastMessage(data.itemOptionUpdatedMsg, data.toastMessageDisplayTime, isSuccess);
            checkPartiallyEnabled();
          },
          error: function error() {
            $.spinner().stop();
          }
        });
      }
    });
  },
  editFavorites: function editFavorites() {
    $('body').on('click', '.edit-add-to-wishlist a, .select-attributes-wishList button', function (e) {
      e.preventDefault();
      var editFavoriteUrl = $(this).attr('href');

      if (!editFavoriteUrl) {
        editFavoriteUrl = $(this).data('get-product-url');
      }

      $('.toast-oos.toast-alert-error.validate-basket').addClass('d-none');
      getModalHtmlElement();
      fillModalElement(editFavoriteUrl);
      notifyMe.submitRecaptchaNotifyMe();
    });
  },
  trapEditWishlistModalFocus: function trapEditWishlistModalFocus() {
    $('body').on('keydown', '#editWishlistProductModal', function (e) {
      var focusParams = {
        event: e,
        containerSelector: '#editWishlistProductModal',
        firstElementSelector: '.close',
        lastElementSelector: '.edit-flyout-cancel-btn'
      };
      focusHelper.setTabNextFocus(focusParams);
    });
  },
  printScreenWishlist: function printScreenWishlist() {
    $(document).on('click', '.print-cta', function () {
      window.print();
      return false;
    });
  },
  selectVariations: function selectVariations() {
    $('.select-attributes-btn').on('click', function () {
      getModalHtmlElement();
    });
  },
  removeFromWishlist: function removeFromWishlist() {
    $('body').on('touchstart click', '.remove-from-wishlist, .remove-sold-out', function (e) {
      e.preventDefault();
      var url = $(this).data('url');
      var elMyAccount = $('.main-wishlist .product-info:visible').length;
      var pageType = $('.page').data('action');
      var sharedListid = null;

      if ($('.js-shared-fav-page').length > 0) {
        var querystring = $('.page').data('querystring');

        if (querystring) {
          sharedListid = querystring.split('&id=')[1];
        }
      }

      var form = {
        productCount: elMyAccount,
        pageType: pageType,
        sharedListid: sharedListid
      }; // If user is in my account page, call removeWishlistAccount() end point, re-render wishlist cards

      if (elMyAccount > 0) {
        $.spinner().start();
        $.ajax({
          url: url,
          type: 'get',
          data: form,
          success: function success(data) {
            var isSuccess = true;
            $('.main-wishlist').empty().append(DOMpurify.sanitize(data.renderedTemplate));
            $('.js-favourite-heading').empty().append(DOMpurify.sanitize(data.senderName));
            checkPartiallyEnabled();
            borderBottomInRows();
            $.spinner().stop();
            $('.cart-toasters .toast-alert-error.wishlist-error').addClass('d-none');
            $('.sub-total-wishlist').html($('.favourite-count').html());
            $('body').trigger('event:removeProductFromFavourites', data);
            deleteLocalStorageErrorShare();
            fillHeaderHeart(data.wishlistedItems);

            if (isWishlistMobileEnabled || !isMob) {
              popupdisplay(true, {
                addWishlist: false,
                removeWishlist: true,
                toastTime: data.toastMessageDisplayTime
              });
              var timer = setTimeout(function () {
                $('.miniwishlist .popover').addClass('show');
              }, data.miniFavouriteFlyOutTimeinMilliSec);
              $('.miniwishlist .popover').on('mouseenter', function () {
                clearTimeout(timer);
              });
            } else {
              clientSideUtil.floatToastMessage(data.productRemovedMsg, data.toastMessageDisplayTime, isSuccess);
            }
          },
          error: function error() {
            var $elToAppend = $('.product-info');
            $elToAppend.spinner().stop();
          }
        });
      }
    });
  },
  moreWLItems: function moreWLItems() {
    $('body').on('click', '.more-wl-items', function (e) {
      e.preventDefault();
      var url = $(this).data('href');
      var pageType = $('.page').data('action');
      var uuid = $('.js-shared-fav-page').length > 0 ? $(this).data('uuid') : '';
      var cardCount = $('.product-info.product-tile-wrapper').length;
      $.ajax({
        url: url,
        type: 'get',
        data: {
          pageType: pageType,
          sharedListId: uuid
        },
        success: function success(response) {
          $('.main-wishlist').empty().append(DOMpurify.sanitize(response));
          $('body').trigger('event:wlItemsShowMoreLessEvent');
          borderBottomInRows();
        },
        complete: function complete() {
          if (url.split('?')[1] && url.split('?')[1].indexOf('less') < 0) {
            $($('.product-info.product-tile-wrapper')[cardCount]).find('.remove-from-wishlist').focus();
          } else {
            $($('.product-info.product-tile-wrapper')[0]).find('.remove-from-wishlist').focus();
          }
        }
      });
    });
  },
  moveAllToBagEnabled: function moveAllToBagEnabled() {
    $('body').on('click', '.move-all-to-bag', function (e) {
      e.preventDefault();
      var pid;
      var pidsObj;
      var setPids;
      var action = $('.page').data('action');
      $('body').trigger('product:beforeAddToCart', this);
      var addAllToCartUrl = $('.move-all-to-bag').attr('href');
      var type = 'wishlist';
      setPids = [];
      $('.product-grid .product-info:visible').each(function () {
        setPids.push({
          pid: $(this).data('pid'),
          qty: '1',
          options: '[]'
        });
        pidsObj = JSON.stringify(setPids);
        pid = $(this).data('pid');
      });
      var sharedListid = null;

      if ($('.js-shared-fav-page').length > 0) {
        var querystring = $('.page').data('querystring');

        if (querystring) {
          sharedListid = querystring.split('&id=')[1];
        }
      }

      var form = {
        pid: pid,
        pidsObj: pidsObj,
        type: type,
        action: action,
        sharedListid: sharedListid
      };
      $(this).trigger('updateAddToCartFormData', form);

      if (addAllToCartUrl) {
        $.spinner().start();
        $.ajax({
          url: addAllToCartUrl,
          method: 'POST',
          data: form,
          success: function success(data) {
            var isSuccess = true;
            $('.main-wishlist').empty().append(DOMpurify.sanitize(data.renderedTemplate));
            $('.js-favourite-heading').empty().append(DOMpurify.sanitize(data.senderName));

            if (DOMpurify.sanitize(data.wishlistOOSError)) {
              $('.main-wishlist').empty().append(DOMpurify.sanitize(data.renderedTemplate));
              var $element = $('.product-grid:visible').find('.product-info.pid-' + DOMpurify.sanitize(data.productID) + '.product-tile-wrapper');
              $element.find('.invalid-feedback').css('display', 'block').addClass('visible').empty().append(DOMpurify.sanitize(data.OOSProductErrorMsg));
              $element.find('.secondary-button-custom').addClass('is-invalid').closest('.buttons-wishlist');
              $element.find('.sold-out').addClass('d-none');
              $element.find('.remove-sold-out').removeClass('d-none');
              errorMessages();
              $.spinner().stop();

              if ($('.float-toast-message-perma').children('.float-toast-errors').length !== 0) {
                $('.cart-toasters').find('.toast-alert-error.wishlist-error').removeClass('d-none').empty().append(DOMpurify.sanitize(data.message));
                var toastMargin = $('.float-toast-message-perma').height() + 18;
                $('.cart-toasters .float-toast-message').css('margin-top', toastMargin);
              }
            } else if (data.unavailableProducts && data.unavailableProducts.length > 0) {
              fetchingSoldOutProducts(data);
              $.spinner().stop();
              floatMessagesForWishlist(data);
            } else if (!data.masterProducts && data.masterProducts === undefined) {
              $('body').trigger('product:afterAddToCart', data.message);
              $.spinner().stop();
              base.miniCartReportingUrl(data.reportingURL);
              $('.minicart-quantity').html(DOMpurify.sanitize(data.quantityTotal)).removeClass('invisible');
              var isProductAdded = true;
              $('.minicart').trigger('minicart:update', [isProductAdded, data.toastMessageDisplayTime]);
              var selector = '.minicart .popover';
              var timer = setTimeout(function () {
                $(selector).removeClass('show');
              }, data.miniBagFlyOutTimeinMilliSec);
              $('.minicart .popover').on('mouseenter', function () {
                clearTimeout(timer);
              });
              $('.cart-toasters .toast-alert-error.wishlist-error').addClass('d-none');
              clientSideUtil.floatToastMessage(data.message, data.toastMessageDisplayTime, isSuccess);
            }

            if (data.masterProducts && data.masterProducts.length > 0) {
              fetchingMasterProducts(data);
              $.spinner().stop();
              floatMessagesForWishlist(data);
            } else if (data.cartRenderedTemplate) {
              location.reload();
            }
          },
          error: function error() {
            $.spinner().stop();
          }
        });
      }
    });
  },
  shareWishlistPartiallyEnabled: function shareWishlistPartiallyEnabled() {
    $('body').on('click', '.share-icon.partially-enabled', function (e) {
      e.preventDefault();
      var addAllToCartUrl = $('.share-icon').attr('href');
      var action = $('.page').data('action');
      var form = {
        action: action
      };

      if (addAllToCartUrl) {
        $.spinner().start();
        $.ajax({
          url: addAllToCartUrl,
          method: 'GET',
          data: form,
          success: function success(data) {
            $.spinner().stop();
            $('.main-wishlist').empty().append(DOMpurify.sanitize(data.renderedTemplate));
            fetchingMasterProducts(data);
            floatMessagesForWishlist(data);
          },
          error: function error() {
            $.spinner().stop();
          }
        });
      }
    });
  },
  updateAddToCart: function updateAddToCart() {
    $('body').on('product:updateAddToCart', function (e, response) {
      if (!response.product.available || !response.product.readyToOrder) {
        $('button.move-to-cart-wishlist', response.$productContainer).attr('disabled', true);
      } else {
        $('button.move-to-cart-wishlist', response.$productContainer).attr('disabled', !response.product.available);
        var moveToCartLabel = $('button.move-to-cart-wishlist', response.$productContainer).data('primary-label');
        $('button.move-to-cart-wishlist', response.$productContainer).html(moveToCartLabel);
      }
    });
  },
  removingBorderFromLastRow: function removingBorderFromLastRow() {
    borderBottomInRows();
  },
  activeTabCartPage: function activeTabCartPage() {
    $(document).on('click', '.js-shopping', function () {
      $('.js-shopping').removeClass('active-selected');
      $(this).addClass('active-selected');
    });
  },
  scrollingToMyFavouriteSection: function scrollingToMyFavouriteSection() {
    $(document).on('click', '.my-favourite-cart', function () {
      var $selectorParents = $('.main-wishlist:visible');
      var scrollValue = $selectorParents.offset().top;
      clientSideUtil.windowScrollToDestination(scrollValue, 0, 'smooth');
    });
    $(document).on('scroll', function () {
      if ($('.cart-head').length !== 0 && $('.cart-head:visible').isInViewport()) {
        $('.js-shopping').removeClass('active-selected');
        $('.shopping-cart').addClass('active-selected');
      }
    });
  },
  closeFlyout: function closeFlyout() {
    $('body').on('click', '.edit-flyout-cancel-btn', function () {
      $('#editWishlistProductModal').modal('hide');
    });
  },
  errorMessageOnRefresh: function errorMessageOnRefresh() {
    deleteLocalStorageErrorShare();
  },
  miniwishlist: function miniwishlist() {
    $('body').on('touchstart click', function (e) {
      if ($('.miniwishlist').has(e.target).length <= 0) {
        setTimeout(function () {
          $('.miniwishlist .popover').removeClass('show');
        }, MENUCLOSEDELAY);
      }
    }); // keep miniwishlist open on hover, overwrite minicart button mouseleaves

    $('.miniwishlist').on('mouseenter touchstart', function (e) {
      if (e.target.closest('a') !== null && e.target.closest('a') === e.currentTarget.firstElementChild) {
        e.preventDefault();

        if (!$(this).find('.popover').hasClass('show')) {
          popupdisplay(true);
        }

        $('.miniwishlist .popover').addClass('show');
      }
    }).on('mouseleave', function () {
      setTimeout(function () {
        $('.miniwishlist .popover').removeClass('show');
      }, MENUCLOSEDELAY);
    });
    $('.miniwishlist').on('mouseleave', function (event) {
      if (event.type === 'focusout' && $('.miniwishlist .popover').has(event.target).length > 0 || event.type === 'mouseleave' && $(event.target).is('.miniwishlist .quantity') || $('body').hasClass('modal-open')) {
        event.stopPropagation();
        return;
      }

      setTimeout(function () {
        $('.miniwishlist .popover').removeClass('show');
      }, MENUCLOSEDELAY);
    });
    $(document).on('click', '.miniwishlist .view-wishlist-btn', function () {
      $('body').trigger('event:viewFavorites');
    });
    $(document).on('touchstart click', '.miniwishlist > a > i.mk-icon', function () {
      var windowWidth = $(window).width();

      if (windowWidth > SCREENSIZE.DESKTOPMIN) {
        $('body').trigger('event:heartIconClick');
      } else {
        $('body').trigger('event:heartIconClickEvent');
      }
    });
    $(document).on('click', '.navbar-nav.secondary-nav-container li.nav-item-heading a, .wishlist-icon a, .view-wishlist-button a', function (e) {
      if (($(this).children('i.mk-icon.mk-heart').length !== 0 || $(this).hasClass('view-wishlist-btn')) && $(this).attr('href').indexOf('#') > 0 && window.location.href.indexOf('/cart') > 0) {
        e.preventDefault();

        if ($('.navbar-toggler').hasClass('open')) {
          $('.navbar-toggler').trigger('click');
        }

        if ($('.miniwishlist .popover').hasClass('show')) {
          $('.miniwishlist .popover').removeClass('show');
        }

        var $selectorParents = $('.main-wishlist:visible');
        var scrollValue = $selectorParents.offset().top;
        clientSideUtil.windowScrollToDestination(scrollValue, 0, 'smooth');
      }
    });
  },
  updateHeaderHeartIcon: function updateHeaderHeartIcon(wishlistedItems) {
    if (wishlistedItems !== undefined) {
      fillHeaderHeart(wishlistedItems);
    }
  },
  initialLoadCartPage: function initialLoadCartPage() {
    $(window).on('load', function () {
      setTimeout(function () {
        if (window.location.href.indexOf('/cart') > 0 && (window.location.hash === '#mobile-wishlist-anchor' || window.location.hash === '#wishlist-anchor')) {
          var $selectorParents = $('.main-wishlist:visible');
          var scrollValue = $selectorParents.offset().top;
          clientSideUtil.windowScrollToDestination(scrollValue, 0, 'smooth');
        }
      });
    });
  }
};
fillHeaderHeart(getWishlistedProducts());

/***/ }),

/***/ "./cartridges/app_mk_storefront/cartridge/client/default/js/storeLocator/storeLocator.js":
/*!***********************************************************************************************!*\
  !*** ./cartridges/app_mk_storefront/cartridge/client/default/js/storeLocator/storeLocator.js ***!
  \***********************************************************************************************/
/***/ (function(module) {

"use strict";
/* globals google */

/**
 * appends params to a url
 * @param {string} url - Original url
 * @param {Object} params - Parameters to append
 * @returns {string} result url with appended parameters
 */

function appendToUrl(url, params) {
  var newUrl = url;
  newUrl += (newUrl.indexOf('?') !== -1 ? '&' : '?') + Object.keys(params).map(function (key) {
    return key + '=' + encodeURIComponent(params[key]);
  }).join('&');
  return newUrl;
}
/**
 * Uses google maps api to render a map
 */


function maps() {
  var map;
  var infowindow = new google.maps.InfoWindow(); // Init U.S. Map in the center of the viewport

  var latlng = new google.maps.LatLng(37.09024, -95.712891);
  var mapOptions = {
    scrollwheel: false,
    zoom: 4,
    center: latlng
  };
  map = new google.maps.Map($('.map-canvas')[0], mapOptions);
  var mapdiv = $('.map-canvas').attr('data-locations');
  mapdiv = JSON.parse(mapdiv);
  var bounds = new google.maps.LatLngBounds(); // Customized google map marker icon with svg format

  var markerImg = {
    path: 'M13.5,30.1460153 L16.8554555,25.5 L20.0024287,25.5 C23.039087,25.5 25.5,' + '23.0388955 25.5,20.0024287 L25.5,5.99757128 C25.5,2.96091298 23.0388955,0.5 ' + '20.0024287,0.5 L5.99757128,0.5 C2.96091298,0.5 0.5,2.96110446 0.5,5.99757128 ' + 'L0.5,20.0024287 C0.5,23.039087 2.96110446,25.5 5.99757128,25.5 L10.1445445,' + '25.5 L13.5,30.1460153 Z',
    fillColor: '#0070d2',
    fillOpacity: 1,
    scale: 1.1,
    strokeColor: 'white',
    strokeWeight: 1,
    anchor: new google.maps.Point(13, 30),
    labelOrigin: new google.maps.Point(12, 12)
  };
  Object.keys(mapdiv).forEach(function (key) {
    var item = mapdiv[key];
    var lable = parseInt(key, 10) + 1;
    var storeLocation = new google.maps.LatLng(item.latitude, item.longitude);
    var marker = new google.maps.Marker({
      position: storeLocation,
      map: map,
      title: item.name,
      icon: markerImg,
      label: {
        text: lable.toString(),
        color: 'white',
        fontSize: '16px'
      }
    });
    marker.addListener('click', function () {
      infowindow.setOptions({
        content: item.infoWindowHtml
      });
      infowindow.open(map, marker);
    }); // Create a minimum bound based on a set of storeLocations

    bounds.extend(marker.position);
  }); // Fit the all the store marks in the center of a minimum bounds when any store has been found.

  if (mapdiv && mapdiv.length !== 0) {
    map.fitBounds(bounds);
  }
}
/**
 * Renders the results of the search and updates the map
 * @param {Object} data - Response from the server
 */


function updateStoresResults(data) {
  var $resultsDiv = $('.store-locator-container .results');
  var $mapDiv = $('.map-canvas');
  var hasResults = data.stores.length > 0;
  $resultsDiv.empty().data('has-results', hasResults).data('radius', data.radius).data('search-key', data.searchKey);
  $mapDiv.attr('data-locations', data.locations);

  if ($mapDiv.data('has-google-api')) {
    maps();
  } else {
    $('.store-locator-no-apiKey').show();
  }

  if (data.storesResultsHtml) {
    $resultsDiv.append(data.storesResultsHtml);
  }

  if (!hasResults) {
    $('.store-locator-no-results').removeClass('d-none');
  } else {
    $('.store-locator-no-results').addClass('d-none');
  }
}
/**
 * Search for stores with new zip code
 * @param {HTMLElement} element - the target html element
 * @returns {boolean} false to prevent default event
 */


function _search(element) {
  var dialog = element.closest('.in-store-inventory-dialog');
  var spinner = dialog.length ? dialog.spinner() : $.spinner();
  element.parents('.modal-content').spinner().start();
  var $form = element.closest('.store-locator');
  var url = $form.attr('action');
  var payload = $form.is('form') ? $form.serialize() : {
    postalCode: $form.find('[name="postalCode"]').val()
  };
  $.ajax({
    url: url,
    type: $form.attr('method'),
    data: payload,
    dataType: 'json',
    success: function success(data) {
      spinner.stop();
      updateStoresResults(data);
      $('.select-store').prop('disabled', true);
      $('body').trigger('event:storeSearchQuery', data);
    }
  });
  return false;
}

module.exports = {
  init: function init() {
    if ($('.map-canvas').data('has-google-api')) {
      maps();
    } else {
      $('.store-locator-no-apiKey').show();
    }

    if (!$('.results').data('has-results')) {
      $('.store-locator-no-results').removeClass('d-none');
    }
  },
  detectLocation: function detectLocation() {
    // clicking on detect location.
    $('.detect-location').on('click', function () {
      $.spinner().start();

      if (!navigator.geolocation) {
        $.spinner().stop();
        return;
      }

      navigator.geolocation.getCurrentPosition(function (position) {
        var $detectLocationButton = $('.detect-location');
        var url = $detectLocationButton.data('action');
        var radius = $('.results').data('radius');
        var urlParams = {
          radius: radius,
          lat: position.coords.latitude,
          long: position.coords.longitude
        };
        url = appendToUrl(url, urlParams);
        $.ajax({
          url: url,
          type: 'get',
          dataType: 'json',
          success: function success(data) {
            $.spinner().stop();
            updateStoresResults(data);
            $('.select-store').prop('disabled', true);
          }
        });
      });
    });
  },
  search: function search() {
    $('.store-locator-container form.store-locator').submit(function (e) {
      e.preventDefault();

      _search($(this));
    });
    $('.store-locator-container .btn-storelocator-search[type="button"]').click(function (e) {
      e.preventDefault();

      _search($(this));
    });
  },
  changeRadius: function changeRadius() {
    $('.store-locator-container .radius').change(function () {
      var radius = $(this).val();
      var searchKeys = $('.results').data('search-key');
      var url = $(this).data('action-url');
      var urlParams = {};

      if (searchKeys.postalCode) {
        urlParams = {
          radius: radius,
          postalCode: searchKeys.postalCode
        };
      } else if (searchKeys.lat && searchKeys.long) {
        urlParams = {
          radius: radius,
          lat: searchKeys.lat,
          long: searchKeys.long
        };
      }

      url = appendToUrl(url, urlParams);
      var dialog = $(this).closest('.in-store-inventory-dialog');
      var spinner = dialog.length ? dialog.spinner() : $.spinner();
      spinner.start();
      $.ajax({
        url: url,
        type: 'get',
        dataType: 'json',
        success: function success(data) {
          spinner.stop();
          updateStoresResults(data);
          $('.select-store').prop('disabled', true);
        }
      });
    });
  },
  selectStore: function selectStore() {
    $('.store-locator-container').on('click', '.select-store', function (e) {
      e.preventDefault();
      var selectedStore = $(':checked', '.results-card .results');
      var data = {
        storeID: selectedStore.val(),
        searchRadius: $('#radius').val(),
        searchPostalCode: $('.results').data('search-key').postalCode,
        storeDetailsHtml: selectedStore.siblings('label').find('.store-details').html(),
        event: e
      };
      $('body').trigger('store:selected', data);
    });
  },
  updateSelectStoreButton: function updateSelectStoreButton() {
    $('body').on('change', '.select-store-input', function () {
      $('.select-store').prop('disabled', false);
    });
  },
  clearStoresResults: function clearStoresResults() {
    $(document).on('click', 'form.store-locator button[type="submit"]', function () {
      var data = {};
      data.stores = [];
      data.stores.length = 0;
      updateStoresResults(data);
    });
  }
};
$(document).ready(function () {
  $('.find-store-link').on('click', function () {
    $('body').trigger('event:storeLocator');
  });
});

/***/ }),

/***/ "./cartridges/app_mk_storefront/cartridge/client/default/js/thirdParty/mediaZoom.js":
/*!******************************************************************************************!*\
  !*** ./cartridges/app_mk_storefront/cartridge/client/default/js/thirdParty/mediaZoom.js ***!
  \******************************************************************************************/
/***/ (function(module) {

/* jshint -W071, -W074 */

/* global jQuery:false */

/* Disabled options are:
 * W071: This function has too many statements
 * W074: This function's cyclomatic complexity is too high
 */

/*
 *	jQuery ezPlus 1.1.6
 *	Demo's and documentation:
 *	http://igorlino.github.io/elevatezoom-plus/
 *
 *	licensed under MIT license.
 *	http://en.wikipedia.org/wiki/MIT_License
 *
 */
function productMediaZoom() {
  if (typeof Object.create !== 'function') {
    Object.create = function (obj) {
      function F() {}

      F.prototype = obj;
      return new F();
    };
  }

  (function ($, window, document, undefined) {
    var EZP = {
      init: function init(options, elem) {
        var self = this;
        var $galleries;
        self.elem = elem;
        self.$elem = $(elem);
        self.imageSrc = self.$elem.data('zoom-image') ? self.$elem.data('zoom-image') : self.$elem.attr('src');
        self.options = $.extend({}, $.fn.ezPlus.options, self.responsiveConfig(options || {}));

        if (!self.options.enabled) {
          return;
        } //TINT OVERRIDE SETTINGS


        if (self.options.tint) {
          self.options.lensColour = 'none'; //colour of the lens background

          self.options.lensOpacity = '1'; //opacity of the lens
        } //INNER OVERRIDE SETTINGS


        if (self.options.zoomType === 'inner') {
          self.options.showLens = false;
        } //Remove alt on hover


        self.$elem.parent().removeAttr('title').removeAttr('alt');
        self.zoomImage = self.imageSrc;
        self.refresh(1); //Create the image swap from the gallery

        $galleries = $(self.options.gallery ? '#' + self.options.gallery : self.options.gallerySelector);
        $galleries.on('click.zoom', self.options.galleryItem, function (e) {
          //Set a class on the currently active gallery image
          if (self.options.galleryActiveClass) {
            $(self.options.galleryItem, $galleries).removeClass(self.options.galleryActiveClass);
            $(this).addClass(self.options.galleryActiveClass);
          } //stop any link on the a tag from working


          if (this.tagName === 'A') {
            e.preventDefault();
          } //call the swap image function


          if ($(this).data('zoom-image')) {
            self.zoomImagePre = $(this).data('zoom-image');
          } else {
            self.zoomImagePre = $(this).data('image');
          }

          self.swaptheimage($(this).data('image'), self.zoomImagePre);

          if (this.tagName === 'A') {
            return false;
          }
        });
      },
      refresh: function refresh(length) {
        var self = this;
        setTimeout(function () {
          self.fetch(self.imageSrc);
        }, length || self.options.refresh);
      },
      fetch: function fetch(imgsrc) {
        //get the image
        var self = this;
        var newImg = new Image();

        newImg.onload = function () {
          //set the large image dimensions - used to calculte ratio's
          self.largeWidth = newImg.width;
          self.largeHeight = newImg.height; //once image is loaded start the calls

          self.startZoom();
          self.currentImage = self.imageSrc; //let caller know image has been loaded

          self.options.onZoomedImageLoaded(self.$elem);
        };

        self.setImageSource(newImg, imgsrc); // this must be done AFTER setting onload

        return;
      },
      setImageSource: function setImageSource(image, src) {
        //sets an image's source.
        image.src = src;
      },
      startZoom: function startZoom() {
        var self = this; //get dimensions of the non zoomed image

        self.nzWidth = self.$elem.width();
        self.nzHeight = self.$elem.height(); //activated elements

        self.isWindowActive = false;
        self.isLensActive = false;
        self.isTintActive = false;
        self.overWindow = false; //CrossFade Wrapper

        if (self.options.imageCrossfade) {
          self.zoomWrap = self.$elem.wrap('<div style="height:' + self.nzHeight + 'px;width:' + self.nzWidth + 'px;" class="zoomWrapper" />');
          self.$elem.css('position', 'absolute');
        }

        self.zoomLock = 1;
        self.scrollingLock = false;
        self.changeBgSize = false;
        self.currentZoomLevel = self.options.zoomLevel; //get offset of the non zoomed image

        self.nzOffset = self.$elem.offset(); //calculate the width ratio of the large/small image

        self.widthRatio = self.largeWidth / self.currentZoomLevel / self.nzWidth;
        self.heightRatio = self.largeHeight / self.currentZoomLevel / self.nzHeight;

        function getWindowZoomStyle() {
          return 'overflow: hidden;' + 'background-position: 0px 0px;text-align:center;' + 'background-color: ' + String(self.options.zoomWindowBgColour) + ';' + 'width: ' + String(self.options.zoomWindowWidth) + 'px;' + 'height: ' + String(self.options.zoomWindowHeight) + 'px;' + 'float: left;' + 'background-size: ' + self.largeWidth / self.currentZoomLevel + 'px ' + self.largeHeight / self.currentZoomLevel + 'px;' + 'display: none;z-index:100;' + 'border: ' + String(self.options.borderSize) + 'px solid ' + self.options.borderColour + ';' + 'background-repeat: no-repeat;' + 'position: absolute;';
        } //if window zoom


        if (self.options.zoomType === 'window') {
          self.zoomWindowStyle = getWindowZoomStyle();
        }

        function getInnerZoomStyle() {
          //has a border been put on the image? Lets cater for this
          var borderWidth = self.$elem.css('border-left-width');
          return 'overflow: hidden;' + 'margin-left: ' + String(borderWidth) + ';' + 'margin-top: ' + String(borderWidth) + ';' + 'background-position: 0px 0px;' + 'width: ' + String(self.nzWidth) + 'px;' + 'height: ' + String(self.nzHeight) + 'px;' + 'float: left;' + 'display: none;' + 'cursor:' + self.options.cursor + ';' + 'px solid ' + self.options.borderColour + ';' + 'background-repeat: no-repeat;' + 'position: absolute;';
        } //if inner  zoom


        if (self.options.zoomType === 'inner') {
          self.zoomWindowStyle = getInnerZoomStyle();
        }

        function getWindowLensStyle() {
          var lensHeight, lensWidth; // adjust images less than the window height

          if (self.nzHeight < self.options.zoomWindowHeight / self.heightRatio) {
            lensHeight = self.nzHeight;
          } else {
            lensHeight = String(self.options.zoomWindowHeight / self.heightRatio);
          }

          if (self.largeWidth < self.options.zoomWindowWidth) {
            lensWidth = self.nzWidth;
          } else {
            lensWidth = String(self.options.zoomWindowWidth / self.widthRatio);
          }

          return 'background-position: 0px 0px;width: ' + String(self.options.zoomWindowWidth / self.widthRatio) + 'px;' + 'height: ' + String(self.options.zoomWindowHeight / self.heightRatio) + 'px;float: right;display: none;' + 'overflow: hidden;' + 'z-index: 999;' + 'opacity:' + self.options.lensOpacity + ';filter: alpha(opacity = ' + self.options.lensOpacity * 100 + '); zoom:1;' + 'width:' + lensWidth + 'px;' + 'height:' + lensHeight + 'px;' + 'background-color:' + self.options.lensColour + ';' + 'cursor:' + self.options.cursor + ';' + 'border: ' + self.options.lensBorderSize + 'px' + ' solid ' + self.options.lensBorderColour + ';background-repeat: no-repeat;position: absolute;';
        } //lens style for window zoom


        if (self.options.zoomType === 'window') {
          self.lensStyle = getWindowLensStyle();
        } //tint style


        self.tintStyle = 'display: block;' + 'position: absolute;' + 'background-color: ' + self.options.tintColour + ';' + 'filter:alpha(opacity=0);' + 'opacity: 0;' + 'width: ' + self.nzWidth + 'px;' + 'height: ' + self.nzHeight + 'px;'; //lens style for lens zoom with optional round for modern browsers

        self.lensRound = '';

        if (self.options.zoomType === 'lens') {
          self.lensStyle = 'background-position: 0px 0px;' + 'float: left;display: none;' + 'border: ' + String(self.options.borderSize) + 'px solid ' + self.options.borderColour + ';' + 'width:' + String(self.options.lensSize) + 'px;' + 'height:' + String(self.options.lensSize) + 'px;' + 'background-repeat: no-repeat;position: absolute;';
        } //does not round in all browsers


        if (self.options.lensShape === 'round') {
          self.lensRound = 'border-top-left-radius: ' + String(self.options.lensSize / 2 + self.options.borderSize) + 'px;' + 'border-top-right-radius: ' + String(self.options.lensSize / 2 + self.options.borderSize) + 'px;' + 'border-bottom-left-radius: ' + String(self.options.lensSize / 2 + self.options.borderSize) + 'px;' + 'border-bottom-right-radius: ' + String(self.options.lensSize / 2 + self.options.borderSize) + 'px;';
        } //create the div's                                                + ""
        //self.zoomContainer = $('<div/>').addClass('zoomContainer').css({"position":"relative", "height":self.nzHeight, "width":self.nzWidth});


        self.zoomContainer = $('<div class="zoomContainer" style="' + 'position:absolute;' + 'left:' + self.nzOffset.left + 'px;' + 'top:' + self.nzOffset.top + 'px;' + 'height:' + self.nzHeight + 'px;' + '' + 'width:' + self.nzWidth + 'px;' + 'z-index:' + self.options.zIndex + '"></div>');
        $(self.options.zoomContainerAppendTo).append(self.zoomContainer); //this will add overflow hidden and contrain the lens on lens mode

        if (self.options.containLensZoom && self.options.zoomType === 'lens') {
          self.zoomContainer.css('overflow', 'hidden');
        }

        if (self.options.zoomType !== 'inner') {
          self.zoomLens = $('<div class="zoomLens" style="' + self.lensStyle + self.lensRound + '">&nbsp;</div>').appendTo(self.zoomContainer).click(function () {
            self.$elem.trigger('click');
          });

          if (self.options.tint) {
            self.tintContainer = $('<div/>').addClass('tintContainer');
            self.zoomTint = $('<div class="zoomTint" style="' + self.tintStyle + '"></div>');
            self.zoomLens.wrap(self.tintContainer);
            self.zoomTintcss = self.zoomLens.after(self.zoomTint); //if tint enabled - set an image to show over the tint

            self.zoomTintImage = $('<img style="' + 'position: absolute; left: 0px; top: 0px; max-width: none; ' + 'width: ' + self.nzWidth + 'px; ' + 'height: ' + self.nzHeight + 'px;" ' + 'src="' + self.imageSrc + '">').appendTo(self.zoomLens).click(function () {
              self.$elem.trigger('click');
            });
          }
        }

        var targetZoomContainer = isNaN(self.options.zoomWindowPosition) ? 'body' : self.zoomContainer; //create zoom window

        self.zoomWindow = $('<div style="z-index:999;' + 'left:' + self.windowOffsetLeft + 'px;' + 'top:' + self.windowOffsetTop + 'px;' + self.zoomWindowStyle + '" class="zoomWindow">&nbsp;</div>').appendTo(targetZoomContainer).click(function () {
          self.$elem.trigger('click');
        });
        self.zoomWindowContainer = $('<div/>').addClass('zoomWindowContainer').css('width', self.options.zoomWindowWidth);
        self.zoomWindow.wrap(self.zoomWindowContainer); //  self.captionStyle = "text-align: left;background-color: black;'+
        // 'color: white;font-weight: bold;padding: 10px;font-family: sans-serif;font-size: 11px";
        // self.zoomCaption = $('<div class="ezplus-caption" '+
        // 'style="'+self.captionStyle+'display: block; width: 280px;">INSERT ALT TAG</div>').appendTo(self.zoomWindow.parent());

        if (self.options.zoomType === 'lens') {
          self.zoomLens.css('background-image', 'url("' + self.imageSrc + '")');
        }

        if (self.options.zoomType === 'window') {
          self.zoomWindow.css('background-image', 'url("' + self.imageSrc + '")');
        }

        if (self.options.zoomType === 'inner') {
          self.zoomWindow.css('background-image', 'url("' + self.imageSrc + '")');
        }
        /*-------------------END THE ZOOM WINDOW AND LENS----------------------------------*/


        if (self.options.touchEnabled) {
          //touch events
          self.$elem.bind('touchmove', function (e) {
            e.preventDefault();
            var touch = e.originalEvent.touches[0] || e.originalEvent.changedTouches[0];
            self.setPosition(touch);
          });
          self.zoomContainer.bind('touchmove', function (e) {
            if (self.options.zoomType === 'inner') {
              self.showHideWindow('show');
            }

            e.preventDefault();
            var touch = e.originalEvent.touches[0] || e.originalEvent.changedTouches[0];
            self.setPosition(touch);
          });
          self.zoomContainer.bind('touchend', function (e) {
            self.showHideWindow('hide');

            if (self.options.showLens) {
              self.showHideLens('hide');
            }

            if (self.options.tint && self.options.zoomType !== 'inner') {
              self.showHideTint('hide');
            }
          });
          self.$elem.bind('touchend', function (e) {
            self.showHideWindow('hide');

            if (self.options.showLens) {
              self.showHideLens('hide');
            }

            if (self.options.tint && self.options.zoomType !== 'inner') {
              self.showHideTint('hide');
            }
          });

          if (self.options.showLens) {
            self.zoomLens.bind('touchmove', function (e) {
              e.preventDefault();
              var touch = e.originalEvent.touches[0] || e.originalEvent.changedTouches[0];
              self.setPosition(touch);
            });
            self.zoomLens.bind('touchend', function (e) {
              self.showHideWindow('hide');

              if (self.options.showLens) {
                self.showHideLens('hide');
              }

              if (self.options.tint && self.options.zoomType !== 'inner') {
                self.showHideTint('hide');
              }
            });
          }
        } //Needed to work in IE


        self.$elem.bind('mousemove', function (e) {
          if (self.overWindow === false) {
            self.setElements('show');
          } //make sure on orientation change the setposition is not fired


          if (self.lastX !== e.clientX || self.lastY !== e.clientY) {
            self.setPosition(e);
            self.currentLoc = e;
          }

          self.lastX = e.clientX;
          self.lastY = e.clientY;
        });
        self.zoomContainer.bind('click', self.options.onImageClick);
        self.zoomContainer.bind('mousemove', function (e) {
          if (self.overWindow === false) {
            self.setElements('show');
          }

          mouseMoveZoomHandler(e);
        });

        function mouseMoveZoomHandler(e) {
          //self.overWindow = true;
          //make sure on orientation change the setposition is not fired
          if (self.lastX !== e.clientX || self.lastY !== e.clientY) {
            self.setPosition(e);
            self.currentLoc = e;
          }

          self.lastX = e.clientX;
          self.lastY = e.clientY;
        }

        var elementToTrack = null;

        if (self.options.zoomType !== 'inner') {
          elementToTrack = self.zoomLens;
        }

        if (self.options.tint && self.options.zoomType !== 'inner') {
          elementToTrack = self.zoomTint;
        }

        if (self.options.zoomType === 'inner') {
          elementToTrack = self.zoomWindow;
        } //register the mouse tracking


        if (elementToTrack) {
          elementToTrack.bind('mousemove', mouseMoveZoomHandler);
        } //  lensFadeOut: 500,  zoomTintFadeIn


        self.zoomContainer.add(self.$elem).mouseenter(function () {
          if (self.overWindow === false) {
            self.setElements('show');
          }
        }).mouseleave(function () {
          if (!self.scrollLock) {
            self.setElements('hide');
            self.options.onDestroy(self.$elem);
          }
        }); //end ove image

        if (self.options.zoomType !== 'inner') {
          self.zoomWindow.mouseenter(function () {
            self.overWindow = true;
            self.setElements('hide');
          }).mouseleave(function () {
            self.overWindow = false;
          });
        } //end ove image
        // var delta = parseInt(e.originalEvent.wheelDelta || -e.originalEvent.detail);
        //      $(this).empty();
        //    return false;
        //fix for initial zoom setting
        //if (self.options.zoomLevel !== 1) {
        //    	self.changeZoomLevel(self.currentZoomLevel);
        //}
        //set the min zoomlevel


        if (self.options.minZoomLevel) {
          self.minZoomLevel = self.options.minZoomLevel;
        } else {
          self.minZoomLevel = self.options.scrollZoomIncrement * 2;
        }

        if (self.options.scrollZoom) {
          self.zoomContainer.add(self.$elem).bind('wheel DOMMouseScroll MozMousePixelScroll', function (e) {
            // in IE there is issue with firing of mouseleave - So check whether still scrolling
            // and on mouseleave check if scrolllock
            self.scrollLock = true;
            clearTimeout($.data(this, 'timer'));
            $.data(this, 'timer', setTimeout(function () {
              self.scrollLock = false; //do something
            }, 250));
            var theEvent = e.originalEvent.deltaY || e.originalEvent.detail * -1; //this.scrollTop += ( delta < 0 ? 1 : -1 ) * 30;
            //   e.preventDefault();

            e.stopImmediatePropagation();
            e.stopPropagation();
            e.preventDefault();

            if (theEvent / 120 > 0) {
              //scrolling up
              if (self.currentZoomLevel >= self.minZoomLevel) {
                self.changeZoomLevel(self.currentZoomLevel - self.options.scrollZoomIncrement);
              }
            } else {
              //scrolling down
              //Check if it has to maintain original zoom window aspect ratio or not
              if (!self.fullheight && !self.fullwidth || !self.options.mantainZoomAspectRatio) {
                if (self.options.maxZoomLevel) {
                  if (self.currentZoomLevel <= self.options.maxZoomLevel) {
                    self.changeZoomLevel(parseFloat(self.currentZoomLevel) + self.options.scrollZoomIncrement);
                  }
                } else {
                  //andy
                  self.changeZoomLevel(parseFloat(self.currentZoomLevel) + self.options.scrollZoomIncrement);
                }
              }
            }

            return false;
          });
        }
      },
      setElements: function setElements(type) {
        var self = this;

        if (!self.options.zoomEnabled) {
          return false;
        }

        if (type === 'show') {
          if (self.isWindowSet) {
            if (self.options.zoomType === 'inner') {
              self.showHideWindow('show');
            }

            if (self.options.zoomType === 'window') {
              self.showHideWindow('show');
            }

            if (self.options.showLens) {
              self.showHideLens('show');
            }

            if (self.options.tint && self.options.zoomType !== 'inner') {
              self.showHideTint('show');
            }
          }
        }

        if (type === 'hide') {
          if (self.options.zoomType === 'window') {
            self.showHideWindow('hide');
          }

          if (!self.options.tint) {
            self.showHideWindow('hide');
          }

          if (self.options.showLens) {
            self.showHideLens('hide');
          }

          if (self.options.tint) {
            self.showHideTint('hide');
          }
        }
      },
      setPosition: function setPosition(e) {
        var self = this;

        if (!self.options.zoomEnabled) {
          return false;
        } //recaclc offset each time in case the image moves
        //this can be caused by other on page elements


        self.nzHeight = self.$elem.height();
        self.nzWidth = self.$elem.width();
        self.nzOffset = self.$elem.offset();

        if (self.options.tint && self.options.zoomType !== 'inner') {
          self.zoomTint.css({
            top: 0,
            left: 0
          });
        } //set responsive
        //will checking if the image needs changing before running this code work faster?


        if (self.options.responsive && !self.options.scrollZoom) {
          if (self.options.showLens) {
            var lensHeight, lensWidth;

            if (self.nzHeight < self.options.zoomWindowWidth / self.widthRatio) {
              lensHeight = self.nzHeight;
            } else {
              lensHeight = String(self.options.zoomWindowHeight / self.heightRatio);
            }

            if (self.largeWidth < self.options.zoomWindowWidth) {
              lensWidth = self.nzWidth;
            } else {
              lensWidth = self.options.zoomWindowWidth / self.widthRatio;
            }

            self.widthRatio = self.largeWidth / self.nzWidth;
            self.heightRatio = self.largeHeight / self.nzHeight;

            if (self.options.zoomType !== 'lens') {
              //possibly dont need to keep recalcalculating
              //if the lens is heigher than the image, then set lens size to image size
              if (self.nzHeight < self.options.zoomWindowWidth / self.widthRatio) {
                lensHeight = self.nzHeight;
              } else {
                lensHeight = String(self.options.zoomWindowHeight / self.heightRatio);
              }

              if (self.nzWidth < self.options.zoomWindowHeight / self.heightRatio) {
                lensWidth = self.nzWidth;
              } else {
                lensWidth = String(self.options.zoomWindowWidth / self.widthRatio);
              }

              self.zoomLens.css({
                'width': lensWidth,
                'height': lensHeight
              });

              if (self.options.tint) {
                self.zoomTintImage.css({
                  'width': self.nzWidth,
                  'height': self.nzHeight
                });
              }
            }

            if (self.options.zoomType === 'lens') {
              self.zoomLens.css({
                width: String(self.options.lensSize) + 'px',
                height: String(self.options.lensSize) + 'px'
              });
            } //end responsive image change

          }
        } //container fix


        self.zoomContainer.css({
          top: self.nzOffset.top,
          left: self.nzOffset.left
        });
        self.mouseLeft = parseInt(e.pageX - self.nzOffset.left);
        self.mouseTop = parseInt(e.pageY - self.nzOffset.top); //calculate the Location of the Lens
        //calculate the bound regions - but only if zoom window

        if (self.options.zoomType === 'window') {
          var zoomLensHeight = self.zoomLens.height() / 2;
          var zoomLensWidth = self.zoomLens.width() / 2;
          self.Etoppos = self.mouseTop < 0 + zoomLensHeight;
          self.Eboppos = self.mouseTop > self.nzHeight - zoomLensHeight - self.options.lensBorderSize * 2;
          self.Eloppos = self.mouseLeft < 0 + zoomLensWidth;
          self.Eroppos = self.mouseLeft > self.nzWidth - zoomLensWidth - self.options.lensBorderSize * 2;
        } //calculate the bound regions - but only for inner zoom


        if (self.options.zoomType === 'inner') {
          self.Etoppos = self.mouseTop < self.nzHeight / 2 / self.heightRatio;
          self.Eboppos = self.mouseTop > self.nzHeight - self.nzHeight / 2 / self.heightRatio;
          self.Eloppos = self.mouseLeft < 0 + self.nzWidth / 2 / self.widthRatio;
          self.Eroppos = self.mouseLeft > self.nzWidth - self.nzWidth / 2 / self.widthRatio - self.options.lensBorderSize * 2;
        } // if the mouse position of the slider is one of the outerbounds, then hide  window and lens


        if (self.mouseLeft < 0 || self.mouseTop < 0 || self.mouseLeft > self.nzWidth || self.mouseTop > self.nzHeight) {
          self.setElements('hide');
          return;
        } //else continue with operations
        else {
          //lens options
          if (self.options.showLens) {
            //		self.showHideLens('show');
            //set background position of lens
            self.lensLeftPos = String(Math.floor(self.mouseLeft - self.zoomLens.width() / 2));
            self.lensTopPos = String(Math.floor(self.mouseTop - self.zoomLens.height() / 2));
          } //adjust the background position if the mouse is in one of the outer regions
          //Top region


          if (self.Etoppos) {
            self.lensTopPos = 0;
          } //Left Region


          if (self.Eloppos) {
            self.windowLeftPos = 0;
            self.lensLeftPos = 0;
            self.tintpos = 0;
          } //Set bottom and right region for window mode


          if (self.options.zoomType === 'window') {
            if (self.Eboppos) {
              self.lensTopPos = Math.max(self.nzHeight - self.zoomLens.height() - self.options.lensBorderSize * 2, 0);
            }

            if (self.Eroppos) {
              self.lensLeftPos = self.nzWidth - self.zoomLens.width() - self.options.lensBorderSize * 2;
            }
          } //Set bottom and right region for inner mode


          if (self.options.zoomType === 'inner') {
            if (self.Eboppos) {
              self.lensTopPos = Math.max(self.nzHeight - self.options.lensBorderSize * 2, 0);
            }

            if (self.Eroppos) {
              self.lensLeftPos = self.nzWidth - self.nzWidth - self.options.lensBorderSize * 2;
            }
          } //if lens zoom


          if (self.options.zoomType === 'lens') {
            self.windowLeftPos = String(((e.pageX - self.nzOffset.left) * self.widthRatio - self.zoomLens.width() / 2) * -1);
            self.windowTopPos = String(((e.pageY - self.nzOffset.top) * self.heightRatio - self.zoomLens.height() / 2) * -1);
            self.zoomLens.css('background-position', self.windowLeftPos + 'px ' + self.windowTopPos + 'px');

            if (self.changeBgSize) {
              if (self.nzHeight > self.nzWidth) {
                if (self.options.zoomType === 'lens') {
                  self.zoomLens.css('background-size', self.largeWidth / self.newvalueheight + 'px ' + self.largeHeight / self.newvalueheight + 'px');
                }

                self.zoomWindow.css('background-size', self.largeWidth / self.newvalueheight + 'px ' + self.largeHeight / self.newvalueheight + 'px');
              } else {
                if (self.options.zoomType === 'lens') {
                  self.zoomLens.css('background-size', self.largeWidth / self.newvaluewidth + 'px ' + self.largeHeight / self.newvaluewidth + 'px');
                }

                self.zoomWindow.css('background-size', self.largeWidth / self.newvaluewidth + 'px ' + self.largeHeight / self.newvaluewidth + 'px');
              }

              self.changeBgSize = false;
            }

            self.setWindowPosition(e);
          } //if tint zoom


          if (self.options.tint && self.options.zoomType !== 'inner') {
            self.setTintPosition(e);
          } //set the css background position


          if (self.options.zoomType === 'window') {
            self.setWindowPosition(e);
          }

          if (self.options.zoomType === 'inner') {
            self.setWindowPosition(e);
          }

          if (self.options.showLens) {
            if (self.fullwidth && self.options.zoomType !== 'lens') {
              self.lensLeftPos = 0;
            }

            self.zoomLens.css({
              left: self.lensLeftPos + 'px',
              top: self.lensTopPos + 'px'
            });
          }
        } //end else

      },
      showHideZoomContainer: function showHideZoomContainer(change) {
        var self = this;

        if (change === 'show') {
          if (self.zoomContainer) {
            self.zoomContainer.show();
          }
        }

        if (change === 'hide') {
          if (self.zoomContainer) {
            self.zoomContainer.hide();
          }
        }
      },
      showHideWindow: function showHideWindow(change) {
        var self = this;

        if (change === 'show') {
          if (!self.isWindowActive && self.zoomWindow) {
            self.options.onShow(self);

            if (self.options.zoomWindowFadeIn) {
              self.zoomWindow.stop(true, true, false).fadeIn(self.options.zoomWindowFadeIn);
            } else {
              self.zoomWindow.show();
            }

            self.isWindowActive = true;
          }
        }

        if (change === 'hide') {
          if (self.isWindowActive) {
            if (self.options.zoomWindowFadeOut) {
              self.zoomWindow.stop(true, true).fadeOut(self.options.zoomWindowFadeOut, function () {
                if (self.loop) {
                  //stop moving the zoom window when zoom window is faded out
                  clearInterval(self.loop);
                  self.loop = false;
                }
              });
            } else {
              self.zoomWindow.hide();
            }

            self.isWindowActive = false;
          }
        }
      },
      showHideLens: function showHideLens(change) {
        var self = this;

        if (change === 'show') {
          if (!self.isLensActive) {
            if (self.options.lensFadeIn && self.zoomLens) {
              self.zoomLens.stop(true, true, false).fadeIn(self.options.lensFadeIn);
            } else {
              self.zoomLens.show();
            }

            self.isLensActive = true;
          }
        }

        if (change === 'hide') {
          if (self.isLensActive) {
            if (self.options.lensFadeOut) {
              self.zoomLens.stop(true, true).fadeOut(self.options.lensFadeOut);
            } else {
              self.zoomLens.hide();
            }

            self.isLensActive = false;
          }
        }
      },
      showHideTint: function showHideTint(change) {
        var self = this;

        if (change === 'show') {
          if (!self.isTintActive && self.zoomTint) {
            if (self.options.zoomTintFadeIn) {
              self.zoomTint.css('opacity', self.options.tintOpacity).animate().stop(true, true).fadeIn('slow');
            } else {
              self.zoomTint.css('opacity', self.options.tintOpacity).animate();
              self.zoomTint.show();
            }

            self.isTintActive = true;
          }
        }

        if (change === 'hide') {
          if (self.isTintActive) {
            if (self.options.zoomTintFadeOut) {
              self.zoomTint.stop(true, true).fadeOut(self.options.zoomTintFadeOut);
            } else {
              self.zoomTint.hide();
            }

            self.isTintActive = false;
          }
        }
      },
      setLensPosition: function setLensPosition(e) {},
      setWindowPosition: function setWindowPosition(e) {
        //return obj.slice( 0, count );
        var self = this;

        if (!isNaN(self.options.zoomWindowPosition)) {
          switch (self.options.zoomWindowPosition) {
            case 1:
              //done
              self.windowOffsetTop = self.options.zoomWindowOffsetY; //DONE - 1

              self.windowOffsetLeft = +self.nzWidth; //DONE 1, 2, 3, 4, 16

              break;

            case 2:
              if (self.options.zoomWindowHeight > self.nzHeight) {
                //positive margin
                self.windowOffsetTop = (self.options.zoomWindowHeight / 2 - self.nzHeight / 2) * -1;
                self.windowOffsetLeft = self.nzWidth; //DONE 1, 2, 3, 4, 16
              } else {
                //negative margin
                $.noop();
              }

              break;

            case 3:
              //done
              self.windowOffsetTop = self.nzHeight - self.zoomWindow.height() - self.options.borderSize * 2; //DONE 3,9

              self.windowOffsetLeft = self.nzWidth; //DONE 1, 2, 3, 4, 16

              break;

            case 4:
              //done
              self.windowOffsetTop = self.nzHeight; //DONE - 4,5,6,7,8

              self.windowOffsetLeft = self.nzWidth; //DONE 1, 2, 3, 4, 16

              break;

            case 5:
              //done
              self.windowOffsetTop = self.nzHeight; //DONE - 4,5,6,7,8

              self.windowOffsetLeft = self.nzWidth - self.zoomWindow.width() - self.options.borderSize * 2; //DONE - 5,15

              break;

            case 6:
              if (self.options.zoomWindowHeight > self.nzHeight) {
                //positive margin
                self.windowOffsetTop = self.nzHeight; //DONE - 4,5,6,7,8

                self.windowOffsetLeft = (self.options.zoomWindowWidth / 2 - self.nzWidth / 2 + self.options.borderSize * 2) * -1;
              } else {
                //negative margin
                $.noop();
              }

              break;

            case 7:
              //done
              self.windowOffsetTop = self.nzHeight; //DONE - 4,5,6,7,8

              self.windowOffsetLeft = 0; //DONE 7, 13

              break;

            case 8:
              //done
              self.windowOffsetTop = self.nzHeight; //DONE - 4,5,6,7,8

              self.windowOffsetLeft = (self.zoomWindow.width() + self.options.borderSize * 2) * -1; //DONE 8,9,10,11,12

              break;

            case 9:
              //done
              self.windowOffsetTop = self.nzHeight - self.zoomWindow.height() - self.options.borderSize * 2; //DONE 3,9

              self.windowOffsetLeft = (self.zoomWindow.width() + self.options.borderSize * 2) * -1; //DONE 8,9,10,11,12

              break;

            case 10:
              if (self.options.zoomWindowHeight > self.nzHeight) {
                //positive margin
                self.windowOffsetTop = (self.options.zoomWindowHeight / 2 - self.nzHeight / 2) * -1;
                self.windowOffsetLeft = (self.zoomWindow.width() + self.options.borderSize * 2) * -1; //DONE 8,9,10,11,12
              } else {
                //negative margin
                $.noop();
              }

              break;

            case 11:
              self.windowOffsetTop = self.options.zoomWindowOffsetY;
              self.windowOffsetLeft = (self.zoomWindow.width() + self.options.borderSize * 2) * -1; //DONE 8,9,10,11,12

              break;

            case 12:
              //done
              self.windowOffsetTop = (self.zoomWindow.height() + self.options.borderSize * 2) * -1; //DONE 12,13,14,15,16

              self.windowOffsetLeft = (self.zoomWindow.width() + self.options.borderSize * 2) * -1; //DONE 8,9,10,11,12

              break;

            case 13:
              //done
              self.windowOffsetTop = (self.zoomWindow.height() + self.options.borderSize * 2) * -1; //DONE 12,13,14,15,16

              self.windowOffsetLeft = 0; //DONE 7, 13

              break;

            case 14:
              if (self.options.zoomWindowHeight > self.nzHeight) {
                //positive margin
                self.windowOffsetTop = (self.zoomWindow.height() + self.options.borderSize * 2) * -1; //DONE 12,13,14,15,16

                self.windowOffsetLeft = (self.options.zoomWindowWidth / 2 - self.nzWidth / 2 + self.options.borderSize * 2) * -1;
              } else {
                //negative margin
                $.noop();
              }

              break;

            case 15:
              //done
              self.windowOffsetTop = (self.zoomWindow.height() + self.options.borderSize * 2) * -1; //DONE 12,13,14,15,16

              self.windowOffsetLeft = self.nzWidth - self.zoomWindow.width() - self.options.borderSize * 2; //DONE - 5,15

              break;

            case 16:
              //done
              self.windowOffsetTop = (self.zoomWindow.height() + self.options.borderSize * 2) * -1; //DONE 12,13,14,15,16

              self.windowOffsetLeft = self.nzWidth; //DONE 1, 2, 3, 4, 16

              break;

            default:
              //done
              self.windowOffsetTop = self.options.zoomWindowOffsetY; //DONE - 1

              self.windowOffsetLeft = self.nzWidth;
            //DONE 1, 2, 3, 4, 16
          }
        } //end isNAN
        else {
          //WE CAN POSITION IN A CLASS - ASSUME THAT ANY STRING PASSED IS
          self.externalContainer = $('#' + self.options.zoomWindowPosition);
          self.externalContainerWidth = self.externalContainer.width();
          self.externalContainerHeight = self.externalContainer.height();
          self.externalContainerOffset = self.externalContainer.offset();
          self.windowOffsetTop = self.externalContainerOffset.top; //DONE - 1

          self.windowOffsetLeft = self.externalContainerOffset.left; //DONE 1, 2, 3, 4, 16
        }

        self.isWindowSet = true;
        self.windowOffsetTop = self.windowOffsetTop + self.options.zoomWindowOffsetY;
        self.windowOffsetLeft = self.windowOffsetLeft + self.options.zoomWindowOffsetX;
        self.zoomWindow.css({
          top: self.windowOffsetTop,
          left: self.windowOffsetLeft
        });

        if (self.options.zoomType === 'inner') {
          self.zoomWindow.css({
            top: 0,
            left: 0
          });
        }

        self.windowLeftPos = String(((e.pageX - self.nzOffset.left) * self.widthRatio - self.zoomWindow.width() / 2) * -1);
        self.windowTopPos = String(((e.pageY - self.nzOffset.top) * self.heightRatio - self.zoomWindow.height() / 2) * -1);

        if (self.Etoppos) {
          self.windowTopPos = 0;
        }

        if (self.Eloppos) {
          self.windowLeftPos = 0;
        }

        if (self.Eboppos) {
          self.windowTopPos = (self.largeHeight / self.currentZoomLevel - self.zoomWindow.height()) * -1;
        }

        if (self.Eroppos) {
          self.windowLeftPos = (self.largeWidth / self.currentZoomLevel - self.zoomWindow.width()) * -1;
        } //stops micro movements


        if (self.fullheight) {
          self.windowTopPos = 0;
        }

        if (self.fullwidth) {
          self.windowLeftPos = 0;
        } //set the css background position


        if (self.options.zoomType === 'window' || self.options.zoomType === 'inner') {
          if (self.zoomLock === 1) {
            //overrides for images not zoomable
            if (self.widthRatio <= 1) {
              self.windowLeftPos = 0;
            }

            if (self.heightRatio <= 1) {
              self.windowTopPos = 0;
            }
          } // adjust images less than the window height


          if (self.options.zoomType === 'window') {
            if (self.largeHeight < self.options.zoomWindowHeight) {
              self.windowTopPos = 0;
            }

            if (self.largeWidth < self.options.zoomWindowWidth) {
              self.windowLeftPos = 0;
            }
          } //set the zoomwindow background position


          if (self.options.easing) {
            //     if(self.changeZoom){
            //           clearInterval(self.loop);
            //           self.changeZoom = false;
            //           self.loop = false;
            //            }
            //set the pos to 0 if not set
            if (!self.xp) {
              self.xp = 0;
            }

            if (!self.yp) {
              self.yp = 0;
            } //if loop not already started, then run it


            if (!self.loop) {
              self.loop = setInterval(function () {
                //using zeno's paradox
                self.xp += (self.windowLeftPos - self.xp) / self.options.easingAmount;
                self.yp += (self.windowTopPos - self.yp) / self.options.easingAmount;

                if (self.scrollingLock) {
                  clearInterval(self.loop);
                  self.xp = self.windowLeftPos;
                  self.yp = self.windowTopPos;
                  self.xp = ((e.pageX - self.nzOffset.left) * self.widthRatio - self.zoomWindow.width() / 2) * -1;
                  self.yp = ((e.pageY - self.nzOffset.top) * self.heightRatio - self.zoomWindow.height() / 2) * -1;

                  if (self.changeBgSize) {
                    if (self.nzHeight > self.nzWidth) {
                      if (self.options.zoomType === 'lens') {
                        self.zoomLens.css('background-size', self.largeWidth / self.newvalueheight + 'px ' + self.largeHeight / self.newvalueheight + 'px');
                      }

                      self.zoomWindow.css('background-size', self.largeWidth / self.newvalueheight + 'px ' + self.largeHeight / self.newvalueheight + 'px');
                    } else {
                      if (self.options.zoomType !== 'lens') {
                        self.zoomLens.css('background-size', self.largeWidth / self.newvaluewidth + 'px ' + self.largeHeight / self.newvalueheight + 'px');
                      }

                      self.zoomWindow.css('background-size', self.largeWidth / self.newvaluewidth + 'px ' + self.largeHeight / self.newvaluewidth + 'px');
                    }
                    /*
                     if(!self.bgxp){self.bgxp = self.largeWidth/self.newvalue;}
                     if(!self.bgyp){self.bgyp = self.largeHeight/self.newvalue ;}
                     if (!self.bgloop){
                     self.bgloop = setInterval(function(){
                          self.bgxp += (self.largeWidth/self.newvalue  - self.bgxp) / self.options.easingAmount;
                     self.bgyp += (self.largeHeight/self.newvalue  - self.bgyp) / self.options.easingAmount;
                          self.zoomWindow.css('background-size', self.bgxp + 'px ' + self.bgyp + 'px' );
                               }, 16);
                          }
                     */


                    self.changeBgSize = false;
                  }

                  self.zoomWindow.css('background-position', self.windowLeftPos + 'px ' + self.windowTopPos + 'px');
                  self.scrollingLock = false;
                  self.loop = false;
                } else if (Math.round(Math.abs(self.xp - self.windowLeftPos) + Math.abs(self.yp - self.windowTopPos)) < 1) {
                  //stops micro movements
                  clearInterval(self.loop);
                  self.zoomWindow.css('background-position', self.windowLeftPos + 'px ' + self.windowTopPos + 'px');
                  self.loop = false;
                } else {
                  if (self.changeBgSize) {
                    if (self.nzHeight > self.nzWidth) {
                      if (self.options.zoomType === 'lens') {
                        self.zoomLens.css('background-size', self.largeWidth / self.newvalueheight + 'px ' + self.largeHeight / self.newvalueheight + 'px');
                      }

                      self.zoomWindow.css('background-size', self.largeWidth / self.newvalueheight + 'px ' + self.largeHeight / self.newvalueheight + 'px');
                    } else {
                      if (self.options.zoomType !== 'lens') {
                        self.zoomLens.css('background-size', self.largeWidth / self.newvaluewidth + 'px ' + self.largeHeight / self.newvaluewidth + 'px');
                      }

                      self.zoomWindow.css('background-size', self.largeWidth / self.newvaluewidth + 'px ' + self.largeHeight / self.newvaluewidth + 'px');
                    }

                    self.changeBgSize = false;
                  }

                  self.zoomWindow.css('background-position', self.xp + 'px ' + self.yp + 'px');
                }
              }, 16);
            }
          } else {
            if (self.changeBgSize) {
              if (self.nzHeight > self.nzWidth) {
                if (self.options.zoomType === 'lens') {
                  self.zoomLens.css('background-size', self.largeWidth / self.newvalueheight + 'px ' + self.largeHeight / self.newvalueheight + 'px');
                }

                self.zoomWindow.css('background-size', self.largeWidth / self.newvalueheight + 'px ' + self.largeHeight / self.newvalueheight + 'px');
              } else {
                if (self.options.zoomType === 'lens') {
                  self.zoomLens.css('background-size', self.largeWidth / self.newvaluewidth + 'px ' + self.largeHeight / self.newvaluewidth + 'px');
                }

                if (self.largeHeight / self.newvaluewidth < self.options.zoomWindowHeight) {
                  self.zoomWindow.css('background-size', self.largeWidth / self.newvaluewidth + 'px ' + self.largeHeight / self.newvaluewidth + 'px');
                } else {
                  self.zoomWindow.css('background-size', self.largeWidth / self.newvalueheight + 'px ' + self.largeHeight / self.newvalueheight + 'px');
                }
              }

              self.changeBgSize = false;
            }

            self.zoomWindow.css('background-position', self.windowLeftPos + 'px ' + self.windowTopPos + 'px');
          }
        }
      },
      setTintPosition: function setTintPosition(e) {
        var self = this;
        var zoomLensWidth = self.zoomLens.width();
        var zoomLensHeight = self.zoomLens.height();
        self.nzOffset = self.$elem.offset();
        self.tintpos = String((e.pageX - self.nzOffset.left - zoomLensWidth / 2) * -1);
        self.tintposy = String((e.pageY - self.nzOffset.top - zoomLensHeight / 2) * -1);

        if (self.Etoppos) {
          self.tintposy = 0;
        }

        if (self.Eloppos) {
          self.tintpos = 0;
        }

        if (self.Eboppos) {
          self.tintposy = (self.nzHeight - zoomLensHeight - self.options.lensBorderSize * 2) * -1;
        }

        if (self.Eroppos) {
          self.tintpos = (self.nzWidth - zoomLensWidth - self.options.lensBorderSize * 2) * -1;
        }

        if (self.options.tint) {
          //stops micro movements
          if (self.fullheight) {
            self.tintposy = 0;
          }

          if (self.fullwidth) {
            self.tintpos = 0;
          }

          self.zoomTintImage.css({
            'left': self.tintpos + 'px',
            'top': self.tintposy + 'px'
          });
        }
      },
      swaptheimage: function swaptheimage(smallimage, largeimage) {
        var self = this;
        var newImg = new Image();

        if (self.options.loadingIcon) {
          self.spinner = $('<div style="' + 'background: url(\'' + self.options.loadingIcon + '\') no-repeat center;' + 'height:' + self.nzHeight + 'px;' + 'width:' + self.nzWidth + 'px;' + 'z-index: 2000;position: absolute; ' + 'background-position: center center;"></div>');
          self.$elem.after(self.spinner);
        }

        self.options.onImageSwap(self.$elem);

        newImg.onload = function () {
          self.largeWidth = newImg.width;
          self.largeHeight = newImg.height;
          self.zoomImage = largeimage;
          self.zoomWindow.css('background-size', self.largeWidth + 'px ' + self.largeHeight + 'px');
          self.swapAction(smallimage, largeimage);
          return;
        };

        self.setImageSource(newImg, largeimage); // this must be done AFTER setting onload
      },
      swapAction: function swapAction(smallimage, largeimage) {
        var self = this;
        var elemWidth = self.$elem.width();
        var elemHeight = self.$elem.height();
        var newImg2 = new Image();

        newImg2.onload = function () {
          //re-calculate values
          self.nzHeight = newImg2.height;
          self.nzWidth = newImg2.width;
          self.options.onImageSwapComplete(self.$elem);
          self.doneCallback();
          return;
        };

        self.setImageSource(newImg2, smallimage); //reset the zoomlevel to that initially set in options

        self.currentZoomLevel = self.options.zoomLevel;
        self.options.maxZoomLevel = false; //swaps the main image
        //self.$elem.attr('src',smallimage);
        //swaps the zoom image

        if (self.options.zoomType === 'lens') {
          self.zoomLens.css('background-image', 'url("' + largeimage + '")');
        }

        if (self.options.zoomType === 'window') {
          self.zoomWindow.css('background-image', 'url("' + largeimage + '")');
        }

        if (self.options.zoomType === 'inner') {
          self.zoomWindow.css('background-image', 'url("' + largeimage + '")');
        }

        self.currentImage = largeimage;

        if (self.options.imageCrossfade) {
          var oldImg = self.$elem;
          var newImg = oldImg.clone();
          self.$elem.attr('src', smallimage);
          self.$elem.after(newImg);
          newImg.stop(true).fadeOut(self.options.imageCrossfade, function () {
            $(this).remove();
          }); // if(self.options.zoomType === 'inner'){
          //remove any attributes on the cloned image so we can resize later

          self.$elem.width('auto').removeAttr('width');
          self.$elem.height('auto').removeAttr('height'); //   }

          oldImg.fadeIn(self.options.imageCrossfade);

          if (self.options.tint && self.options.zoomType !== 'inner') {
            var oldImgTint = self.zoomTintImage;
            var newImgTint = oldImgTint.clone();
            self.zoomTintImage.attr('src', largeimage);
            self.zoomTintImage.after(newImgTint);
            newImgTint.stop(true).fadeOut(self.options.imageCrossfade, function () {
              $(this).remove();
            });
            oldImgTint.fadeIn(self.options.imageCrossfade); //self.zoomTintImage.attr('width',elem.data('image'));
            //resize the tint window

            self.zoomTint.css({
              height: elemHeight,
              width: elemWidth
            });
          }

          self.zoomContainer.css({
            'height': elemHeight,
            'width': elemWidth
          });

          if (self.options.zoomType === 'inner') {
            if (!self.options.constrainType) {
              self.zoomWrap.parent().css({
                'height': elemHeight,
                'width': elemWidth
              });
              self.zoomWindow.css({
                'height': elemHeight,
                'width': elemWidth
              });
            }
          }

          if (self.options.imageCrossfade) {
            self.zoomWrap.css({
              'height': elemHeight,
              'width': elemWidth
            });
          }
        } else {
          self.$elem.attr('src', smallimage);

          if (self.options.tint) {
            self.zoomTintImage.attr('src', largeimage); //self.zoomTintImage.attr('width',elem.data('image'));

            self.zoomTintImage.attr('height', elemHeight); //self.zoomTintImage.attr('src') = elem.data('image');

            self.zoomTintImage.css('height', elemHeight);
            self.zoomTint.css('height', elemHeight);
          }

          self.zoomContainer.css({
            'height': elemHeight,
            'width': elemWidth
          });

          if (self.options.imageCrossfade) {
            self.zoomWrap.css({
              'height': elemHeight,
              'width': elemWidth
            });
          }
        }

        if (self.options.constrainType) {
          //This will contrain the image proportions
          if (self.options.constrainType === 'height') {
            var autoWDimension = {
              'height': self.options.constrainSize,
              'width': 'auto'
            };
            self.zoomContainer.css(autoWDimension);

            if (self.options.imageCrossfade) {
              self.zoomWrap.css(autoWDimension);
              self.constwidth = self.zoomWrap.width();
            } else {
              self.$elem.css(autoWDimension);
              self.constwidth = elemWidth;
            }

            var constWDim = {
              'height': self.options.constrainSize,
              'width': self.constwidth
            };

            if (self.options.zoomType === 'inner') {
              self.zoomWrap.parent().css(constWDim);
              self.zoomWindow.css(constWDim);
            }

            if (self.options.tint) {
              self.tintContainer.css(constWDim);
              self.zoomTint.css(constWDim);
              self.zoomTintImage.css(constWDim);
            }
          }

          if (self.options.constrainType === 'width') {
            var autoHDimension = {
              'height': 'auto',
              'width': self.options.constrainSize
            };
            self.zoomContainer.css(autoHDimension);

            if (self.options.imageCrossfade) {
              self.zoomWrap.css(autoHDimension);
              self.constheight = self.zoomWrap.height();
            } else {
              self.$elem.css(autoHDimension);
              self.constheight = elemHeight;
            }

            var constHDim = {
              'height': self.constheight,
              'width': self.options.constrainSize
            };

            if (self.options.zoomType === 'inner') {
              self.zoomWrap.parent().css(constHDim);
              self.zoomWindow.css(constHDim);
            }

            if (self.options.tint) {
              self.tintContainer.css(constHDim);
              self.zoomTint.css(constHDim);
              self.zoomTintImage.css(constHDim);
            }
          }
        }
      },
      doneCallback: function doneCallback() {
        var self = this;

        if (self.options.loadingIcon) {
          self.spinner.hide();
        }

        self.nzOffset = self.$elem.offset();
        self.nzWidth = self.$elem.width();
        self.nzHeight = self.$elem.height(); // reset the zoomlevel back to default

        self.currentZoomLevel = self.options.zoomLevel; //ratio of the large to small image

        self.widthRatio = self.largeWidth / self.nzWidth;
        self.heightRatio = self.largeHeight / self.nzHeight; //NEED TO ADD THE LENS SIZE FOR ROUND
        // adjust images less than the window height

        if (self.options.zoomType === 'window') {
          var lensHeight, lensWidth;

          if (self.nzHeight < self.options.zoomWindowHeight / self.heightRatio) {
            lensHeight = self.nzHeight;
          } else {
            lensHeight = String(self.options.zoomWindowHeight / self.heightRatio);
          }

          if (self.nzWidth < self.options.zoomWindowWidth) {
            lensWidth = self.nzWidth;
          } else {
            lensWidth = self.options.zoomWindowWidth / self.widthRatio;
          }

          if (self.zoomLens) {
            self.zoomLens.css({
              'width': lensWidth,
              'height': lensHeight
            });
          }
        }
      },
      getCurrentImage: function getCurrentImage() {
        var self = this;
        return self.zoomImage;
      },
      getGalleryList: function getGalleryList() {
        var self = this; //loop through the gallery options and set them in list for fancybox

        self.gallerylist = [];

        if (self.options.gallery) {
          $('#' + self.options.gallery + ' a').each(function () {
            var imgSrc = '';

            if ($(this).data('zoom-image')) {
              imgSrc = $(this).data('zoom-image');
            } else if ($(this).data('image')) {
              imgSrc = $(this).data('image');
            } //put the current image at the start


            if (imgSrc === self.zoomImage) {
              self.gallerylist.unshift({
                href: '' + imgSrc + '',
                title: $(this).find('img').attr('title')
              });
            } else {
              self.gallerylist.push({
                href: '' + imgSrc + '',
                title: $(this).find('img').attr('title')
              });
            }
          });
        } //if no gallery - return current image
        else {
          self.gallerylist.push({
            href: '' + self.zoomImage + '',
            title: $(this).find('img').attr('title')
          });
        }

        return self.gallerylist;
      },
      changeZoomLevel: function changeZoomLevel(value) {
        var self = this; //flag a zoom, so can adjust the easing during setPosition

        self.scrollingLock = true; //round to two decimal places

        self.newvalue = parseFloat(value).toFixed(2);
        var newvalue = self.newvalue; //maxwidth & Maxheight of the image

        var maxheightnewvalue = self.largeHeight / (self.options.zoomWindowHeight / self.nzHeight * self.nzHeight);
        var maxwidthtnewvalue = self.largeWidth / (self.options.zoomWindowWidth / self.nzWidth * self.nzWidth); //calculate new heightratio

        if (self.options.zoomType !== 'inner') {
          if (maxheightnewvalue <= newvalue) {
            self.heightRatio = self.largeHeight / maxheightnewvalue / self.nzHeight;
            self.newvalueheight = maxheightnewvalue;
            self.fullheight = true;
          } else {
            self.heightRatio = self.largeHeight / newvalue / self.nzHeight;
            self.newvalueheight = newvalue;
            self.fullheight = false;
          } // calculate new width ratio


          if (maxwidthtnewvalue <= newvalue) {
            self.widthRatio = self.largeWidth / maxwidthtnewvalue / self.nzWidth;
            self.newvaluewidth = maxwidthtnewvalue;
            self.fullwidth = true;
          } else {
            self.widthRatio = self.largeWidth / newvalue / self.nzWidth;
            self.newvaluewidth = newvalue;
            self.fullwidth = false;
          }

          if (self.options.zoomType === 'lens') {
            if (maxheightnewvalue <= newvalue) {
              self.fullwidth = true;
              self.newvaluewidth = maxheightnewvalue;
            } else {
              self.widthRatio = self.largeWidth / newvalue / self.nzWidth;
              self.newvaluewidth = newvalue;
              self.fullwidth = false;
            }
          }
        }

        if (self.options.zoomType === 'inner') {
          maxheightnewvalue = parseFloat(self.largeHeight / self.nzHeight).toFixed(2);
          maxwidthtnewvalue = parseFloat(self.largeWidth / self.nzWidth).toFixed(2);

          if (newvalue > maxheightnewvalue) {
            newvalue = maxheightnewvalue;
          }

          if (newvalue > maxwidthtnewvalue) {
            newvalue = maxwidthtnewvalue;
          }

          if (maxheightnewvalue <= newvalue) {
            self.heightRatio = self.largeHeight / newvalue / self.nzHeight;

            if (newvalue > maxheightnewvalue) {
              self.newvalueheight = maxheightnewvalue;
            } else {
              self.newvalueheight = newvalue;
            }

            self.fullheight = true;
          } else {
            self.heightRatio = self.largeHeight / newvalue / self.nzHeight;

            if (newvalue > maxheightnewvalue) {
              self.newvalueheight = maxheightnewvalue;
            } else {
              self.newvalueheight = newvalue;
            }

            self.fullheight = false;
          }

          if (maxwidthtnewvalue <= newvalue) {
            self.widthRatio = self.largeWidth / newvalue / self.nzWidth;

            if (newvalue > maxwidthtnewvalue) {
              self.newvaluewidth = maxwidthtnewvalue;
            } else {
              self.newvaluewidth = newvalue;
            }

            self.fullwidth = true;
          } else {
            self.widthRatio = self.largeWidth / newvalue / self.nzWidth;
            self.newvaluewidth = newvalue;
            self.fullwidth = false;
          }
        } //end inner


        var scrcontinue = false;

        if (self.options.zoomType === 'inner') {
          if (self.nzWidth >= self.nzHeight) {
            if (self.newvaluewidth <= maxwidthtnewvalue) {
              scrcontinue = true;
            } else {
              scrcontinue = false;
              self.fullheight = true;
              self.fullwidth = true;
            }
          }

          if (self.nzHeight > self.nzWidth) {
            if (self.newvaluewidth <= maxwidthtnewvalue) {
              scrcontinue = true;
            } else {
              scrcontinue = false;
              self.fullheight = true;
              self.fullwidth = true;
            }
          }
        }

        if (self.options.zoomType !== 'inner') {
          scrcontinue = true;
        }

        if (scrcontinue) {
          self.zoomLock = 0;
          self.changeZoom = true; //if lens height is less than image height

          if (self.options.zoomWindowHeight / self.heightRatio <= self.nzHeight) {
            self.currentZoomLevel = self.newvalueheight;

            if (self.options.zoomType !== 'lens' && self.options.zoomType !== 'inner') {
              self.changeBgSize = true;
              self.zoomLens.css('height', String(self.options.zoomWindowHeight / self.heightRatio) + 'px');
            }

            if (self.options.zoomType === 'lens' || self.options.zoomType === 'inner') {
              self.changeBgSize = true;
            }
          }

          if (self.options.zoomWindowWidth / self.widthRatio <= self.nzWidth) {
            if (self.options.zoomType !== 'inner') {
              if (self.newvaluewidth > self.newvalueheight) {
                self.currentZoomLevel = self.newvaluewidth;
              }
            }

            if (self.options.zoomType !== 'lens' && self.options.zoomType !== 'inner') {
              self.changeBgSize = true;
              self.zoomLens.css('width', String(self.options.zoomWindowWidth / self.widthRatio) + 'px');
            }

            if (self.options.zoomType === 'lens' || self.options.zoomType === 'inner') {
              self.changeBgSize = true;
            }
          }

          if (self.options.zoomType === 'inner') {
            self.changeBgSize = true;

            if (self.nzWidth > self.nzHeight) {
              self.currentZoomLevel = self.newvaluewidth;
            }

            if (self.nzHeight > self.nzWidth) {
              self.currentZoomLevel = self.newvaluewidth;
            }
          }
        } //under
        //sets the boundry change, called in setWindowPos


        self.setPosition(self.currentLoc); //
      },
      closeAll: function closeAll() {
        var self = this;

        if (self.zoomWindow) {
          self.zoomWindow.hide();
        }

        if (self.zoomLens) {
          self.zoomLens.hide();
        }

        if (self.zoomTint) {
          self.zoomTint.hide();
        }
      },
      changeState: function changeState(value) {
        var self = this;

        if (value === 'enable') {
          self.options.zoomEnabled = true;
        }

        if (value === 'disable') {
          self.options.zoomEnabled = false;
        }
      },
      responsiveConfig: function responsiveConfig(options) {
        if (options.respond && options.respond.length > 0) {
          return $.extend({}, options, this.configByScreenWidth(options));
        }

        return options;
      },
      configByScreenWidth: function configByScreenWidth(options) {
        var screenWidth = $(window).width();
        var config = $.grep(options.respond, function (item) {
          var range = item.range.split('-');
          return screenWidth >= range[0] && screenWidth <= range[1];
        });

        if (config.length > 0) {
          return config[0];
        } else {
          return options;
        }
      }
    };

    $.fn.ezPlus = function (options) {
      return this.each(function () {
        var elevate = Object.create(EZP);
        elevate.init(options, this);
        $.data(this, 'ezPlus', elevate);
      });
    };

    $.fn.ezPlus.options = {
      borderColour: '#888',
      borderSize: 4,
      constrainSize: false,
      //in pixels the dimensions you want to constrain on
      constrainType: false,
      //width or height
      containLensZoom: false,
      cursor: 'inherit',
      // user should set to what they want the cursor as, if they have set a click function
      debug: false,
      easing: false,
      easingAmount: 12,
      enabled: true,
      gallery: false,
      galleryActiveClass: 'zoomGalleryActive',
      gallerySelector: false,
      galleryItem: 'a',
      imageCrossfade: false,
      lensBorderColour: '#000',
      lensBorderSize: 1,
      lensColour: 'white',
      //colour of the lens background
      lensFadeIn: false,
      lensFadeOut: false,
      lensOpacity: 0.4,
      //opacity of the lens
      lensShape: 'square',
      //can be 'round'
      lensSize: 200,
      lenszoom: false,
      loadingIcon: false,
      //http://www.example.com/spinner.gif
      // This change will allow to decide if you want to decrease
      // zoom of one of the dimensions once the other reached it's top value,
      // or keep the aspect ratio, default behaviour still being as always,
      // allow to continue zooming out, so it keeps retrocompatibility.
      mantainZoomAspectRatio: false,
      maxZoomLevel: false,
      minZoomLevel: false,
      onComplete: $.noop,
      onDestroy: $.noop,
      onImageClick: $.noop,
      onImageSwap: $.noop,
      onImageSwapComplete: $.noop,
      onShow: $.noop,
      onZoomedImageLoaded: $.noop,
      preloading: 1,
      //by default, load all the images, if 0, then only load images after activated (PLACEHOLDER FOR NEXT VERSION)
      respond: [],
      responsive: true,
      scrollZoom: false,
      //allow zoom on mousewheel, true to activate
      scrollZoomIncrement: 0.1,
      //steps of the scrollzoom
      showLens: true,
      tint: false,
      //enable the tinting
      tintColour: '#333',
      //default tint color, can be anything, red, #ccc, rgb(0,0,0)
      tintOpacity: 0.4,
      //opacity of the tint
      touchEnabled: true,
      zoomActivation: 'hover',
      // Can also be click (PLACEHOLDER FOR NEXT VERSION)
      zoomContainerAppendTo: 'body',
      //zoom container parent selector
      zoomLevel: 1,
      //default zoom level of image
      zoomTintFadeIn: false,
      zoomTintFadeOut: false,
      zoomType: 'window',
      //window is default,  also 'lens' available -
      zoomWindowAlwaysShow: false,
      zoomWindowBgColour: '#fff',
      zoomWindowFadeIn: false,
      zoomWindowFadeOut: false,
      zoomWindowHeight: 400,
      zoomWindowOffsetX: 0,
      zoomWindowOffsetY: 0,
      zoomWindowPosition: 1,
      zoomWindowWidth: 400,
      zoomEnabled: true,
      //false disables zoomwindow from showing
      zIndex: 999
    };
  })(jQuery, window, document);
}

module.exports = {
  productMediaZoom: productMediaZoom
};

/***/ }),

/***/ "./cartridges/app_mk_storefront/cartridge/client/default/js/thirdParty/zoom.js":
/*!*************************************************************************************!*\
  !*** ./cartridges/app_mk_storefront/cartridge/client/default/js/thirdParty/zoom.js ***!
  \*************************************************************************************/
/***/ (function(module) {

"use strict";

/* https://github.com/ironexdev/zoom
    Customized for Michael Kors to allow mobile scrolling
    and to disable Slick Slider when zoomed in
*/

/* Example call
  zoom({
    active: 'zoom-active',
    transition: 'zoom-transition',
    visible: 'visible',
    zoom: 'zoom' // Image container class
  }, {
    scaleDefault: 2, // Used on doubleclick, doubletap and resize
    scaleDifference: 0.5, // Used on wheel zoom
    scaleMax: 10, // Maximum zoom
    scaleMin: 1, // Minimum zoom
    scrollDisable: true,
    transitionDuration: 200, // This should correspond with zoom-transition transition duration
    doubleclickDelay: 300 // Delay between clicks - used when scripts decides if user performed doubleclick or not
  }, (function ($container, zoomed) {
    console.log(zoomed);
  }));
*/

function zoom(classNames, settings, callback) {
  /* Settings */
  classNames = typeof classNames !== 'undefined' && Object.keys(classNames).length ? classNames : {};
  settings = typeof settings !== 'undefined' && Object.keys(settings).length ? settings : {};
  var SCALE_DEFAULT = settings['scaleDefault'] || 2; // Used on doubleclick, doubletap and resize

  var SCALE_MAX = settings['scaleMax'] || 10;
  var SCALE_MIN = settings['scaleMin'] || 1;
  var TRANSITION_DURATION = settings['transitionDuration'] || 200; // This should correspond with zoom-transition transition duration

  var DOUBLECLICK_DELAY = settings['doubleclickDelay'] || 300;
  /* Safari on iOS doesn't properly scale images using 3d transforms */

  var SUPPORT_3D_TRANSFORM = !iOSSafari();
  /* Selectors */

  var _active = classNames['active'] || 'zoom-active';

  var _dataScale = 'data-scale';
  var _dataTranslateX = 'data-translate-x';
  var _dataTranslateY = 'data-translate-y';

  var _transition = classNames['transition'] || 'zoom-transition';

  var _visible = classNames['visible'] || 'zoom-visible';

  var _zoom = classNames['zoom'] || 'zoom';

  var $container;
  var $element;
  var $zoom = document.getElementsByClassName(_zoom);
  var lastTouchStart = null;
  var lastClickTime = null;
  /* Helpers */

  var capture = false;
  var containerHeight;
  var containerWidth;
  var containerOffsetX;
  var containerOffsetY;
  var initialScale;
  var elementHeight;
  var elementWidth;
  var initialOffsetX;
  var initialOffsetY;
  var initialPinchDistance;
  var initialPointerOffsetX;
  var initialPointerOffsetX2;
  var initialPointerOffsetY;
  var initialPointerOffsetY2;
  var limitOffsetX;
  var limitOffsetY;
  var offset;
  var pinchOffsetX;
  var pinchOffsetY;
  var pointerOffsetX;
  var pointerOffsetX2;
  var pointerOffsetY;
  var pointerOffsetY2;
  var scaleDirection;
  var scaleDifference;
  var targetOffsetX;
  var targetOffsetY;
  var targetPinchDistance;
  var targetScale;
  var touchCount;
  var touchmoveCount = 0;
  var doubleTapMonitor = [null];
  var slickCarousel = settings['slickCarousel'] || '';
  var clickCount = 0;
  var isMobile = settings['isMobile'] || false;
  var hideThumbnail = settings['hideThumbnail'] || false;

  for (var i = 0; i < $zoom.length; i++) {
    /* Initialize selectors */
    $container = $zoom[i];
    $element = $container.children[0];
    /* Set attributes */

    $element.setAttribute(_dataScale, 1);
    $element.setAttribute(_dataTranslateX, 0);
    $element.setAttribute(_dataTranslateY, 0);
  }

  window.addEventListener('load', function () {
    /* Wait for images to be loaded */
    for (var i = 0; i < $zoom.length; i++) {
      /* Initialize selectors */
      $container = $zoom[i];
      $element = $container.children[0];
      addClass($element, _visible);
    }
  });
  massAddEventListener($zoom, 'touchstart', touchStart);
  massAddEventListener($zoom, 'click', onClick);
  document.addEventListener('touchmove', touchMove, {
    passive: false
  }); // Google Chrome - [Intervention] Unable to preventDefault inside passive event listener due to target being treated as passive.

  document.addEventListener('touchend', touchEnd);

  function onClick(e) {
    if (clickCount > 0) {
      return;
    }

    clickCount++;
    resetClickCount();
    /* Initialize helpers */

    offset = $container.getBoundingClientRect();
    containerOffsetX = offset.left;
    containerOffsetY = offset.top;
    containerHeight = $container.clientHeight;
    containerWidth = $container.clientWidth;
    elementHeight = $element.clientHeight;
    elementWidth = $element.clientWidth;
    initialPointerOffsetX = e.clientX;
    initialPointerOffsetY = e.clientY;
    initialScale = minMax(parseFloat($element.getAttribute(_dataScale)), SCALE_MIN, SCALE_MAX);
    doubleTapMonitor[0] = e.target;
    doubleTapMonitor[1] = initialPointerOffsetX;
    doubleTapMonitor[2] = initialPointerOffsetY;
    addClass($element, _transition);
    var time = new Date().getTime();

    if (lastClickTime && time - lastClickTime < DOUBLECLICK_DELAY) {
      lastClickTime = time;
      return false;
    }

    lastClickTime = time;

    if (hasClass($container, _active) === true) {
      /* Set attributes */
      $element.setAttribute(_dataScale, 1);
      $element.setAttribute(_dataTranslateX, 0);
      $element.setAttribute(_dataTranslateY, 0);
      zoomInactive($container);
      moveScaleElement($element, 0, 0, 1);
    } else {
      pointerOffsetX = e.clientX;
      pointerOffsetY = e.clientY;
      targetScale = SCALE_DEFAULT;
      scaleDirection = 1;
      scaleDifference = (SCALE_DEFAULT - 1) * scaleDirection;
      /* Set offset limits */

      limitOffsetX = getLimitOffset(elementWidth, containerWidth, targetScale);
      limitOffsetY = getLimitOffset(elementHeight, containerHeight, targetScale);

      if (targetScale <= 1) {
        targetOffsetX = 0;
        targetOffsetY = 0;
      } else {
        /* Set target offsets */
        targetOffsetX = elementWidth * targetScale <= containerWidth ? 0 : minMax(initialOffsetX - (pointerOffsetX - containerOffsetX - containerWidth / 2 - initialOffsetX) / (targetScale - scaleDifference) * scaleDifference, limitOffsetX * -1, limitOffsetX);
        targetOffsetY = elementHeight * targetScale <= containerHeight ? 0 : minMax(initialOffsetY - (pointerOffsetY - containerOffsetY - containerHeight / 2 - initialOffsetY) / (targetScale - scaleDifference) * scaleDifference, limitOffsetY * -1, limitOffsetY);
      }

      zoomActive($container);
      /* Set attributes */

      $element.setAttribute(_dataScale, targetScale);
      $element.setAttribute(_dataTranslateX, targetOffsetX);
      $element.setAttribute(_dataTranslateY, targetOffsetY);
      moveScaleElement($element, targetOffsetX + 'px', targetOffsetY + 'px', SCALE_DEFAULT);
    }

    setTimeout(function () {
      removeClass($element, _transition);
    }, TRANSITION_DURATION);
    /* Initialize helpers */

    initialOffsetX = parseFloat($element.getAttribute(_dataTranslateX));
    initialOffsetY = parseFloat($element.getAttribute(_dataTranslateY));
  }

  function touchStart(e) {
    touchCount = e.touches.length;
    var time = new Date().getTime();

    if (touchCount > 2) {
      return false;
    }

    if (touchCount > 1) {
      lastTouchStart = null;
    }

    if (time - lastTouchStart < DOUBLECLICK_DELAY) {
      doubleClicked = false;
    }

    if (clickCount > 0) {
      return;
    }
    /* Initialize selectors */


    $container = this;
    $element = this.children[0];
    /* Initialize helpers */

    offset = $container.getBoundingClientRect();
    containerOffsetX = offset.left;
    containerOffsetY = offset.top;
    containerHeight = $container.clientHeight;
    containerWidth = $container.clientWidth;
    elementHeight = $element.clientHeight;
    elementWidth = $element.clientWidth;
    initialPointerOffsetX = e.touches[0].clientX;
    initialPointerOffsetY = e.touches[0].clientY;
    initialScale = minMax(parseFloat($element.getAttribute(_dataScale)), SCALE_MIN, SCALE_MAX);

    if (touchCount === 1)
      /* Single touch */
      {
        preventSlide(offset, initialPointerOffsetX);
        /* Doubletap */

        if (doubleTapMonitor[0] === null) {
          doubleTapMonitor[0] = e.target;
          doubleTapMonitor[1] = initialPointerOffsetX;
          doubleTapMonitor[2] = initialPointerOffsetY;
          setTimeout(function () {
            doubleTapMonitor = [null];
          }, DOUBLECLICK_DELAY);
        } else if (doubleTapMonitor[0] === e.target && touchmoveCount <= 1 && isWithinRange(initialPointerOffsetX, doubleTapMonitor[1] - 10, doubleTapMonitor[1] + 10) === true && isWithinRange(initialPointerOffsetY, doubleTapMonitor[2] - 10, doubleTapMonitor[2] + 10) === true) {
          addClass($element, _transition);

          if (hasClass($container, _active) === true) {
            /* Set attributes */
            $element.setAttribute(_dataScale, 1);
            $element.setAttribute(_dataTranslateX, 0);
            $element.setAttribute(_dataTranslateY, 0);
            zoomInactive($container);
            moveScaleElement($element, 0, 0, 1);
          } else {
            pointerOffsetX = e.touches[0].clientX;
            pointerOffsetY = e.touches[0].clientY;
            targetScale = SCALE_DEFAULT;
            scaleDirection = 1;
            scaleDifference = (SCALE_DEFAULT - 1) * scaleDirection;
            /* Set offset limits */

            limitOffsetX = getLimitOffset(elementWidth, containerWidth, targetScale);
            limitOffsetY = getLimitOffset(elementHeight, containerHeight, targetScale);

            if (targetScale <= 1) {
              targetOffsetX = 0;
              targetOffsetY = 0;
            } else {
              /* Set target offsets */
              targetOffsetX = elementWidth * targetScale <= containerWidth ? 0 : minMax(initialOffsetX - (pointerOffsetX - containerOffsetX - containerWidth / 2 - initialOffsetX) / (targetScale - scaleDifference) * scaleDifference, limitOffsetX * -1, limitOffsetX);
              targetOffsetY = elementHeight * targetScale <= containerHeight ? 0 : minMax(initialOffsetY - (pointerOffsetY - containerOffsetY - containerHeight / 2 - initialOffsetY) / (targetScale - scaleDifference) * scaleDifference, limitOffsetY * -1, limitOffsetY);
            }

            zoomActive($container);

            if (Math.abs(targetOffsetX) === Math.abs(limitOffsetX) && targetScale > 1 && slickCarousel.length) {
              $(".".concat(slickCarousel)).slick('slickSetOption', {
                'touchMove': true,
                'swipe': true
              });
            }
            /* Set attributes */


            $element.setAttribute(_dataScale, targetScale);
            $element.setAttribute(_dataTranslateX, targetOffsetX);
            $element.setAttribute(_dataTranslateY, targetOffsetY);
            moveScaleElement($element, targetOffsetX + "px", targetOffsetY + "px", SCALE_DEFAULT);
          }

          setTimeout(function () {
            removeClass($element, _transition);
          }, TRANSITION_DURATION);
          doubleTapMonitor = [null];
          return false;
        }
        /* Initialize helpers */


        initialOffsetX = parseFloat($element.getAttribute(_dataTranslateX));
        initialOffsetY = parseFloat($element.getAttribute(_dataTranslateY));
      } else if (touchCount === 2)
      /* Pinch */
      {
        /* Initialize helpers */
        initialOffsetX = parseFloat($element.getAttribute(_dataTranslateX));
        initialOffsetY = parseFloat($element.getAttribute(_dataTranslateY));
        initialPointerOffsetX2 = e.touches[1].clientX;
        initialPointerOffsetY2 = e.touches[1].clientY;
        pinchOffsetX = (initialPointerOffsetX + initialPointerOffsetX2) / 2;
        pinchOffsetY = (initialPointerOffsetY + initialPointerOffsetY2) / 2;
        initialPinchDistance = Math.sqrt((initialPointerOffsetX - initialPointerOffsetX2) * (initialPointerOffsetX - initialPointerOffsetX2) + (initialPointerOffsetY - initialPointerOffsetY2) * (initialPointerOffsetY - initialPointerOffsetY2));
      }

    touchmoveCount = 0;
    /* Set capture */

    capture = true;
  }

  function touchMove(e) {
    if (e.target == $element && hasClass($container, _active) == true) {
      preventDefault();
    }

    if (capture === false) {
      return false;
    }
    /* Initialize helpers */


    pointerOffsetX = e.touches[0].clientX;
    pointerOffsetY = e.touches[0].clientY;
    touchCount = e.touches.length;
    touchmoveCount++;
    offset = $container.getBoundingClientRect();

    if (touchCount > 1)
      /* Pinch */
      {
        pointerOffsetX2 = e.touches[1].clientX;
        pointerOffsetY2 = e.touches[1].clientY;
        targetPinchDistance = Math.sqrt((pointerOffsetX - pointerOffsetX2) * (pointerOffsetX - pointerOffsetX2) + (pointerOffsetY - pointerOffsetY2) * (pointerOffsetY - pointerOffsetY2));

        if (initialPinchDistance === null) {
          initialPinchDistance = targetPinchDistance;
        }

        if (Math.abs(initialPinchDistance - targetPinchDistance) >= 1) {
          /* Initialize helpers */
          targetScale = minMax(targetPinchDistance / initialPinchDistance * initialScale, SCALE_MIN, SCALE_MAX);
          limitOffsetX = getLimitOffset(elementWidth, containerWidth, targetScale);
          limitOffsetY = getLimitOffset(elementHeight, containerHeight, targetScale);
          scaleDifference = targetScale - initialScale;
          targetOffsetX = elementWidth * targetScale <= containerWidth ? 0 : minMax(initialOffsetX - (pinchOffsetX - containerOffsetX - containerWidth / 2 - initialOffsetX) / (targetScale - scaleDifference) * scaleDifference, limitOffsetX * -1, limitOffsetX);
          targetOffsetY = elementHeight * targetScale <= containerHeight ? 0 : minMax(initialOffsetY - (pinchOffsetY - containerOffsetY - containerHeight / 2 - initialOffsetY) / (targetScale - scaleDifference) * scaleDifference, limitOffsetY * -1, limitOffsetY);

          if (targetScale > 1) {
            zoomActive($container);
          } else {
            zoomInactive($container);
          }

          moveScaleElement($element, targetOffsetX + 'px', targetOffsetY + 'px', targetScale);
          /* Initialize helpers */

          initialPinchDistance = targetPinchDistance;
          initialScale = targetScale;
          initialOffsetX = targetOffsetX;
          initialOffsetY = targetOffsetY;
        }
      } else
      /* Single touch */
      {
        /* Initialize helpers */
        targetScale = initialScale;
        limitOffsetX = getLimitOffset(elementWidth, containerWidth, targetScale);
        limitOffsetY = getLimitOffset(elementHeight, containerHeight, targetScale);
        targetOffsetX = elementWidth * targetScale <= containerWidth ? 0 : minMax(pointerOffsetX - (initialPointerOffsetX - initialOffsetX), limitOffsetX * -1, limitOffsetX);
        targetOffsetY = elementHeight * targetScale <= containerHeight ? 0 : minMax(pointerOffsetY - (initialPointerOffsetY - initialOffsetY), limitOffsetY * -1, limitOffsetY);

        if (Math.abs(targetOffsetX) === Math.abs(limitOffsetX)) {
          initialOffsetX = targetOffsetX;
          initialPointerOffsetX = pointerOffsetX;
        }

        if (Math.abs(targetOffsetY) === Math.abs(limitOffsetY)) {
          initialOffsetY = targetOffsetY;
          initialPointerOffsetY = pointerOffsetY;
        } // When zoomed in, only allow swiping to next slide when at the X limit edges


        if (Math.abs(targetOffsetX) === Math.abs(limitOffsetX) && targetScale > 1 && slickCarousel.length) {
          $(".".concat(slickCarousel)).slick('slickSetOption', {
            'touchMove': true,
            'swipe': true
          });
        }
        /* Set attributes */


        $element.setAttribute(_dataScale, initialScale);
        $element.setAttribute(_dataTranslateX, targetOffsetX);
        $element.setAttribute(_dataTranslateY, targetOffsetY);
        moveScaleElement($element, targetOffsetX + 'px', targetOffsetY + 'px', targetScale);
      }
  }

  function touchEnd(e) {
    touchCount = e.touches.length;

    if (capture === false) {
      return false;
    }

    if (touchCount === 0)
      /* No touch */
      {
        /* Set attributes */
        $element.setAttribute(_dataScale, initialScale);
        $element.setAttribute(_dataTranslateX, targetOffsetX);
        $element.setAttribute(_dataTranslateY, targetOffsetY);
        initialPinchDistance = null;
        capture = false;
      } else if (touchCount === 1)
      /* Single touch */
      {
        initialPointerOffsetX = e.touches[0].clientX;
        initialPointerOffsetY = e.touches[0].clientY;
      } else if (touchCount > 1)
      /* Pinch */
      {
        initialPinchDistance = null;
      }
  }

  function addClass($element, targetClass) {
    if (hasClass($element, targetClass) === false) {
      $element.className += ' ' + targetClass;
    }
  }

  function isWithinRange(value, min, max) {
    return value >= min && value <= max;
  }

  function hasClass($element, targetClass) {
    var rgx = new RegExp('(?:^|\\s)' + targetClass + '(?!\\S)', 'g');
    return !!$element.className.match(rgx);
  }

  function massAddEventListener($elements, event, customFunction, useCapture) {
    var useCapture = useCapture || false;

    for (var i = 0; i < $elements.length; i++) {
      $elements[i].addEventListener(event, customFunction, useCapture);
    }
  }

  function minMax(value, min, max) {
    if (value < min) {
      value = min;
    } else if (value > max) {
      value = max;
    }

    return value;
  }

  function moveScaleElement($element, targetOffsetX, targetOffsetY, targetScale) {
    if (SUPPORT_3D_TRANSFORM) {
      $element.style.cssText = '-moz-transform : translate(' + targetOffsetX + ', ' + targetOffsetY + ') ' + 'scale(' + targetScale + '); ' + '-ms-transform : translate(' + targetOffsetX + ', ' + targetOffsetY + ') scale(' + targetScale + '); ' + '-o-transform : translate(' + targetOffsetX + ', ' + targetOffsetY + ') ' + 'scale(' + targetScale + '); ' + '-webkit-transform : translate(' + targetOffsetX + ', ' + targetOffsetY + ') ' + 'scale(' + targetScale + '); ' + 'transform : translate3d(' + targetOffsetX + ', ' + targetOffsetY + ', 0) scale3d(' + targetScale + ', ' + targetScale + ', 1);';
    } else {
      $element.style.cssText = '-moz-transform : translate(' + targetOffsetX + ', ' + targetOffsetY + ') ' + 'scale(' + targetScale + '); ' + '-ms-transform : translate(' + targetOffsetX + ', ' + targetOffsetY + ') scale(' + targetScale + '); ' + '-o-transform : translate(' + targetOffsetX + ', ' + targetOffsetY + ') ' + 'scale(' + targetScale + '); ' + '-webkit-transform : translate(' + targetOffsetX + ', ' + targetOffsetY + ') ' + 'scale(' + targetScale + '); ' + 'transform : translate(' + targetOffsetX + ', ' + targetOffsetY + ') scale(' + targetScale + ', ' + targetScale + ')';
    }
  }

  function preventDefault(e) {
    e = e || window.event;

    if (e.preventDefault) {
      e.preventDefault();
    }

    e.returnValue = false;
  }

  function preventDefaultForScrollKeys(e) {
    var keys = {
      37: 1,
      38: 1,
      39: 1,
      40: 1
    };

    if (keys[e.keyCode]) {
      preventDefault(e);
      return false;
    }
  }

  function removeClass($element, targetClass) {
    var rgx = new RegExp('(?:^|\\s)' + targetClass + '(?!\\S)', 'g');
    $element.className = $element.className.replace(rgx, '');
  }

  function getLimitOffset(elementDimension, containerDimension, targetScale) {
    return (elementDimension * targetScale - containerDimension) / 2;
  }

  function zoomActive($container) {
    addClass($container, _active);

    if (callback) {
      callback($container, true);
    }
  }

  function zoomInactive($container) {
    removeClass($container, _active);

    if (callback) {
      callback($container, false);
    }
  }

  function iOSSafari() {
    if (['iPad Simulator', 'iPhone Simulator', 'iPod Simulator', 'iPad', 'iPhone', 'iPod'].indexOf(navigator.platform) > -1 || navigator.userAgent.includes('Mac') && 'ontouchend' in document) {
      var ua = navigator.userAgent.toLowerCase();

      if (ua.indexOf('safari') > -1 && ua.indexOf('chrome') === -1) {
        return true;
      }
    }

    return false;
  }

  function preventSlide(containerOffset, pointerOffset) {
    if (isMobile && hideThumbnail) {
      return;
    }

    var limit = containerOffset.width * .1;
    var leftLimit = containerOffset.left + limit;
    var rightLimit = containerOffset.right - limit;
    var leftLimitCheck = pointerOffset > containerOffset.left && pointerOffset < leftLimit;
    var rightLimitCheck = pointerOffset < containerOffset.right && pointerOffset > rightLimit;

    if (hasClass($container, _active) === true) {
      if (leftLimitCheck || rightLimitCheck) {
        $(".".concat(slickCarousel)).slick('slickSetOption', {
          'touchMove': true,
          'swipe': true
        });
      } else {
        $(".".concat(slickCarousel)).slick('slickSetOption', {
          'touchMove': false,
          'swipe': false
        });
      }
    } else {
      $(".".concat(slickCarousel)).slick('slickSetOption', {
        'touchMove': true,
        'swipe': true
      });
    }
  }

  ;

  function resetClickCount() {
    setTimeout(function () {
      clickCount = 0;
    }, 600);
  }
}

if (true) {
  module.exports = {
    zoom: zoom
  };
}

/***/ }),

/***/ "./cartridges/app_mk_storefront/cartridge/client/default/js/util.js":
/*!**************************************************************************!*\
  !*** ./cartridges/app_mk_storefront/cartridge/client/default/js/util.js ***!
  \**************************************************************************/
/***/ (function(module) {

"use strict";


function _typeof(obj) { "@babel/helpers - typeof"; if (typeof Symbol === "function" && typeof Symbol.iterator === "symbol") { _typeof = function _typeof(obj) { return typeof obj; }; } else { _typeof = function _typeof(obj) { return obj && typeof Symbol === "function" && obj.constructor === Symbol && obj !== Symbol.prototype ? "symbol" : typeof obj; }; } return _typeof(obj); }

module.exports = function (include) {
  if (typeof include === 'function') {
    include();
  } else if (_typeof(include) === 'object') {
    Object.keys(include).forEach(function (key) {
      if (typeof include[key] === 'function') {
        include[key]();
      }
    });
  }
};

/***/ }),

/***/ "./cartridges/app_mk_storefront/cartridge/client/default/js/utilities/clientSideUtil.js":
/*!**********************************************************************************************!*\
  !*** ./cartridges/app_mk_storefront/cartridge/client/default/js/utilities/clientSideUtil.js ***!
  \**********************************************************************************************/
/***/ (function(module, __unused_webpack_exports, __webpack_require__) {

"use strict";


var DOMpurify = __webpack_require__(/*! dompurify */ "./node_modules/dompurify/dist/purify.js");

var timer;
/**
 * cleartimout and setting the timer for minicart after add a product to cart
 * @param {string} selector - current selector
 * @param {number} millisec - duration after which this event will trigger
 */

function clearAndSetTime(selector, millisec) {
  if (timer) {
    window.clearTimeout(timer);
  }

  timer = window.setTimeout(function () {
    $(selector).addClass('d-none');
  }, millisec);
}
/**
* scroll to destination element
* @param {integer} top - Top value for current element
* @param {integer} left - left value for current element
* @param {string} behavior - behavior for the scroll smooth/instant/auto
*/


function windowScrollToDestination(top, left, behavior) {
  var topValue = top;

  if ($('header').outerHeight()) {
    topValue -= $('header').outerHeight();
  }

  window.scroll({
    top: topValue,
    left: left,
    behavior: behavior
  });
}
/**
 * Tooltip for Shipping Restriction
 */


function initTooltip() {
  if ($('[data-toggle="tooltip"]').length) {
    $('[data-toggle="tooltip"]').tooltip();
  }
}
/**
 * floatToastMessage
 * @param {string} message - message
 * @param {string} alertTime - timer
 * @param {boolean} isSuccess - isSuccess
 * @param {string} updateCartFlag - updateCartFlag
 */


function floatToastMessage(message, alertTime, isSuccess, updateCartFlag) {
  var messageType = isSuccess ? 'toast-alert-success' : 'toast-alert-error';

  if ($('.float-toast-message').length === 0) {
    $('body').append('<div class="float-toast-message" aria-live="assertive"></div>');
  }

  $('.float-toast-message').empty().append('<div class="alert ' + DOMpurify.sanitize(messageType) + ' float-toast-alert text-center toastfont-small" aria-live="assertive" role="alert">' + DOMpurify.sanitize(message) + '</div>');

  if (updateCartFlag === 'updateCart') {
    $('nav').attr('aria-hidden', true);
    $('.float-toast-alert').removeAttr('role');
    $('.float-toast-alert').attr('tabindex', '0');
    setTimeout(function () {
      $('.float-toast-alert').focus();
    }, 200);
  }

  setTimeout(function () {
    $('nav').removeAttr('aria-hidden');
    $('.float-toast-alert').remove();

    if ($('.cart-page').length > 0) {
      var selectedProductID = $('.cart-page').attr('selected-product-id');
      $('.cartproduct-card').each(function () {
        var currentProductID = $(this).attr('data-product-id');

        if (selectedProductID === currentProductID) {
          $(this).find('.product-item-edit .edit').focus();
        }
      });
    }

    if ($('.edit-btn-address') && $('.edit-btn-address').length > 0) {
      $('.edit-btn-address[data-edit-id="' + $('.address-summary-section').attr('current_edit') + '"]').focus();
      $('.address-summary-section').removeAttr('current_edit');
    }
  }, alertTime);
}
/**
 *
 * @param {string} formId form id
 * @returns {Object} custom object
 */


function convertFormDataToObj(formId) {
  var form = document.getElementById(formId);
  var formData = new FormData(form);
  var obj = {};
  formData.forEach(function (value, key) {
    if (!Reflect.has(obj, key)) {
      obj[key] = value;
      return;
    }

    if (!Array.isArray(obj[key])) {
      obj[key] = [obj[key]];
    }

    obj[key].push(value);
  });
  return obj;
}

$.fn.isInViewport = function () {
  var elementTop = $(this).offset().top;
  var elementBottom = elementTop + $(this).outerHeight();
  var $header = $('.checkout-header').length ? $('.checkout-header') : $('header');
  var viewportTop = $(window).scrollTop() + $header.height();
  var viewportBottom = viewportTop + $(window).height();
  return elementBottom > viewportTop && elementTop < viewportBottom;
};

module.exports = {
  windowScrollToDestination: windowScrollToDestination,
  initTooltip: initTooltip,
  clearAndSetTime: clearAndSetTime,
  floatToastMessage: floatToastMessage,
  convertFormDataToObj: convertFormDataToObj
};

/***/ }),

/***/ "./cartridges/app_mk_storefront/cartridge/client/default/js/utilities/constants.js":
/*!*****************************************************************************************!*\
  !*** ./cartridges/app_mk_storefront/cartridge/client/default/js/utilities/constants.js ***!
  \*****************************************************************************************/
/***/ (function(module) {

var SCREENSIZES = {
  MOBILEMAX: 767,
  LANDSCAPEHEIGHTMAX: 575,
  TABLETMIN: 768,
  TABLETMAX: 1023,
  DESKTOPMIN: 1024
};
var GIFT_CERTIFICATE = 'GIFT_CERTIFICATE';
var CREDIT_CARD = 'CREDIT_CARD';
var PAYPAL = 'PAYPAL';
var MENUHOVERDELAY = 250;
var MENUCLOSEDELAY = 250;
var SUBMENUHOVERDELAY = 500;
var FREESHIPPING = 'FREE';
var STATELABEL = 'state';
var NEWCARD = 'newcard';
var NA_COUNTRIES = ['us', 'ca'];
var EU_PHONE_NUMBER_COUNTRY_CODES = {
  GB: 44,
  DE: 49,
  FR: 33,
  IT: 39,
  ES: 34,
  AT: 43,
  BE: 32,
  CZ: 420,
  HU: 36,
  NL: 31,
  PL: 48,
  PT: 351,
  RO: 40,
  IE: 353,
  SE: 46,
  CH: 41,
  DK: 45,
  FI: 358,
  LV: 371,
  LT: 370,
  LU: 352,
  NO: 47
};
var DSR_FORM_DETAILS_NOT_REQUIRED_TYPE = ['AccessRequest', 'CorrectionRequest'];
module.exports = {
  SCREENSIZE: SCREENSIZES,
  GIFT_CERTIFICATE: GIFT_CERTIFICATE,
  CREDIT_CARD: CREDIT_CARD,
  PAYPAL: PAYPAL,
  MENUCLOSEDELAY: MENUCLOSEDELAY,
  EU_PHONE_NUMBER_COUNTRY_CODES: EU_PHONE_NUMBER_COUNTRY_CODES,
  FREESHIPPING: FREESHIPPING,
  DSR_FORM_DETAILS_NOT_REQUIRED_TYPE: DSR_FORM_DETAILS_NOT_REQUIRED_TYPE,
  STATELABEL: STATELABEL,
  NEWCARD: NEWCARD,
  MENUHOVERDELAY: MENUHOVERDELAY,
  NA_COUNTRIES: NA_COUNTRIES,
  SUBMENUHOVERDELAY: SUBMENUHOVERDELAY
};

/***/ }),

/***/ "./node_modules/@brightcove/player-loader/dist/brightcove-player-loader.es.js":
/*!************************************************************************************!*\
  !*** ./node_modules/@brightcove/player-loader/dist/brightcove-player-loader.es.js ***!
  \************************************************************************************/
/***/ (function(__unused_webpack_module, __webpack_exports__, __webpack_require__) {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony import */ var global_document__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! global/document */ "./node_modules/global/document.js");
/* harmony import */ var global_document__WEBPACK_IMPORTED_MODULE_0___default = /*#__PURE__*/__webpack_require__.n(global_document__WEBPACK_IMPORTED_MODULE_0__);
/* harmony import */ var global_window__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! global/window */ "./node_modules/global/window.js");
/* harmony import */ var global_window__WEBPACK_IMPORTED_MODULE_1___default = /*#__PURE__*/__webpack_require__.n(global_window__WEBPACK_IMPORTED_MODULE_1__);
function _typeof2(obj) { "@babel/helpers - typeof"; if (typeof Symbol === "function" && typeof Symbol.iterator === "symbol") { _typeof2 = function _typeof2(obj) { return typeof obj; }; } else { _typeof2 = function _typeof2(obj) { return obj && typeof Symbol === "function" && obj.constructor === Symbol && obj !== Symbol.prototype ? "symbol" : typeof obj; }; } return _typeof2(obj); }

/*! @name @brightcove/player-loader @version 1.8.0 @license Apache-2.0 */



function _extends() {
  _extends = Object.assign || function (target) {
    for (var i = 1; i < arguments.length; i++) {
      var source = arguments[i];

      for (var key in source) {
        if (Object.prototype.hasOwnProperty.call(source, key)) {
          target[key] = source[key];
        }
      }
    }

    return target;
  };

  return _extends.apply(this, arguments);
}

var version = "1.8.0";
/*! @name @brightcove/player-url @version 1.2.0 @license Apache-2.0 */

var version$1 = "1.2.0";

var _typeof = typeof Symbol === "function" && _typeof2(Symbol.iterator) === "symbol" ? function (obj) {
  return _typeof2(obj);
} : function (obj) {
  return obj && typeof Symbol === "function" && obj.constructor === Symbol && obj !== Symbol.prototype ? "symbol" : _typeof2(obj);
}; // The parameters that may include JSON.


var JSON_ALLOWED_PARAMS = ['catalogSearch', 'catalogSequence']; // The parameters that may be set as query string parameters for iframes.

var IFRAME_ALLOWED_QUERY_PARAMS = ['adConfigId', 'applicationId', 'catalogSearch', 'catalogSequence', 'playlistId', 'playlistVideoId', 'videoId'];
/**
 * Gets the value of a parameter and encodes it as a string.
 *
 * For certain keys, JSON is allowed and will be encoded.
 *
 * @private
 * @param   {Object} params
 *          A parameters object. See README for details.
 *
 * @param   {string} key
 *          The key in the params object.
 *
 * @return  {string|undefined}
 *          The encoded value - or `undefined` if none.
 */

var getQueryParamValue = function getQueryParamValue(params, key) {
  if (!params || params[key] === undefined) {
    return;
  } // If it's not a string, such as with a catalog search or sequence, we
  // try to encode it as JSON.


  if (typeof params[key] !== 'string' && JSON_ALLOWED_PARAMS.indexOf(key) !== -1) {
    try {
      return encodeURIComponent(JSON.stringify(params[key]));
    } catch (x) {
      // If it's not a string and we can't encode as JSON, it's ignored entirely.
      return;
    }
  }

  return encodeURIComponent(String(params[key]).trim()) || undefined;
};
/**
 * In some cases, we need to add query string parameters to an iframe URL.
 *
 * @private
 * @param   {Object} params
 *          An object of query parameters.
 *
 * @return  {string}
 *          A query string starting with `?`. If no valid parameters are given,
 *          returns an empty string.
 */


var getQueryString = function getQueryString(params) {
  return Object.keys(params).filter(function (k) {
    return IFRAME_ALLOWED_QUERY_PARAMS.indexOf(k) !== -1;
  }).reduce(function (qs, k) {
    var value = getQueryParamValue(params, k);

    if (value !== undefined) {
      qs += qs ? '&' : '?';
      qs += encodeURIComponent(k) + '=' + value;
    }

    return qs;
  }, '');
};
/**
 * Generate a URL to a Brightcove Player.
 *
 * @param  {Object}  params
 *         A set of parameters describing the player URL to create.
 *
 * @param  {string}  params.accountId
 *         A Brightcove account ID.
 *
 * @param  {string}  [params.playerId="default"]
 *         A Brightcove player ID.
 *
 * @param  {string}  [params.embedId="default"]
 *         A Brightcove player embed ID.
 *
 * @param  {boolean} [params.iframe=false]
 *         Whether to return a URL for an HTML document to be embedded in
 *         an iframe.
 *
 * @param  {boolean} [params.minified=true]
 *         When the `iframe` argument is `false`, this can be used to control
 *         whether the minified or unminified JavaScript URL is returned.
 *
 * @param  {string} [params.base="https://players.brightcove.net"]
 *         A base CDN protocol and hostname. Mainly used for testing.
 *
 * @return {string}
 *         A URL to a Brightcove Player.
 */


var brightcovePlayerUrl = function brightcovePlayerUrl(_ref) {
  var accountId = _ref.accountId,
      _ref$base = _ref.base,
      base = _ref$base === undefined ? 'https://players.brightcove.net' : _ref$base,
      _ref$playerId = _ref.playerId,
      playerId = _ref$playerId === undefined ? 'default' : _ref$playerId,
      _ref$embedId = _ref.embedId,
      embedId = _ref$embedId === undefined ? 'default' : _ref$embedId,
      _ref$iframe = _ref.iframe,
      iframe = _ref$iframe === undefined ? false : _ref$iframe,
      _ref$minified = _ref.minified,
      minified = _ref$minified === undefined ? true : _ref$minified,
      _ref$queryParams = _ref.queryParams,
      queryParams = _ref$queryParams === undefined ? null : _ref$queryParams;
  var ext = '';

  if (iframe) {
    ext += 'html';
  } else {
    if (minified) {
      ext += 'min.';
    }

    ext += 'js';
  }

  if (base.charAt(base.length - 1) === '/') {
    base = base.substring(0, base.length - 1);
  }

  var qs = '';

  if (iframe && queryParams && (typeof queryParams === 'undefined' ? 'undefined' : _typeof(queryParams)) === 'object') {
    qs = getQueryString(queryParams);
  }

  accountId = encodeURIComponent(accountId);
  playerId = encodeURIComponent(playerId);
  embedId = encodeURIComponent(embedId);
  return base + '/' + accountId + '/' + playerId + '_' + embedId + '/index.' + ext + qs;
};
/**
 * The version of this module.
 *
 * @type {string}
 */


brightcovePlayerUrl.VERSION = version$1;
var DEFAULTS = {
  embedId: 'default',
  embedType: 'in-page',
  playerId: 'default',
  Promise: (global_window__WEBPACK_IMPORTED_MODULE_1___default().Promise),
  refNodeInsert: 'append'
};
var DEFAULT_ASPECT_RATIO = '16:9';
var DEFAULT_IFRAME_HORIZONTAL_PLAYLIST = false;
var DEFAULT_MAX_WIDTH = '100%';
var EMBED_TAG_NAME_VIDEO = 'video';
var EMBED_TAG_NAME_VIDEOJS = 'video-js';
var EMBED_TYPE_IN_PAGE = 'in-page';
var EMBED_TYPE_IFRAME = 'iframe';
var REF_NODE_INSERT_APPEND = 'append';
var REF_NODE_INSERT_PREPEND = 'prepend';
var REF_NODE_INSERT_BEFORE = 'before';
var REF_NODE_INSERT_AFTER = 'after';
var REF_NODE_INSERT_REPLACE = 'replace';
var JSON_ALLOWED_ATTRS = ['catalogSearch', 'catalogSequence'];
var BASE_URL = 'https://players.brightcove.net/';
/**
 * Gets the URL to a player on CDN.
 *
 * @private
 * @param  {Object} params
 *         A parameters object. See README for details.
 *
 * @return {string}
 *         A URL.
 */

var getUrl = function getUrl(params) {
  if (params.playerUrl) {
    return params.playerUrl;
  }

  var accountId = params.accountId,
      playerId = params.playerId,
      embedId = params.embedId,
      embedOptions = params.embedOptions;
  var iframe = params.embedType === EMBED_TYPE_IFRAME;
  return brightcovePlayerUrl({
    accountId: accountId,
    playerId: playerId,
    embedId: embedId,
    iframe: iframe,
    base: BASE_URL,
    // The unminified embed option is the exact reverse of the minified option
    // here.
    minified: embedOptions ? !embedOptions.unminified : true,
    // Pass the entire params object as query params. This is safe because
    // @brightcove/player-url only accepts a whitelist of parameters. Anything
    // else will be ignored.
    queryParams: params
  });
};
/**
 * Function used to get the base URL - primarily for testing.
 *
 * @private
 * @return {string}
 *         The current base URL.
 */


var getBaseUrl = function getBaseUrl() {
  return BASE_URL;
};
/**
 * Function used to set the base URL - primarily for testing.
 *
 * @private
 * @param {string} baseUrl
 *        A new base URL (instead of Brightcove CDN).
 */


var setBaseUrl = function setBaseUrl(baseUrl) {
  BASE_URL = baseUrl;
};

var urls = {
  getUrl: getUrl,
  getBaseUrl: getBaseUrl,
  setBaseUrl: setBaseUrl
};
/**
 * Is this value an element?
 *
 * @param  {Element} el
 *         A maybe element.
 *
 * @return {boolean}
 *         Whether or not the value is a element.
 */

var isEl = function isEl(el) {
  return Boolean(el && el.nodeType === 1);
};
/**
 * Is this value an element with a parent node?
 *
 * @param  {Element} el
 *         A maybe element.
 *
 * @return {boolean}
 *         Whether or not the value is a element with a parent node.
 */


var isElInDom = function isElInDom(el) {
  return Boolean(isEl(el) && el.parentNode);
};
/**
 * Creates an iframe embed code.
 *
 * @private
 * @param  {Object} params
 *         A parameters object. See README for details.
 *
 * @return {Element}
 *         The DOM element that will ultimately be passed to the `bc()` function.
 */


var createIframeEmbed = function createIframeEmbed(params) {
  var el = global_document__WEBPACK_IMPORTED_MODULE_0___default().createElement('iframe');
  el.setAttribute('allow', 'autoplay;encrypted-media;fullscreen');
  el.setAttribute('allowfullscreen', 'allowfullscreen');
  el.src = urls.getUrl(params);
  return el;
};
/**
 * Creates an in-page embed code.
 *
 * @private
 * @param  {Object} params
 *         A parameters object. See README for details.
 *
 * @return {Element}
 *         The DOM element that will ultimately be passed to the `bc()` function.
 */


var createInPageEmbed = function createInPageEmbed(params) {
  var embedOptions = params.embedOptions; // We DO NOT include the data-account, data-player, or data-embed attributes
  // here because we will be manually initializing the player.

  var paramsToAttrs = {
    adConfigId: 'data-ad-config-id',
    applicationId: 'data-application-id',
    catalogSearch: 'data-catalog-search',
    catalogSequence: 'data-catalog-sequence',
    deliveryConfigId: 'data-delivery-config-id',
    playlistId: 'data-playlist-id',
    playlistVideoId: 'data-playlist-video-id',
    poster: 'poster',
    videoId: 'data-video-id'
  };
  var tagName = embedOptions && embedOptions.tagName || EMBED_TAG_NAME_VIDEOJS;
  var el = global_document__WEBPACK_IMPORTED_MODULE_0___default().createElement(tagName);
  Object.keys(paramsToAttrs).filter(function (key) {
    return params[key];
  }).forEach(function (key) {
    var value; // If it's not a string, such as with a catalog search or sequence, we
    // try to encode it as JSON.

    if (typeof params[key] !== 'string' && JSON_ALLOWED_ATTRS.indexOf(key) !== -1) {
      try {
        value = JSON.stringify(params[key]); // If it fails, don't set anything.
      } catch (x) {
        return;
      }
    } else {
      value = String(params[key]).trim();
    }

    el.setAttribute(paramsToAttrs[key], value);
  });
  el.setAttribute('controls', 'controls');
  el.classList.add('video-js');
  return el;
};
/**
 * Wraps an element in responsive intrinsic ratio elements.
 *
 * @private
 * @param  {string} embedType
 *         The type of the embed.
 *
 * @param  {Object} embedOptions
 *         Embed options from the params.
 *
 * @param  {Element} el
 *         The DOM element.
 *
 * @return {Element}
 *         A new element (if needed).
 */


var wrapResponsive = function wrapResponsive(embedType, embedOptions, el) {
  if (!embedOptions.responsive) {
    return el;
  }

  el.style.position = 'absolute';
  el.style.top = '0px';
  el.style.right = '0px';
  el.style.bottom = '0px';
  el.style.left = '0px';
  el.style.width = '100%';
  el.style.height = '100%';

  var responsive = _extends({
    aspectRatio: DEFAULT_ASPECT_RATIO,
    iframeHorizontalPlaylist: DEFAULT_IFRAME_HORIZONTAL_PLAYLIST,
    maxWidth: DEFAULT_MAX_WIDTH
  }, embedOptions.responsive); // This value is validate at a higher level, so we can trust that it's in the
  // correct format.


  var aspectRatio = responsive.aspectRatio.split(':').map(Number);
  var inner = global_document__WEBPACK_IMPORTED_MODULE_0___default().createElement('div');
  var paddingTop = aspectRatio[1] / aspectRatio[0] * 100; // For iframes with a horizontal playlist, the playlist takes up 20% of the
  // vertical space (if shown); so, adjust the vertical size of the embed to
  // avoid black bars.

  if (embedType === EMBED_TYPE_IFRAME && responsive.iframeHorizontalPlaylist) {
    paddingTop *= 1.25;
  }

  inner.style.paddingTop = paddingTop + '%';
  inner.appendChild(el);
  var outer = global_document__WEBPACK_IMPORTED_MODULE_0___default().createElement('div');
  outer.style.position = 'relative';
  outer.style.display = 'block';
  outer.style.maxWidth = responsive.maxWidth;
  outer.appendChild(inner);
  return outer;
};
/**
 * Wraps an element in a Picture-in-Picture plugin container.
 *
 * @private
 * @param  {Object} embedOptions
 *         Embed options from the params.
 *
 * @param  {Element} el
 *         The DOM element.
 *
 * @return {Element}
 *         A new element (if needed).
 */


var wrapPip = function wrapPip(embedOptions, el) {
  if (!embedOptions.pip) {
    return el;
  }

  var pip = global_document__WEBPACK_IMPORTED_MODULE_0___default().createElement('div');
  pip.classList.add('vjs-pip-container');
  pip.appendChild(el);
  return pip;
};
/**
 * Wraps a bare embed element with necessary parent elements, depending on
 * embed options given in params.
 *
 * @private
 * @param  {string} embedType
 *         The type of the embed.
 *
 * @param  {Object} embedOptions
 *         Embed options from the params.
 *
 * @param  {Element} embed
 *         The embed DOM element.
 *
 * @return {Element}
 *         A new element (if needed) or the embed itself.
 */


var wrapEmbed = function wrapEmbed(embedType, embedOptions, embed) {
  if (!embedOptions) {
    return embed;
  }

  return wrapPip(embedOptions, wrapResponsive(embedType, embedOptions, embed));
};
/**
 * Inserts a previously-created embed element into the page based on params.
 *
 * @private
 * @param  {Object} params
 *         A parameters object. See README for details.
 *
 * @param  {Element} embed
 *         The embed DOM element.
 *
 * @return {Element}
 *         The embed DOM element.
 */


var insertEmbed = function insertEmbed(params, embed) {
  var refNode = params.refNode,
      refNodeInsert = params.refNodeInsert;
  var refNodeParent = refNode.parentNode; // Wrap the embed, if needed, in container elements to support various
  // plugins.

  var wrapped = wrapEmbed(params.embedType, params.embedOptions, embed); // Decide where to insert the wrapped embed.

  if (refNodeInsert === REF_NODE_INSERT_BEFORE) {
    refNodeParent.insertBefore(wrapped, refNode);
  } else if (refNodeInsert === REF_NODE_INSERT_AFTER) {
    refNodeParent.insertBefore(wrapped, refNode.nextElementSibling || null);
  } else if (refNodeInsert === REF_NODE_INSERT_REPLACE) {
    refNodeParent.replaceChild(wrapped, refNode);
  } else if (refNodeInsert === REF_NODE_INSERT_PREPEND) {
    refNode.insertBefore(wrapped, refNode.firstChild || null); // Append is the default.
  } else {
    refNode.appendChild(wrapped);
  } // If the playlist embed option is provided, we need to add a playlist element
  // immediately after the embed. This has to happen after the embed is inserted
  // into the DOM (above).


  if (params.embedOptions && params.embedOptions.playlist) {
    var playlistTagName = params.embedOptions.playlist.legacy ? 'ul' : 'div';
    var playlist = global_document__WEBPACK_IMPORTED_MODULE_0___default().createElement(playlistTagName);
    playlist.classList.add('vjs-playlist');
    embed.parentNode.insertBefore(playlist, embed.nextElementSibling || null);
  } // Clean up internal reference to the refNode to avoid potential memory
  // leaks in case the params get persisted somewhere. We won't need it beyond
  // this point.


  params.refNode = null; // Return the original embed element that can be passed to `bc()`.

  return embed;
};
/**
 * Handles `onEmbedCreated` callback invocation.
 *
 * @private
 * @param  {Object} params
 *         A parameters object. See README for details.
 *
 * @param  {Element} embed
 *         The embed DOM element.
 *
 * @return {Element}
 *         A possibly-new DOM element.
 */


var onEmbedCreated = function onEmbedCreated(params, embed) {
  if (typeof params.onEmbedCreated !== 'function') {
    return embed;
  }

  var result = params.onEmbedCreated(embed);

  if (isEl(result)) {
    return result;
  }

  return embed;
};
/**
 * Creates an embed code of the appropriate type, runs any customizations
 * necessary, and inserts it into the DOM.
 *
 * @param  {Object} params
 *         A parameters object. See README for details.
 *
 * @return {Element}
 *         The DOM element that will ultimately be passed to the `bc()`
 *         function. Even when customized or wrapped, the return value will be
 *         the target element.
 */


var createEmbed = function createEmbed(params) {
  var embed = params.embedType === EMBED_TYPE_IFRAME ? createIframeEmbed(params) : createInPageEmbed(params);
  return insertEmbed(params, onEmbedCreated(params, embed));
}; //
// The keys follow the format "accountId_playerId_embedId" where accountId is
// optional and defaults to "*". This happens when we detect pre-existing
// player globals.


var actualCache = new (global_window__WEBPACK_IMPORTED_MODULE_1___default().Map)();
/**
 * Get the cache key given some properties.
 *
 * @private
 * @param  {Object} props
 *         Properties describing the player record to cache.
 *
 * @param  {string} props.playerId
 *         A player ID.
 *
 * @param  {string} props.embedId
 *         An embed ID.
 *
 * @param  {string} [props.accountId="*"]
 *         An optional account ID. This is optional because when we search for
 *         pre-existing players to avoid downloads, we will not necessarily
 *         know the account ID.
 *
 * @return {string}
 *         A key to be used in the script cache.
 */

var key = function key(_ref) {
  var accountId = _ref.accountId,
      playerId = _ref.playerId,
      embedId = _ref.embedId;
  return (accountId || '*') + "_" + playerId + "_" + embedId;
};
/**
 * Add an entry to the script cache.
 *
 * @private
 * @param  {Object} props
 *         Properties describing the player record to cache.
 *
 * @param  {string} props.playerId
 *         A player ID.
 *
 * @param  {string} props.embedId
 *         An embed ID.
 *
 * @param  {string} [props.accountId="*"]
 *         An optional account ID. This is optional because when we search for
 *         pre-existing players to avoid downloads, we will not necessarily
 *         know the account ID. If not given, we assume that no script was
 *         downloaded for this player.
 */


var store = function store(props) {
  actualCache.set(key(props), props.accountId ? urls.getUrl(props) : '');
};
/**
 * Checks if the script cache has an entry.
 *
 * @private
 * @param  {Object} props
 *         Properties describing the player record to cache.
 *
 * @param  {string} props.playerId
 *         A player ID.
 *
 * @param  {string} props.embedId
 *         An embed ID.
 *
 * @param  {string} [props.accountId="*"]
 *         An optional account ID. This is optional because when we search for
 *         pre-existing players to avoid downloads, we will not necessarily
 *         know the account ID.
 *
 * @return {boolean}
 *         Will be `true` if there is a matching cache entry.
 */


var has = function has(props) {
  return actualCache.has(key(props));
};
/**
 * Gets a cache entry.
 *
 * @private
 * @param  {Object} props
 *         Properties describing the player record to cache.
 *
 * @param  {string} props.playerId
 *         A player ID.
 *
 * @param  {string} props.embedId
 *         An embed ID.
 *
 * @param  {string} [props.accountId="*"]
 *         An optional account ID. This is optional because when we search for
 *         pre-existing players to avoid downloads, we will not necessarily
 *         know the account ID.
 *
 * @return {string}
 *         A cache entry - a URL or empty string.
 *
 */


var get = function get(props) {
  return actualCache.get(key(props));
};
/**
 * Clears the cache.
 */


var clear = function clear() {
  actualCache.clear();
};
/**
 * Iterates over the cache.
 *
 * @param  {Function} fn
 *         A callback function that will be called with a value and a key
 *         for each item in the cache.
 */


var forEach = function forEach(fn) {
  actualCache.forEach(fn);
};

var playerScriptCache = {
  clear: clear,
  forEach: forEach,
  get: get,
  has: has,
  key: key,
  store: store
};
var REGEX_PLAYER_EMBED = /^([A-Za-z0-9]+)_([A-Za-z0-9]+)$/;
/**
 * Gets an array of current per-player/per-embed `bc` globals that are
 * attached to the `bc` global (e.g. `bc.abc123xyz_default`).
 *
 * If `bc` is not defined, returns an empty array.
 *
 * @private
 * @return {string[]}
 *         An array of keys.
 */

var getBcGlobalKeys = function getBcGlobalKeys() {
  return (global_window__WEBPACK_IMPORTED_MODULE_1___default().bc) ? Object.keys((global_window__WEBPACK_IMPORTED_MODULE_1___default().bc)).filter(function (k) {
    return REGEX_PLAYER_EMBED.test(k);
  }) : [];
};
/**
 * Gets known global object keys that Brightcove Players may create.
 *
 * @private
 * @return {string[]}
 *         An array of global variables that were added during testing.
 */


var getGlobalKeys = function getGlobalKeys() {
  return Object.keys((global_window__WEBPACK_IMPORTED_MODULE_1___default())).filter(function (k) {
    return /^videojs/i.test(k) || /^(bc)$/.test(k);
  });
};
/**
 * Dispose all players from a copy of Video.js.
 *
 * @param  {Function} videojs
 *         A copy of Video.js.
 */


var disposeAll = function disposeAll(videojs) {
  if (!videojs) {
    return;
  }

  Object.keys(videojs.players).forEach(function (k) {
    var p = videojs.players[k];

    if (p) {
      p.dispose();
    }
  });
};
/**
 * Resets environment state.
 *
 * This will dispose ALL Video.js players on the page and remove ALL `bc` and
 * `videojs` globals it finds.
 */


var reset = function reset() {
  // Remove all script elements from the DOM.
  playerScriptCache.forEach(function (value, key) {
    // If no script URL is associated, skip it.
    if (!value) {
      return;
    } // Find all script elements and remove them.


    Array.prototype.slice.call(global_document__WEBPACK_IMPORTED_MODULE_0___default().querySelectorAll("script[src=\"" + value + "\"]")).forEach(function (el) {
      return el.parentNode.removeChild(el);
    });
  }); // Clear the internal cache that have been downloaded.

  playerScriptCache.clear(); // Dispose any remaining players from the `videojs` global.

  disposeAll((global_window__WEBPACK_IMPORTED_MODULE_1___default().videojs)); // There may be other `videojs` instances lurking in the bowels of the
  // `bc` global. This should eliminate any of those.

  getBcGlobalKeys().forEach(function (k) {
    return disposeAll((global_window__WEBPACK_IMPORTED_MODULE_1___default().bc)[k].videojs);
  }); // Delete any global object keys that were created.

  getGlobalKeys().forEach(function (k) {
    delete (global_window__WEBPACK_IMPORTED_MODULE_1___default())[k];
  });
};
/**
 * At runtime, populate the cache with pre-detected players. This allows
 * people who have bundled their player or included a script tag before this
 * runs to not have to re-download players.
 */


var detectPlayers = function detectPlayers() {
  getBcGlobalKeys().forEach(function (k) {
    var matches = k.match(REGEX_PLAYER_EMBED);
    var props = {
      playerId: matches[1],
      embedId: matches[2]
    };

    if (!playerScriptCache.has(props)) {
      playerScriptCache.store(props);
    }
  });
};

var env = {
  detectPlayers: detectPlayers,
  reset: reset
};
env.detectPlayers();
/**
 * Is this value a function?
 *
 * @private
 * @param  {Function} fn
 *         A maybe function.
 *
 * @return {boolean}
 *         Whether or not the value is a function.
 */

var isFn = function isFn(fn) {
  return typeof fn === 'function';
};
/**
 * Checks whether an embedType parameter is valid.
 *
 * @private
 * @param  {string} embedType
 *         The value to test.
 *
 * @return {boolean}
 *         Whether the value is valid.
 */


var isValidEmbedType = function isValidEmbedType(embedType) {
  return embedType === EMBED_TYPE_IN_PAGE || embedType === EMBED_TYPE_IFRAME;
};
/**
 * Checks whether an embedOptions.tagName parameter is valid.
 *
 * @private
 * @param  {string} tagName
 *         The value to test.
 *
 * @return {boolean}
 *         Whether the value is valid.
 */


var isValidTagName = function isValidTagName(tagName) {
  return tagName === EMBED_TAG_NAME_VIDEOJS || tagName === EMBED_TAG_NAME_VIDEO;
};
/**
 * Checks whether a refNodeInsert parameter is valid.
 *
 * @private
 * @param  {string} refNodeInsert
 *         The value to test.
 *
 * @return {boolean}
 *         Whether the value is valid.
 */


var isValidRootInsert = function isValidRootInsert(refNodeInsert) {
  return refNodeInsert === REF_NODE_INSERT_APPEND || refNodeInsert === REF_NODE_INSERT_PREPEND || refNodeInsert === REF_NODE_INSERT_BEFORE || refNodeInsert === REF_NODE_INSERT_AFTER || refNodeInsert === REF_NODE_INSERT_REPLACE;
};
/**
 * Checks parameters and throws an error on validation problems.
 *
 * @private
 * @param  {Object} params
 *         A parameters object. See README for details.
 *
 * @throws {Error} If accountId is missing.
 * @throws {Error} If refNode is missing or invalid.
 * @throws {Error} If embedType is missing or invalid.
 * @throws {Error} If attempting to use an iframe embed with options.
 * @throws {Error} If attempting to use embedOptions.responsiveIframe with a
 *                 non-iframe embed.
 * @throws {Error} If refNodeInsert is missing or invalid.
 */


var checkParams = function checkParams(params) {
  var accountId = params.accountId,
      embedOptions = params.embedOptions,
      embedType = params.embedType,
      options = params.options,
      refNode = params.refNode,
      refNodeInsert = params.refNodeInsert;

  if (!accountId) {
    throw new Error('accountId is required');
  } else if (!isElInDom(refNode)) {
    throw new Error('refNode must resolve to a node attached to the DOM');
  } else if (!isValidEmbedType(embedType)) {
    throw new Error('embedType is missing or invalid');
  } else if (embedType === EMBED_TYPE_IFRAME && options) {
    throw new Error('cannot use options with an iframe embed');
  } else if (embedOptions && embedOptions.tagName !== undefined && !isValidTagName(embedOptions.tagName)) {
    throw new Error("embedOptions.tagName is invalid (value: \"" + embedOptions.tagName + "\")");
  } else if (embedOptions && embedOptions.responsive && embedOptions.responsive.aspectRatio && !/^\d+\:\d+$/.test(embedOptions.responsive.aspectRatio)) {
    throw new Error("embedOptions.responsive.aspectRatio must be in the \"n:n\" format (value: \"" + embedOptions.responsive.aspectRatio + "\")");
  } else if (!isValidRootInsert(refNodeInsert)) {
    throw new Error('refNodeInsert is missing or invalid');
  }
};
/**
 * Normalizes a `refNode` param to an element - or `null`.
 *
 * @private
 * @param  {Element|string} refNode
 *         The value of a `refNode` param.
 *
 * @return {Element|null}
 *         A DOM element or `null` if the `refNode` was given as a string and
 *         did not match an element.
 */


var resolveRefNode = function resolveRefNode(refNode) {
  if (isElInDom(refNode)) {
    return refNode;
  }

  if (typeof refNode === 'string') {
    return global_document__WEBPACK_IMPORTED_MODULE_0___default().querySelector(refNode);
  }

  return null;
};
/**
 * Initializes a player and returns it.
 *
 * @private
 * @param  {Object} params
 *         A parameters object. See README for details.
 *
 * @param  {Element} embed
 *         An element that will be passed to the `bc()` function.
 *
 * @param  {Function} resolve
 *         A function to call if a player is successfully initialized.
 *
 * @param  {Function} reject
 *         A function to call if a player fails to be initialized.
 *
 * @return {Object}
 *         A success object whose `ref` is a player.
 */


var initPlayer = function initPlayer(params, embed, resolve, reject) {
  var embedId = params.embedId,
      playerId = params.playerId;
  var bc = (global_window__WEBPACK_IMPORTED_MODULE_1___default().bc)[playerId + "_" + embedId] || (global_window__WEBPACK_IMPORTED_MODULE_1___default().bc);

  if (!bc) {
    return reject(new Error("missing bc function for " + playerId));
  }

  playerScriptCache.store(params);
  var player;

  try {
    player = bc(embed, params.options); // Add a PLAYER_LOADER property to bcinfo to indicate this player was
    // loaded via that mechanism.

    if (player.bcinfo) {
      player.bcinfo.PLAYER_LOADER = true;
    }
  } catch (x) {
    var message = 'Could not initialize the Brightcove Player.'; // Update the rejection message based on known conditions that can cause it.

    if (params.embedOptions.tagName === EMBED_TAG_NAME_VIDEOJS) {
      message += ' You are attempting to embed using a "video-js" element.' + ' Please ensure that your Player is v6.11.0 or newer in order to' + ' support this embed type. Alternatively, pass `"video"` for' + ' `embedOptions.tagName`.';
    }

    return reject(new Error(message));
  }

  resolve({
    type: EMBED_TYPE_IN_PAGE,
    ref: player
  });
};
/**
 * Loads a player from CDN and embeds it.
 *
 * @private
 * @param  {Object} params
 *         A parameters object. See README for details.
 *
 * @param  {Function} resolve
 *         A function to call if a player is successfully initialized.
 *
 * @param  {Function} reject
 *         A function to call if a player fails to be initialized.
 */


var loadPlayer = function loadPlayer(params, resolve, reject) {
  params.refNode = resolveRefNode(params.refNode);
  checkParams(params);
  var refNode = params.refNode,
      refNodeInsert = params.refNodeInsert; // Store a reference to the refNode parent. When we use the replace method,
  // we'll need it as the location to store the script element.

  var refNodeParent = refNode.parentNode;
  var embed = createEmbed(params); // If this is an iframe, all we need to do is create the embed code and
  // inject it. Because there is no reliable way to hook into an iframe from
  // the parent page, we simply resolve immediately upon creating the embed.

  if (params.embedType === EMBED_TYPE_IFRAME) {
    resolve({
      type: EMBED_TYPE_IFRAME,
      ref: embed
    });
    return;
  } // If we've already downloaded this script or detected a matching global, we
  // should have the proper `bc` global and can bypass the script creation
  // process.


  if (playerScriptCache.has(params)) {
    return initPlayer(params, embed, resolve, reject);
  }

  var script = global_document__WEBPACK_IMPORTED_MODULE_0___default().createElement('script');

  script.onload = function () {
    return initPlayer(params, embed, resolve, reject);
  };

  script.onerror = function () {
    reject(new Error('player script could not be downloaded'));
  };

  script.async = true;
  script.charset = 'utf-8';
  script.src = urls.getUrl(params);

  if (refNodeInsert === REF_NODE_INSERT_REPLACE) {
    refNodeParent.appendChild(script);
  } else {
    refNode.appendChild(script);
  }
};
/**
 * A function for asynchronously loading a Brightcove Player into a web page.
 *
 * @param  {Object} parameters
 *         A parameters object. See README for details.
 *
 * @return {Promise|undefined}
 *         A Promise, if possible.
 */


var brightcovePlayerLoader = function brightcovePlayerLoader(parameters) {
  var params = _extends({}, DEFAULTS, parameters);

  var Promise = params.Promise,
      onSuccess = params.onSuccess,
      onFailure = params.onFailure; // When Promise is not available or any success/failure callback is given,
  // do not attempt to use Promises.

  if (!isFn(Promise) || isFn(onSuccess) || isFn(onFailure)) {
    return loadPlayer(params, isFn(onSuccess) ? onSuccess : function () {}, isFn(onFailure) ? onFailure : function (err) {
      throw err;
    });
  } // Promises are supported, use 'em.


  return new Promise(function (resolve, reject) {
    return loadPlayer(params, resolve, reject);
  });
};
/**
 * Expose a non-writable, non-configurable property on the
 * `brightcovePlayerLoader` function.
 *
 * @private
 * @param  {string} key
 *         The property key.
 *
 * @param  {string|Function} value
 *         The value.
 */


var expose = function expose(key, value) {
  Object.defineProperty(brightcovePlayerLoader, key, {
    configurable: false,
    enumerable: true,
    value: value,
    writable: false
  });
};
/**
 * Get the base URL for players. By default, this will be the Brightcove CDN.
 *
 * @return {string}
 *         The current base URL.
 */


expose('getBaseUrl', function () {
  return urls.getBaseUrl();
});
/**
 * Set the base URL for players. By default, this will be the Brightcove CDN,
 * but can be overridden with this function.
 *
 * @param {string} baseUrl
 *        A new base URL (instead of Brightcove CDN).
 */

expose('setBaseUrl', function (baseUrl) {
  urls.setBaseUrl(baseUrl);
});
/**
 * Get the URL for a player.
 */

expose('getUrl', function (options) {
  return urls.getUrl(options);
});
/**
 * Completely resets global state.
 *
 * This will dispose ALL Video.js players on the page and remove ALL `bc` and
 * `videojs` globals it finds.
 */

expose('reset', function () {
  return env.reset();
}); // Define some read-only constants on the exported function.

[['EMBED_TAG_NAME_VIDEO', EMBED_TAG_NAME_VIDEO], ['EMBED_TAG_NAME_VIDEOJS', EMBED_TAG_NAME_VIDEOJS], ['EMBED_TYPE_IN_PAGE', EMBED_TYPE_IN_PAGE], ['EMBED_TYPE_IFRAME', EMBED_TYPE_IFRAME], ['REF_NODE_INSERT_APPEND', REF_NODE_INSERT_APPEND], ['REF_NODE_INSERT_PREPEND', REF_NODE_INSERT_PREPEND], ['REF_NODE_INSERT_BEFORE', REF_NODE_INSERT_BEFORE], ['REF_NODE_INSERT_AFTER', REF_NODE_INSERT_AFTER], ['REF_NODE_INSERT_REPLACE', REF_NODE_INSERT_REPLACE], ['VERSION', version]].forEach(function (arr) {
  expose(arr[0], arr[1]);
});
/* harmony default export */ __webpack_exports__["default"] = (brightcovePlayerLoader);

/***/ }),

/***/ "./node_modules/dompurify/dist/purify.js":
/*!***********************************************!*\
  !*** ./node_modules/dompurify/dist/purify.js ***!
  \***********************************************/
/***/ (function(module, exports, __webpack_require__) {

var __WEBPACK_AMD_DEFINE_FACTORY__, __WEBPACK_AMD_DEFINE_RESULT__;function _typeof2(obj) { "@babel/helpers - typeof"; if (typeof Symbol === "function" && typeof Symbol.iterator === "symbol") { _typeof2 = function _typeof2(obj) { return typeof obj; }; } else { _typeof2 = function _typeof2(obj) { return obj && typeof Symbol === "function" && obj.constructor === Symbol && obj !== Symbol.prototype ? "symbol" : typeof obj; }; } return _typeof2(obj); }

/*! @license DOMPurify 2.4.0 | (c) Cure53 and other contributors | Released under the Apache license 2.0 and Mozilla Public License 2.0 | github.com/cure53/DOMPurify/blob/2.4.0/LICENSE */
(function (global, factory) {
  ( false ? 0 : _typeof2(exports)) === 'object' && "object" !== 'undefined' ? module.exports = factory() :  true ? !(__WEBPACK_AMD_DEFINE_FACTORY__ = (factory),
		__WEBPACK_AMD_DEFINE_RESULT__ = (typeof __WEBPACK_AMD_DEFINE_FACTORY__ === 'function' ?
		(__WEBPACK_AMD_DEFINE_FACTORY__.call(exports, __webpack_require__, exports, module)) :
		__WEBPACK_AMD_DEFINE_FACTORY__),
		__WEBPACK_AMD_DEFINE_RESULT__ !== undefined && (module.exports = __WEBPACK_AMD_DEFINE_RESULT__)) : (0);
})(this, function () {
  'use strict';

  function _typeof(obj) {
    "@babel/helpers - typeof";

    return _typeof = "function" == typeof Symbol && "symbol" == typeof Symbol.iterator ? function (obj) {
      return typeof obj;
    } : function (obj) {
      return obj && "function" == typeof Symbol && obj.constructor === Symbol && obj !== Symbol.prototype ? "symbol" : typeof obj;
    }, _typeof(obj);
  }

  function _setPrototypeOf(o, p) {
    _setPrototypeOf = Object.setPrototypeOf || function _setPrototypeOf(o, p) {
      o.__proto__ = p;
      return o;
    };

    return _setPrototypeOf(o, p);
  }

  function _isNativeReflectConstruct() {
    if (typeof Reflect === "undefined" || !Reflect.construct) return false;
    if (Reflect.construct.sham) return false;
    if (typeof Proxy === "function") return true;

    try {
      Boolean.prototype.valueOf.call(Reflect.construct(Boolean, [], function () {}));
      return true;
    } catch (e) {
      return false;
    }
  }

  function _construct(Parent, args, Class) {
    if (_isNativeReflectConstruct()) {
      _construct = Reflect.construct;
    } else {
      _construct = function _construct(Parent, args, Class) {
        var a = [null];
        a.push.apply(a, args);
        var Constructor = Function.bind.apply(Parent, a);
        var instance = new Constructor();
        if (Class) _setPrototypeOf(instance, Class.prototype);
        return instance;
      };
    }

    return _construct.apply(null, arguments);
  }

  function _toConsumableArray(arr) {
    return _arrayWithoutHoles(arr) || _iterableToArray(arr) || _unsupportedIterableToArray(arr) || _nonIterableSpread();
  }

  function _arrayWithoutHoles(arr) {
    if (Array.isArray(arr)) return _arrayLikeToArray(arr);
  }

  function _iterableToArray(iter) {
    if (typeof Symbol !== "undefined" && iter[Symbol.iterator] != null || iter["@@iterator"] != null) return Array.from(iter);
  }

  function _unsupportedIterableToArray(o, minLen) {
    if (!o) return;
    if (typeof o === "string") return _arrayLikeToArray(o, minLen);
    var n = Object.prototype.toString.call(o).slice(8, -1);
    if (n === "Object" && o.constructor) n = o.constructor.name;
    if (n === "Map" || n === "Set") return Array.from(o);
    if (n === "Arguments" || /^(?:Ui|I)nt(?:8|16|32)(?:Clamped)?Array$/.test(n)) return _arrayLikeToArray(o, minLen);
  }

  function _arrayLikeToArray(arr, len) {
    if (len == null || len > arr.length) len = arr.length;

    for (var i = 0, arr2 = new Array(len); i < len; i++) {
      arr2[i] = arr[i];
    }

    return arr2;
  }

  function _nonIterableSpread() {
    throw new TypeError("Invalid attempt to spread non-iterable instance.\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method.");
  }

  var hasOwnProperty = Object.hasOwnProperty,
      setPrototypeOf = Object.setPrototypeOf,
      isFrozen = Object.isFrozen,
      getPrototypeOf = Object.getPrototypeOf,
      getOwnPropertyDescriptor = Object.getOwnPropertyDescriptor;
  var freeze = Object.freeze,
      seal = Object.seal,
      create = Object.create; // eslint-disable-line import/no-mutable-exports

  var _ref = typeof Reflect !== 'undefined' && Reflect,
      apply = _ref.apply,
      construct = _ref.construct;

  if (!apply) {
    apply = function apply(fun, thisValue, args) {
      return fun.apply(thisValue, args);
    };
  }

  if (!freeze) {
    freeze = function freeze(x) {
      return x;
    };
  }

  if (!seal) {
    seal = function seal(x) {
      return x;
    };
  }

  if (!construct) {
    construct = function construct(Func, args) {
      return _construct(Func, _toConsumableArray(args));
    };
  }

  var arrayForEach = unapply(Array.prototype.forEach);
  var arrayPop = unapply(Array.prototype.pop);
  var arrayPush = unapply(Array.prototype.push);
  var stringToLowerCase = unapply(String.prototype.toLowerCase);
  var stringMatch = unapply(String.prototype.match);
  var stringReplace = unapply(String.prototype.replace);
  var stringIndexOf = unapply(String.prototype.indexOf);
  var stringTrim = unapply(String.prototype.trim);
  var regExpTest = unapply(RegExp.prototype.test);
  var typeErrorCreate = unconstruct(TypeError);

  function unapply(func) {
    return function (thisArg) {
      for (var _len = arguments.length, args = new Array(_len > 1 ? _len - 1 : 0), _key = 1; _key < _len; _key++) {
        args[_key - 1] = arguments[_key];
      }

      return apply(func, thisArg, args);
    };
  }

  function unconstruct(func) {
    return function () {
      for (var _len2 = arguments.length, args = new Array(_len2), _key2 = 0; _key2 < _len2; _key2++) {
        args[_key2] = arguments[_key2];
      }

      return construct(func, args);
    };
  }
  /* Add properties to a lookup table */


  function addToSet(set, array, transformCaseFunc) {
    transformCaseFunc = transformCaseFunc ? transformCaseFunc : stringToLowerCase;

    if (setPrototypeOf) {
      // Make 'in' and truthy checks like Boolean(set.constructor)
      // independent of any properties defined on Object.prototype.
      // Prevent prototype setters from intercepting set as a this value.
      setPrototypeOf(set, null);
    }

    var l = array.length;

    while (l--) {
      var element = array[l];

      if (typeof element === 'string') {
        var lcElement = transformCaseFunc(element);

        if (lcElement !== element) {
          // Config presets (e.g. tags.js, attrs.js) are immutable.
          if (!isFrozen(array)) {
            array[l] = lcElement;
          }

          element = lcElement;
        }
      }

      set[element] = true;
    }

    return set;
  }
  /* Shallow clone an object */


  function clone(object) {
    var newObject = create(null);
    var property;

    for (property in object) {
      if (apply(hasOwnProperty, object, [property])) {
        newObject[property] = object[property];
      }
    }

    return newObject;
  }
  /* IE10 doesn't support __lookupGetter__ so lets'
   * simulate it. It also automatically checks
   * if the prop is function or getter and behaves
   * accordingly. */


  function lookupGetter(object, prop) {
    while (object !== null) {
      var desc = getOwnPropertyDescriptor(object, prop);

      if (desc) {
        if (desc.get) {
          return unapply(desc.get);
        }

        if (typeof desc.value === 'function') {
          return unapply(desc.value);
        }
      }

      object = getPrototypeOf(object);
    }

    function fallbackValue(element) {
      console.warn('fallback value for', element);
      return null;
    }

    return fallbackValue;
  }

  var html$1 = freeze(['a', 'abbr', 'acronym', 'address', 'area', 'article', 'aside', 'audio', 'b', 'bdi', 'bdo', 'big', 'blink', 'blockquote', 'body', 'br', 'button', 'canvas', 'caption', 'center', 'cite', 'code', 'col', 'colgroup', 'content', 'data', 'datalist', 'dd', 'decorator', 'del', 'details', 'dfn', 'dialog', 'dir', 'div', 'dl', 'dt', 'element', 'em', 'fieldset', 'figcaption', 'figure', 'font', 'footer', 'form', 'h1', 'h2', 'h3', 'h4', 'h5', 'h6', 'head', 'header', 'hgroup', 'hr', 'html', 'i', 'img', 'input', 'ins', 'kbd', 'label', 'legend', 'li', 'main', 'map', 'mark', 'marquee', 'menu', 'menuitem', 'meter', 'nav', 'nobr', 'ol', 'optgroup', 'option', 'output', 'p', 'picture', 'pre', 'progress', 'q', 'rp', 'rt', 'ruby', 's', 'samp', 'section', 'select', 'shadow', 'small', 'source', 'spacer', 'span', 'strike', 'strong', 'style', 'sub', 'summary', 'sup', 'table', 'tbody', 'td', 'template', 'textarea', 'tfoot', 'th', 'thead', 'time', 'tr', 'track', 'tt', 'u', 'ul', 'var', 'video', 'wbr']); // SVG

  var svg$1 = freeze(['svg', 'a', 'altglyph', 'altglyphdef', 'altglyphitem', 'animatecolor', 'animatemotion', 'animatetransform', 'circle', 'clippath', 'defs', 'desc', 'ellipse', 'filter', 'font', 'g', 'glyph', 'glyphref', 'hkern', 'image', 'line', 'lineargradient', 'marker', 'mask', 'metadata', 'mpath', 'path', 'pattern', 'polygon', 'polyline', 'radialgradient', 'rect', 'stop', 'style', 'switch', 'symbol', 'text', 'textpath', 'title', 'tref', 'tspan', 'view', 'vkern']);
  var svgFilters = freeze(['feBlend', 'feColorMatrix', 'feComponentTransfer', 'feComposite', 'feConvolveMatrix', 'feDiffuseLighting', 'feDisplacementMap', 'feDistantLight', 'feFlood', 'feFuncA', 'feFuncB', 'feFuncG', 'feFuncR', 'feGaussianBlur', 'feImage', 'feMerge', 'feMergeNode', 'feMorphology', 'feOffset', 'fePointLight', 'feSpecularLighting', 'feSpotLight', 'feTile', 'feTurbulence']); // List of SVG elements that are disallowed by default.
  // We still need to know them so that we can do namespace
  // checks properly in case one wants to add them to
  // allow-list.

  var svgDisallowed = freeze(['animate', 'color-profile', 'cursor', 'discard', 'fedropshadow', 'font-face', 'font-face-format', 'font-face-name', 'font-face-src', 'font-face-uri', 'foreignobject', 'hatch', 'hatchpath', 'mesh', 'meshgradient', 'meshpatch', 'meshrow', 'missing-glyph', 'script', 'set', 'solidcolor', 'unknown', 'use']);
  var mathMl$1 = freeze(['math', 'menclose', 'merror', 'mfenced', 'mfrac', 'mglyph', 'mi', 'mlabeledtr', 'mmultiscripts', 'mn', 'mo', 'mover', 'mpadded', 'mphantom', 'mroot', 'mrow', 'ms', 'mspace', 'msqrt', 'mstyle', 'msub', 'msup', 'msubsup', 'mtable', 'mtd', 'mtext', 'mtr', 'munder', 'munderover']); // Similarly to SVG, we want to know all MathML elements,
  // even those that we disallow by default.

  var mathMlDisallowed = freeze(['maction', 'maligngroup', 'malignmark', 'mlongdiv', 'mscarries', 'mscarry', 'msgroup', 'mstack', 'msline', 'msrow', 'semantics', 'annotation', 'annotation-xml', 'mprescripts', 'none']);
  var text = freeze(['#text']);
  var html = freeze(['accept', 'action', 'align', 'alt', 'autocapitalize', 'autocomplete', 'autopictureinpicture', 'autoplay', 'background', 'bgcolor', 'border', 'capture', 'cellpadding', 'cellspacing', 'checked', 'cite', 'class', 'clear', 'color', 'cols', 'colspan', 'controls', 'controlslist', 'coords', 'crossorigin', 'datetime', 'decoding', 'default', 'dir', 'disabled', 'disablepictureinpicture', 'disableremoteplayback', 'download', 'draggable', 'enctype', 'enterkeyhint', 'face', 'for', 'headers', 'height', 'hidden', 'high', 'href', 'hreflang', 'id', 'inputmode', 'integrity', 'ismap', 'kind', 'label', 'lang', 'list', 'loading', 'loop', 'low', 'max', 'maxlength', 'media', 'method', 'min', 'minlength', 'multiple', 'muted', 'name', 'nonce', 'noshade', 'novalidate', 'nowrap', 'open', 'optimum', 'pattern', 'placeholder', 'playsinline', 'poster', 'preload', 'pubdate', 'radiogroup', 'readonly', 'rel', 'required', 'rev', 'reversed', 'role', 'rows', 'rowspan', 'spellcheck', 'scope', 'selected', 'shape', 'size', 'sizes', 'span', 'srclang', 'start', 'src', 'srcset', 'step', 'style', 'summary', 'tabindex', 'title', 'translate', 'type', 'usemap', 'valign', 'value', 'width', 'xmlns', 'slot']);
  var svg = freeze(['accent-height', 'accumulate', 'additive', 'alignment-baseline', 'ascent', 'attributename', 'attributetype', 'azimuth', 'basefrequency', 'baseline-shift', 'begin', 'bias', 'by', 'class', 'clip', 'clippathunits', 'clip-path', 'clip-rule', 'color', 'color-interpolation', 'color-interpolation-filters', 'color-profile', 'color-rendering', 'cx', 'cy', 'd', 'dx', 'dy', 'diffuseconstant', 'direction', 'display', 'divisor', 'dur', 'edgemode', 'elevation', 'end', 'fill', 'fill-opacity', 'fill-rule', 'filter', 'filterunits', 'flood-color', 'flood-opacity', 'font-family', 'font-size', 'font-size-adjust', 'font-stretch', 'font-style', 'font-variant', 'font-weight', 'fx', 'fy', 'g1', 'g2', 'glyph-name', 'glyphref', 'gradientunits', 'gradienttransform', 'height', 'href', 'id', 'image-rendering', 'in', 'in2', 'k', 'k1', 'k2', 'k3', 'k4', 'kerning', 'keypoints', 'keysplines', 'keytimes', 'lang', 'lengthadjust', 'letter-spacing', 'kernelmatrix', 'kernelunitlength', 'lighting-color', 'local', 'marker-end', 'marker-mid', 'marker-start', 'markerheight', 'markerunits', 'markerwidth', 'maskcontentunits', 'maskunits', 'max', 'mask', 'media', 'method', 'mode', 'min', 'name', 'numoctaves', 'offset', 'operator', 'opacity', 'order', 'orient', 'orientation', 'origin', 'overflow', 'paint-order', 'path', 'pathlength', 'patterncontentunits', 'patterntransform', 'patternunits', 'points', 'preservealpha', 'preserveaspectratio', 'primitiveunits', 'r', 'rx', 'ry', 'radius', 'refx', 'refy', 'repeatcount', 'repeatdur', 'restart', 'result', 'rotate', 'scale', 'seed', 'shape-rendering', 'specularconstant', 'specularexponent', 'spreadmethod', 'startoffset', 'stddeviation', 'stitchtiles', 'stop-color', 'stop-opacity', 'stroke-dasharray', 'stroke-dashoffset', 'stroke-linecap', 'stroke-linejoin', 'stroke-miterlimit', 'stroke-opacity', 'stroke', 'stroke-width', 'style', 'surfacescale', 'systemlanguage', 'tabindex', 'targetx', 'targety', 'transform', 'transform-origin', 'text-anchor', 'text-decoration', 'text-rendering', 'textlength', 'type', 'u1', 'u2', 'unicode', 'values', 'viewbox', 'visibility', 'version', 'vert-adv-y', 'vert-origin-x', 'vert-origin-y', 'width', 'word-spacing', 'wrap', 'writing-mode', 'xchannelselector', 'ychannelselector', 'x', 'x1', 'x2', 'xmlns', 'y', 'y1', 'y2', 'z', 'zoomandpan']);
  var mathMl = freeze(['accent', 'accentunder', 'align', 'bevelled', 'close', 'columnsalign', 'columnlines', 'columnspan', 'denomalign', 'depth', 'dir', 'display', 'displaystyle', 'encoding', 'fence', 'frame', 'height', 'href', 'id', 'largeop', 'length', 'linethickness', 'lspace', 'lquote', 'mathbackground', 'mathcolor', 'mathsize', 'mathvariant', 'maxsize', 'minsize', 'movablelimits', 'notation', 'numalign', 'open', 'rowalign', 'rowlines', 'rowspacing', 'rowspan', 'rspace', 'rquote', 'scriptlevel', 'scriptminsize', 'scriptsizemultiplier', 'selection', 'separator', 'separators', 'stretchy', 'subscriptshift', 'supscriptshift', 'symmetric', 'voffset', 'width', 'xmlns']);
  var xml = freeze(['xlink:href', 'xml:id', 'xlink:title', 'xml:space', 'xmlns:xlink']);
  var MUSTACHE_EXPR = seal(/\{\{[\w\W]*|[\w\W]*\}\}/gm); // Specify template detection regex for SAFE_FOR_TEMPLATES mode

  var ERB_EXPR = seal(/<%[\w\W]*|[\w\W]*%>/gm);
  var DATA_ATTR = seal(/^data-[\-\w.\u00B7-\uFFFF]/); // eslint-disable-line no-useless-escape

  var ARIA_ATTR = seal(/^aria-[\-\w]+$/); // eslint-disable-line no-useless-escape

  var IS_ALLOWED_URI = seal(/^(?:(?:(?:f|ht)tps?|mailto|tel|callto|cid|xmpp):|[^a-z]|[a-z+.\-]+(?:[^a-z+.\-:]|$))/i // eslint-disable-line no-useless-escape
  );
  var IS_SCRIPT_OR_DATA = seal(/^(?:\w+script|data):/i);
  var ATTR_WHITESPACE = seal(/[\u0000-\u0020\u00A0\u1680\u180E\u2000-\u2029\u205F\u3000]/g // eslint-disable-line no-control-regex
  );
  var DOCTYPE_NAME = seal(/^html$/i);

  var getGlobal = function getGlobal() {
    return typeof window === 'undefined' ? null : window;
  };
  /**
   * Creates a no-op policy for internal use only.
   * Don't export this function outside this module!
   * @param {?TrustedTypePolicyFactory} trustedTypes The policy factory.
   * @param {Document} document The document object (to determine policy name suffix)
   * @return {?TrustedTypePolicy} The policy created (or null, if Trusted Types
   * are not supported).
   */


  var _createTrustedTypesPolicy = function _createTrustedTypesPolicy(trustedTypes, document) {
    if (_typeof(trustedTypes) !== 'object' || typeof trustedTypes.createPolicy !== 'function') {
      return null;
    } // Allow the callers to control the unique policy name
    // by adding a data-tt-policy-suffix to the script element with the DOMPurify.
    // Policy creation with duplicate names throws in Trusted Types.


    var suffix = null;
    var ATTR_NAME = 'data-tt-policy-suffix';

    if (document.currentScript && document.currentScript.hasAttribute(ATTR_NAME)) {
      suffix = document.currentScript.getAttribute(ATTR_NAME);
    }

    var policyName = 'dompurify' + (suffix ? '#' + suffix : '');

    try {
      return trustedTypes.createPolicy(policyName, {
        createHTML: function createHTML(html) {
          return html;
        },
        createScriptURL: function createScriptURL(scriptUrl) {
          return scriptUrl;
        }
      });
    } catch (_) {
      // Policy creation failed (most likely another DOMPurify script has
      // already run). Skip creating the policy, as this will only cause errors
      // if TT are enforced.
      console.warn('TrustedTypes policy ' + policyName + ' could not be created.');
      return null;
    }
  };

  function createDOMPurify() {
    var window = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : getGlobal();

    var DOMPurify = function DOMPurify(root) {
      return createDOMPurify(root);
    };
    /**
     * Version label, exposed for easier checks
     * if DOMPurify is up to date or not
     */


    DOMPurify.version = '2.4.0';
    /**
     * Array of elements that DOMPurify removed during sanitation.
     * Empty if nothing was removed.
     */

    DOMPurify.removed = [];

    if (!window || !window.document || window.document.nodeType !== 9) {
      // Not running in a browser, provide a factory function
      // so that you can pass your own Window
      DOMPurify.isSupported = false;
      return DOMPurify;
    }

    var originalDocument = window.document;
    var document = window.document;
    var DocumentFragment = window.DocumentFragment,
        HTMLTemplateElement = window.HTMLTemplateElement,
        Node = window.Node,
        Element = window.Element,
        NodeFilter = window.NodeFilter,
        _window$NamedNodeMap = window.NamedNodeMap,
        NamedNodeMap = _window$NamedNodeMap === void 0 ? window.NamedNodeMap || window.MozNamedAttrMap : _window$NamedNodeMap,
        HTMLFormElement = window.HTMLFormElement,
        DOMParser = window.DOMParser,
        trustedTypes = window.trustedTypes;
    var ElementPrototype = Element.prototype;
    var cloneNode = lookupGetter(ElementPrototype, 'cloneNode');
    var getNextSibling = lookupGetter(ElementPrototype, 'nextSibling');
    var getChildNodes = lookupGetter(ElementPrototype, 'childNodes');
    var getParentNode = lookupGetter(ElementPrototype, 'parentNode'); // As per issue #47, the web-components registry is inherited by a
    // new document created via createHTMLDocument. As per the spec
    // (http://w3c.github.io/webcomponents/spec/custom/#creating-and-passing-registries)
    // a new empty registry is used when creating a template contents owner
    // document, so we use that as our parent document to ensure nothing
    // is inherited.

    if (typeof HTMLTemplateElement === 'function') {
      var template = document.createElement('template');

      if (template.content && template.content.ownerDocument) {
        document = template.content.ownerDocument;
      }
    }

    var trustedTypesPolicy = _createTrustedTypesPolicy(trustedTypes, originalDocument);

    var emptyHTML = trustedTypesPolicy ? trustedTypesPolicy.createHTML('') : '';
    var _document = document,
        implementation = _document.implementation,
        createNodeIterator = _document.createNodeIterator,
        createDocumentFragment = _document.createDocumentFragment,
        getElementsByTagName = _document.getElementsByTagName;
    var importNode = originalDocument.importNode;
    var documentMode = {};

    try {
      documentMode = clone(document).documentMode ? document.documentMode : {};
    } catch (_) {}

    var hooks = {};
    /**
     * Expose whether this browser supports running the full DOMPurify.
     */

    DOMPurify.isSupported = typeof getParentNode === 'function' && implementation && typeof implementation.createHTMLDocument !== 'undefined' && documentMode !== 9;
    var MUSTACHE_EXPR$1 = MUSTACHE_EXPR,
        ERB_EXPR$1 = ERB_EXPR,
        DATA_ATTR$1 = DATA_ATTR,
        ARIA_ATTR$1 = ARIA_ATTR,
        IS_SCRIPT_OR_DATA$1 = IS_SCRIPT_OR_DATA,
        ATTR_WHITESPACE$1 = ATTR_WHITESPACE;
    var IS_ALLOWED_URI$1 = IS_ALLOWED_URI;
    /**
     * We consider the elements and attributes below to be safe. Ideally
     * don't add any new ones but feel free to remove unwanted ones.
     */

    /* allowed element names */

    var ALLOWED_TAGS = null;
    var DEFAULT_ALLOWED_TAGS = addToSet({}, [].concat(_toConsumableArray(html$1), _toConsumableArray(svg$1), _toConsumableArray(svgFilters), _toConsumableArray(mathMl$1), _toConsumableArray(text)));
    /* Allowed attribute names */

    var ALLOWED_ATTR = null;
    var DEFAULT_ALLOWED_ATTR = addToSet({}, [].concat(_toConsumableArray(html), _toConsumableArray(svg), _toConsumableArray(mathMl), _toConsumableArray(xml)));
    /*
     * Configure how DOMPUrify should handle custom elements and their attributes as well as customized built-in elements.
     * @property {RegExp|Function|null} tagNameCheck one of [null, regexPattern, predicate]. Default: `null` (disallow any custom elements)
     * @property {RegExp|Function|null} attributeNameCheck one of [null, regexPattern, predicate]. Default: `null` (disallow any attributes not on the allow list)
     * @property {boolean} allowCustomizedBuiltInElements allow custom elements derived from built-ins if they pass CUSTOM_ELEMENT_HANDLING.tagNameCheck. Default: `false`.
     */

    var CUSTOM_ELEMENT_HANDLING = Object.seal(Object.create(null, {
      tagNameCheck: {
        writable: true,
        configurable: false,
        enumerable: true,
        value: null
      },
      attributeNameCheck: {
        writable: true,
        configurable: false,
        enumerable: true,
        value: null
      },
      allowCustomizedBuiltInElements: {
        writable: true,
        configurable: false,
        enumerable: true,
        value: false
      }
    }));
    /* Explicitly forbidden tags (overrides ALLOWED_TAGS/ADD_TAGS) */

    var FORBID_TAGS = null;
    /* Explicitly forbidden attributes (overrides ALLOWED_ATTR/ADD_ATTR) */

    var FORBID_ATTR = null;
    /* Decide if ARIA attributes are okay */

    var ALLOW_ARIA_ATTR = true;
    /* Decide if custom data attributes are okay */

    var ALLOW_DATA_ATTR = true;
    /* Decide if unknown protocols are okay */

    var ALLOW_UNKNOWN_PROTOCOLS = false;
    /* Output should be safe for common template engines.
     * This means, DOMPurify removes data attributes, mustaches and ERB
     */

    var SAFE_FOR_TEMPLATES = false;
    /* Decide if document with <html>... should be returned */

    var WHOLE_DOCUMENT = false;
    /* Track whether config is already set on this instance of DOMPurify. */

    var SET_CONFIG = false;
    /* Decide if all elements (e.g. style, script) must be children of
     * document.body. By default, browsers might move them to document.head */

    var FORCE_BODY = false;
    /* Decide if a DOM `HTMLBodyElement` should be returned, instead of a html
     * string (or a TrustedHTML object if Trusted Types are supported).
     * If `WHOLE_DOCUMENT` is enabled a `HTMLHtmlElement` will be returned instead
     */

    var RETURN_DOM = false;
    /* Decide if a DOM `DocumentFragment` should be returned, instead of a html
     * string  (or a TrustedHTML object if Trusted Types are supported) */

    var RETURN_DOM_FRAGMENT = false;
    /* Try to return a Trusted Type object instead of a string, return a string in
     * case Trusted Types are not supported  */

    var RETURN_TRUSTED_TYPE = false;
    /* Output should be free from DOM clobbering attacks?
     * This sanitizes markups named with colliding, clobberable built-in DOM APIs.
     */

    var SANITIZE_DOM = true;
    /* Achieve full DOM Clobbering protection by isolating the namespace of named
     * properties and JS variables, mitigating attacks that abuse the HTML/DOM spec rules.
     *
     * HTML/DOM spec rules that enable DOM Clobbering:
     *   - Named Access on Window (§7.3.3)
     *   - DOM Tree Accessors (§3.1.5)
     *   - Form Element Parent-Child Relations (§4.10.3)
     *   - Iframe srcdoc / Nested WindowProxies (§4.8.5)
     *   - HTMLCollection (§4.2.10.2)
     *
     * Namespace isolation is implemented by prefixing `id` and `name` attributes
     * with a constant string, i.e., `user-content-`
     */

    var SANITIZE_NAMED_PROPS = false;
    var SANITIZE_NAMED_PROPS_PREFIX = 'user-content-';
    /* Keep element content when removing element? */

    var KEEP_CONTENT = true;
    /* If a `Node` is passed to sanitize(), then performs sanitization in-place instead
     * of importing it into a new Document and returning a sanitized copy */

    var IN_PLACE = false;
    /* Allow usage of profiles like html, svg and mathMl */

    var USE_PROFILES = {};
    /* Tags to ignore content of when KEEP_CONTENT is true */

    var FORBID_CONTENTS = null;
    var DEFAULT_FORBID_CONTENTS = addToSet({}, ['annotation-xml', 'audio', 'colgroup', 'desc', 'foreignobject', 'head', 'iframe', 'math', 'mi', 'mn', 'mo', 'ms', 'mtext', 'noembed', 'noframes', 'noscript', 'plaintext', 'script', 'style', 'svg', 'template', 'thead', 'title', 'video', 'xmp']);
    /* Tags that are safe for data: URIs */

    var DATA_URI_TAGS = null;
    var DEFAULT_DATA_URI_TAGS = addToSet({}, ['audio', 'video', 'img', 'source', 'image', 'track']);
    /* Attributes safe for values like "javascript:" */

    var URI_SAFE_ATTRIBUTES = null;
    var DEFAULT_URI_SAFE_ATTRIBUTES = addToSet({}, ['alt', 'class', 'for', 'id', 'label', 'name', 'pattern', 'placeholder', 'role', 'summary', 'title', 'value', 'style', 'xmlns']);
    var MATHML_NAMESPACE = 'http://www.w3.org/1998/Math/MathML';
    var SVG_NAMESPACE = 'http://www.w3.org/2000/svg';
    var HTML_NAMESPACE = 'http://www.w3.org/1999/xhtml';
    /* Document namespace */

    var NAMESPACE = HTML_NAMESPACE;
    var IS_EMPTY_INPUT = false;
    /* Parsing of strict XHTML documents */

    var PARSER_MEDIA_TYPE;
    var SUPPORTED_PARSER_MEDIA_TYPES = ['application/xhtml+xml', 'text/html'];
    var DEFAULT_PARSER_MEDIA_TYPE = 'text/html';
    var transformCaseFunc;
    /* Keep a reference to config to pass to hooks */

    var CONFIG = null;
    /* Ideally, do not touch anything below this line */

    /* ______________________________________________ */

    var formElement = document.createElement('form');

    var isRegexOrFunction = function isRegexOrFunction(testValue) {
      return testValue instanceof RegExp || testValue instanceof Function;
    };
    /**
     * _parseConfig
     *
     * @param  {Object} cfg optional config literal
     */
    // eslint-disable-next-line complexity


    var _parseConfig = function _parseConfig(cfg) {
      if (CONFIG && CONFIG === cfg) {
        return;
      }
      /* Shield configuration object from tampering */


      if (!cfg || _typeof(cfg) !== 'object') {
        cfg = {};
      }
      /* Shield configuration object from prototype pollution */


      cfg = clone(cfg);
      PARSER_MEDIA_TYPE = // eslint-disable-next-line unicorn/prefer-includes
      SUPPORTED_PARSER_MEDIA_TYPES.indexOf(cfg.PARSER_MEDIA_TYPE) === -1 ? PARSER_MEDIA_TYPE = DEFAULT_PARSER_MEDIA_TYPE : PARSER_MEDIA_TYPE = cfg.PARSER_MEDIA_TYPE; // HTML tags and attributes are not case-sensitive, converting to lowercase. Keeping XHTML as is.

      transformCaseFunc = PARSER_MEDIA_TYPE === 'application/xhtml+xml' ? function (x) {
        return x;
      } : stringToLowerCase;
      /* Set configuration parameters */

      ALLOWED_TAGS = 'ALLOWED_TAGS' in cfg ? addToSet({}, cfg.ALLOWED_TAGS, transformCaseFunc) : DEFAULT_ALLOWED_TAGS;
      ALLOWED_ATTR = 'ALLOWED_ATTR' in cfg ? addToSet({}, cfg.ALLOWED_ATTR, transformCaseFunc) : DEFAULT_ALLOWED_ATTR;
      URI_SAFE_ATTRIBUTES = 'ADD_URI_SAFE_ATTR' in cfg ? addToSet(clone(DEFAULT_URI_SAFE_ATTRIBUTES), // eslint-disable-line indent
      cfg.ADD_URI_SAFE_ATTR, // eslint-disable-line indent
      transformCaseFunc // eslint-disable-line indent
      ) // eslint-disable-line indent
      : DEFAULT_URI_SAFE_ATTRIBUTES;
      DATA_URI_TAGS = 'ADD_DATA_URI_TAGS' in cfg ? addToSet(clone(DEFAULT_DATA_URI_TAGS), // eslint-disable-line indent
      cfg.ADD_DATA_URI_TAGS, // eslint-disable-line indent
      transformCaseFunc // eslint-disable-line indent
      ) // eslint-disable-line indent
      : DEFAULT_DATA_URI_TAGS;
      FORBID_CONTENTS = 'FORBID_CONTENTS' in cfg ? addToSet({}, cfg.FORBID_CONTENTS, transformCaseFunc) : DEFAULT_FORBID_CONTENTS;
      FORBID_TAGS = 'FORBID_TAGS' in cfg ? addToSet({}, cfg.FORBID_TAGS, transformCaseFunc) : {};
      FORBID_ATTR = 'FORBID_ATTR' in cfg ? addToSet({}, cfg.FORBID_ATTR, transformCaseFunc) : {};
      USE_PROFILES = 'USE_PROFILES' in cfg ? cfg.USE_PROFILES : false;
      ALLOW_ARIA_ATTR = cfg.ALLOW_ARIA_ATTR !== false; // Default true

      ALLOW_DATA_ATTR = cfg.ALLOW_DATA_ATTR !== false; // Default true

      ALLOW_UNKNOWN_PROTOCOLS = cfg.ALLOW_UNKNOWN_PROTOCOLS || false; // Default false

      SAFE_FOR_TEMPLATES = cfg.SAFE_FOR_TEMPLATES || false; // Default false

      WHOLE_DOCUMENT = cfg.WHOLE_DOCUMENT || false; // Default false

      RETURN_DOM = cfg.RETURN_DOM || false; // Default false

      RETURN_DOM_FRAGMENT = cfg.RETURN_DOM_FRAGMENT || false; // Default false

      RETURN_TRUSTED_TYPE = cfg.RETURN_TRUSTED_TYPE || false; // Default false

      FORCE_BODY = cfg.FORCE_BODY || false; // Default false

      SANITIZE_DOM = cfg.SANITIZE_DOM !== false; // Default true

      SANITIZE_NAMED_PROPS = cfg.SANITIZE_NAMED_PROPS || false; // Default false

      KEEP_CONTENT = cfg.KEEP_CONTENT !== false; // Default true

      IN_PLACE = cfg.IN_PLACE || false; // Default false

      IS_ALLOWED_URI$1 = cfg.ALLOWED_URI_REGEXP || IS_ALLOWED_URI$1;
      NAMESPACE = cfg.NAMESPACE || HTML_NAMESPACE;

      if (cfg.CUSTOM_ELEMENT_HANDLING && isRegexOrFunction(cfg.CUSTOM_ELEMENT_HANDLING.tagNameCheck)) {
        CUSTOM_ELEMENT_HANDLING.tagNameCheck = cfg.CUSTOM_ELEMENT_HANDLING.tagNameCheck;
      }

      if (cfg.CUSTOM_ELEMENT_HANDLING && isRegexOrFunction(cfg.CUSTOM_ELEMENT_HANDLING.attributeNameCheck)) {
        CUSTOM_ELEMENT_HANDLING.attributeNameCheck = cfg.CUSTOM_ELEMENT_HANDLING.attributeNameCheck;
      }

      if (cfg.CUSTOM_ELEMENT_HANDLING && typeof cfg.CUSTOM_ELEMENT_HANDLING.allowCustomizedBuiltInElements === 'boolean') {
        CUSTOM_ELEMENT_HANDLING.allowCustomizedBuiltInElements = cfg.CUSTOM_ELEMENT_HANDLING.allowCustomizedBuiltInElements;
      }

      if (SAFE_FOR_TEMPLATES) {
        ALLOW_DATA_ATTR = false;
      }

      if (RETURN_DOM_FRAGMENT) {
        RETURN_DOM = true;
      }
      /* Parse profile info */


      if (USE_PROFILES) {
        ALLOWED_TAGS = addToSet({}, _toConsumableArray(text));
        ALLOWED_ATTR = [];

        if (USE_PROFILES.html === true) {
          addToSet(ALLOWED_TAGS, html$1);
          addToSet(ALLOWED_ATTR, html);
        }

        if (USE_PROFILES.svg === true) {
          addToSet(ALLOWED_TAGS, svg$1);
          addToSet(ALLOWED_ATTR, svg);
          addToSet(ALLOWED_ATTR, xml);
        }

        if (USE_PROFILES.svgFilters === true) {
          addToSet(ALLOWED_TAGS, svgFilters);
          addToSet(ALLOWED_ATTR, svg);
          addToSet(ALLOWED_ATTR, xml);
        }

        if (USE_PROFILES.mathMl === true) {
          addToSet(ALLOWED_TAGS, mathMl$1);
          addToSet(ALLOWED_ATTR, mathMl);
          addToSet(ALLOWED_ATTR, xml);
        }
      }
      /* Merge configuration parameters */


      if (cfg.ADD_TAGS) {
        if (ALLOWED_TAGS === DEFAULT_ALLOWED_TAGS) {
          ALLOWED_TAGS = clone(ALLOWED_TAGS);
        }

        addToSet(ALLOWED_TAGS, cfg.ADD_TAGS, transformCaseFunc);
      }

      if (cfg.ADD_ATTR) {
        if (ALLOWED_ATTR === DEFAULT_ALLOWED_ATTR) {
          ALLOWED_ATTR = clone(ALLOWED_ATTR);
        }

        addToSet(ALLOWED_ATTR, cfg.ADD_ATTR, transformCaseFunc);
      }

      if (cfg.ADD_URI_SAFE_ATTR) {
        addToSet(URI_SAFE_ATTRIBUTES, cfg.ADD_URI_SAFE_ATTR, transformCaseFunc);
      }

      if (cfg.FORBID_CONTENTS) {
        if (FORBID_CONTENTS === DEFAULT_FORBID_CONTENTS) {
          FORBID_CONTENTS = clone(FORBID_CONTENTS);
        }

        addToSet(FORBID_CONTENTS, cfg.FORBID_CONTENTS, transformCaseFunc);
      }
      /* Add #text in case KEEP_CONTENT is set to true */


      if (KEEP_CONTENT) {
        ALLOWED_TAGS['#text'] = true;
      }
      /* Add html, head and body to ALLOWED_TAGS in case WHOLE_DOCUMENT is true */


      if (WHOLE_DOCUMENT) {
        addToSet(ALLOWED_TAGS, ['html', 'head', 'body']);
      }
      /* Add tbody to ALLOWED_TAGS in case tables are permitted, see #286, #365 */


      if (ALLOWED_TAGS.table) {
        addToSet(ALLOWED_TAGS, ['tbody']);
        delete FORBID_TAGS.tbody;
      } // Prevent further manipulation of configuration.
      // Not available in IE8, Safari 5, etc.


      if (freeze) {
        freeze(cfg);
      }

      CONFIG = cfg;
    };

    var MATHML_TEXT_INTEGRATION_POINTS = addToSet({}, ['mi', 'mo', 'mn', 'ms', 'mtext']);
    var HTML_INTEGRATION_POINTS = addToSet({}, ['foreignobject', 'desc', 'title', 'annotation-xml']); // Certain elements are allowed in both SVG and HTML
    // namespace. We need to specify them explicitly
    // so that they don't get erroneously deleted from
    // HTML namespace.

    var COMMON_SVG_AND_HTML_ELEMENTS = addToSet({}, ['title', 'style', 'font', 'a', 'script']);
    /* Keep track of all possible SVG and MathML tags
     * so that we can perform the namespace checks
     * correctly. */

    var ALL_SVG_TAGS = addToSet({}, svg$1);
    addToSet(ALL_SVG_TAGS, svgFilters);
    addToSet(ALL_SVG_TAGS, svgDisallowed);
    var ALL_MATHML_TAGS = addToSet({}, mathMl$1);
    addToSet(ALL_MATHML_TAGS, mathMlDisallowed);
    /**
     *
     *
     * @param  {Element} element a DOM element whose namespace is being checked
     * @returns {boolean} Return false if the element has a
     *  namespace that a spec-compliant parser would never
     *  return. Return true otherwise.
     */

    var _checkValidNamespace = function _checkValidNamespace(element) {
      var parent = getParentNode(element); // In JSDOM, if we're inside shadow DOM, then parentNode
      // can be null. We just simulate parent in this case.

      if (!parent || !parent.tagName) {
        parent = {
          namespaceURI: HTML_NAMESPACE,
          tagName: 'template'
        };
      }

      var tagName = stringToLowerCase(element.tagName);
      var parentTagName = stringToLowerCase(parent.tagName);

      if (element.namespaceURI === SVG_NAMESPACE) {
        // The only way to switch from HTML namespace to SVG
        // is via <svg>. If it happens via any other tag, then
        // it should be killed.
        if (parent.namespaceURI === HTML_NAMESPACE) {
          return tagName === 'svg';
        } // The only way to switch from MathML to SVG is via
        // svg if parent is either <annotation-xml> or MathML
        // text integration points.


        if (parent.namespaceURI === MATHML_NAMESPACE) {
          return tagName === 'svg' && (parentTagName === 'annotation-xml' || MATHML_TEXT_INTEGRATION_POINTS[parentTagName]);
        } // We only allow elements that are defined in SVG
        // spec. All others are disallowed in SVG namespace.


        return Boolean(ALL_SVG_TAGS[tagName]);
      }

      if (element.namespaceURI === MATHML_NAMESPACE) {
        // The only way to switch from HTML namespace to MathML
        // is via <math>. If it happens via any other tag, then
        // it should be killed.
        if (parent.namespaceURI === HTML_NAMESPACE) {
          return tagName === 'math';
        } // The only way to switch from SVG to MathML is via
        // <math> and HTML integration points


        if (parent.namespaceURI === SVG_NAMESPACE) {
          return tagName === 'math' && HTML_INTEGRATION_POINTS[parentTagName];
        } // We only allow elements that are defined in MathML
        // spec. All others are disallowed in MathML namespace.


        return Boolean(ALL_MATHML_TAGS[tagName]);
      }

      if (element.namespaceURI === HTML_NAMESPACE) {
        // The only way to switch from SVG to HTML is via
        // HTML integration points, and from MathML to HTML
        // is via MathML text integration points
        if (parent.namespaceURI === SVG_NAMESPACE && !HTML_INTEGRATION_POINTS[parentTagName]) {
          return false;
        }

        if (parent.namespaceURI === MATHML_NAMESPACE && !MATHML_TEXT_INTEGRATION_POINTS[parentTagName]) {
          return false;
        } // We disallow tags that are specific for MathML
        // or SVG and should never appear in HTML namespace


        return !ALL_MATHML_TAGS[tagName] && (COMMON_SVG_AND_HTML_ELEMENTS[tagName] || !ALL_SVG_TAGS[tagName]);
      } // The code should never reach this place (this means
      // that the element somehow got namespace that is not
      // HTML, SVG or MathML). Return false just in case.


      return false;
    };
    /**
     * _forceRemove
     *
     * @param  {Node} node a DOM node
     */


    var _forceRemove = function _forceRemove(node) {
      arrayPush(DOMPurify.removed, {
        element: node
      });

      try {
        // eslint-disable-next-line unicorn/prefer-dom-node-remove
        node.parentNode.removeChild(node);
      } catch (_) {
        try {
          node.outerHTML = emptyHTML;
        } catch (_) {
          node.remove();
        }
      }
    };
    /**
     * _removeAttribute
     *
     * @param  {String} name an Attribute name
     * @param  {Node} node a DOM node
     */


    var _removeAttribute = function _removeAttribute(name, node) {
      try {
        arrayPush(DOMPurify.removed, {
          attribute: node.getAttributeNode(name),
          from: node
        });
      } catch (_) {
        arrayPush(DOMPurify.removed, {
          attribute: null,
          from: node
        });
      }

      node.removeAttribute(name); // We void attribute values for unremovable "is"" attributes

      if (name === 'is' && !ALLOWED_ATTR[name]) {
        if (RETURN_DOM || RETURN_DOM_FRAGMENT) {
          try {
            _forceRemove(node);
          } catch (_) {}
        } else {
          try {
            node.setAttribute(name, '');
          } catch (_) {}
        }
      }
    };
    /**
     * _initDocument
     *
     * @param  {String} dirty a string of dirty markup
     * @return {Document} a DOM, filled with the dirty markup
     */


    var _initDocument = function _initDocument(dirty) {
      /* Create a HTML document */
      var doc;
      var leadingWhitespace;

      if (FORCE_BODY) {
        dirty = '<remove></remove>' + dirty;
      } else {
        /* If FORCE_BODY isn't used, leading whitespace needs to be preserved manually */
        var matches = stringMatch(dirty, /^[\r\n\t ]+/);
        leadingWhitespace = matches && matches[0];
      }

      if (PARSER_MEDIA_TYPE === 'application/xhtml+xml') {
        // Root of XHTML doc must contain xmlns declaration (see https://www.w3.org/TR/xhtml1/normative.html#strict)
        dirty = '<html xmlns="http://www.w3.org/1999/xhtml"><head></head><body>' + dirty + '</body></html>';
      }

      var dirtyPayload = trustedTypesPolicy ? trustedTypesPolicy.createHTML(dirty) : dirty;
      /*
       * Use the DOMParser API by default, fallback later if needs be
       * DOMParser not work for svg when has multiple root element.
       */

      if (NAMESPACE === HTML_NAMESPACE) {
        try {
          doc = new DOMParser().parseFromString(dirtyPayload, PARSER_MEDIA_TYPE);
        } catch (_) {}
      }
      /* Use createHTMLDocument in case DOMParser is not available */


      if (!doc || !doc.documentElement) {
        doc = implementation.createDocument(NAMESPACE, 'template', null);

        try {
          doc.documentElement.innerHTML = IS_EMPTY_INPUT ? '' : dirtyPayload;
        } catch (_) {// Syntax error if dirtyPayload is invalid xml
        }
      }

      var body = doc.body || doc.documentElement;

      if (dirty && leadingWhitespace) {
        body.insertBefore(document.createTextNode(leadingWhitespace), body.childNodes[0] || null);
      }
      /* Work on whole document or just its body */


      if (NAMESPACE === HTML_NAMESPACE) {
        return getElementsByTagName.call(doc, WHOLE_DOCUMENT ? 'html' : 'body')[0];
      }

      return WHOLE_DOCUMENT ? doc.documentElement : body;
    };
    /**
     * _createIterator
     *
     * @param  {Document} root document/fragment to create iterator for
     * @return {Iterator} iterator instance
     */


    var _createIterator = function _createIterator(root) {
      return createNodeIterator.call(root.ownerDocument || root, root, // eslint-disable-next-line no-bitwise
      NodeFilter.SHOW_ELEMENT | NodeFilter.SHOW_COMMENT | NodeFilter.SHOW_TEXT, null, false);
    };
    /**
     * _isClobbered
     *
     * @param  {Node} elm element to check for clobbering attacks
     * @return {Boolean} true if clobbered, false if safe
     */


    var _isClobbered = function _isClobbered(elm) {
      return elm instanceof HTMLFormElement && (typeof elm.nodeName !== 'string' || typeof elm.textContent !== 'string' || typeof elm.removeChild !== 'function' || !(elm.attributes instanceof NamedNodeMap) || typeof elm.removeAttribute !== 'function' || typeof elm.setAttribute !== 'function' || typeof elm.namespaceURI !== 'string' || typeof elm.insertBefore !== 'function');
    };
    /**
     * _isNode
     *
     * @param  {Node} obj object to check whether it's a DOM node
     * @return {Boolean} true is object is a DOM node
     */


    var _isNode = function _isNode(object) {
      return _typeof(Node) === 'object' ? object instanceof Node : object && _typeof(object) === 'object' && typeof object.nodeType === 'number' && typeof object.nodeName === 'string';
    };
    /**
     * _executeHook
     * Execute user configurable hooks
     *
     * @param  {String} entryPoint  Name of the hook's entry point
     * @param  {Node} currentNode node to work on with the hook
     * @param  {Object} data additional hook parameters
     */


    var _executeHook = function _executeHook(entryPoint, currentNode, data) {
      if (!hooks[entryPoint]) {
        return;
      }

      arrayForEach(hooks[entryPoint], function (hook) {
        hook.call(DOMPurify, currentNode, data, CONFIG);
      });
    };
    /**
     * _sanitizeElements
     *
     * @protect nodeName
     * @protect textContent
     * @protect removeChild
     *
     * @param   {Node} currentNode to check for permission to exist
     * @return  {Boolean} true if node was killed, false if left alive
     */


    var _sanitizeElements = function _sanitizeElements(currentNode) {
      var content;
      /* Execute a hook if present */

      _executeHook('beforeSanitizeElements', currentNode, null);
      /* Check if element is clobbered or can clobber */


      if (_isClobbered(currentNode)) {
        _forceRemove(currentNode);

        return true;
      }
      /* Check if tagname contains Unicode */


      if (regExpTest(/[\u0080-\uFFFF]/, currentNode.nodeName)) {
        _forceRemove(currentNode);

        return true;
      }
      /* Now let's check the element's type and name */


      var tagName = transformCaseFunc(currentNode.nodeName);
      /* Execute a hook if present */

      _executeHook('uponSanitizeElement', currentNode, {
        tagName: tagName,
        allowedTags: ALLOWED_TAGS
      });
      /* Detect mXSS attempts abusing namespace confusion */


      if (currentNode.hasChildNodes() && !_isNode(currentNode.firstElementChild) && (!_isNode(currentNode.content) || !_isNode(currentNode.content.firstElementChild)) && regExpTest(/<[/\w]/g, currentNode.innerHTML) && regExpTest(/<[/\w]/g, currentNode.textContent)) {
        _forceRemove(currentNode);

        return true;
      }
      /* Mitigate a problem with templates inside select */


      if (tagName === 'select' && regExpTest(/<template/i, currentNode.innerHTML)) {
        _forceRemove(currentNode);

        return true;
      }
      /* Remove element if anything forbids its presence */


      if (!ALLOWED_TAGS[tagName] || FORBID_TAGS[tagName]) {
        /* Check if we have a custom element to handle */
        if (!FORBID_TAGS[tagName] && _basicCustomElementTest(tagName)) {
          if (CUSTOM_ELEMENT_HANDLING.tagNameCheck instanceof RegExp && regExpTest(CUSTOM_ELEMENT_HANDLING.tagNameCheck, tagName)) return false;
          if (CUSTOM_ELEMENT_HANDLING.tagNameCheck instanceof Function && CUSTOM_ELEMENT_HANDLING.tagNameCheck(tagName)) return false;
        }
        /* Keep content except for bad-listed elements */


        if (KEEP_CONTENT && !FORBID_CONTENTS[tagName]) {
          var parentNode = getParentNode(currentNode) || currentNode.parentNode;
          var childNodes = getChildNodes(currentNode) || currentNode.childNodes;

          if (childNodes && parentNode) {
            var childCount = childNodes.length;

            for (var i = childCount - 1; i >= 0; --i) {
              parentNode.insertBefore(cloneNode(childNodes[i], true), getNextSibling(currentNode));
            }
          }
        }

        _forceRemove(currentNode);

        return true;
      }
      /* Check whether element has a valid namespace */


      if (currentNode instanceof Element && !_checkValidNamespace(currentNode)) {
        _forceRemove(currentNode);

        return true;
      }

      if ((tagName === 'noscript' || tagName === 'noembed') && regExpTest(/<\/no(script|embed)/i, currentNode.innerHTML)) {
        _forceRemove(currentNode);

        return true;
      }
      /* Sanitize element content to be template-safe */


      if (SAFE_FOR_TEMPLATES && currentNode.nodeType === 3) {
        /* Get the element's text content */
        content = currentNode.textContent;
        content = stringReplace(content, MUSTACHE_EXPR$1, ' ');
        content = stringReplace(content, ERB_EXPR$1, ' ');

        if (currentNode.textContent !== content) {
          arrayPush(DOMPurify.removed, {
            element: currentNode.cloneNode()
          });
          currentNode.textContent = content;
        }
      }
      /* Execute a hook if present */


      _executeHook('afterSanitizeElements', currentNode, null);

      return false;
    };
    /**
     * _isValidAttribute
     *
     * @param  {string} lcTag Lowercase tag name of containing element.
     * @param  {string} lcName Lowercase attribute name.
     * @param  {string} value Attribute value.
     * @return {Boolean} Returns true if `value` is valid, otherwise false.
     */
    // eslint-disable-next-line complexity


    var _isValidAttribute = function _isValidAttribute(lcTag, lcName, value) {
      /* Make sure attribute cannot clobber */
      if (SANITIZE_DOM && (lcName === 'id' || lcName === 'name') && (value in document || value in formElement)) {
        return false;
      }
      /* Allow valid data-* attributes: At least one character after "-"
          (https://html.spec.whatwg.org/multipage/dom.html#embedding-custom-non-visible-data-with-the-data-*-attributes)
          XML-compatible (https://html.spec.whatwg.org/multipage/infrastructure.html#xml-compatible and http://www.w3.org/TR/xml/#d0e804)
          We don't need to check the value; it's always URI safe. */


      if (ALLOW_DATA_ATTR && !FORBID_ATTR[lcName] && regExpTest(DATA_ATTR$1, lcName)) ;else if (ALLOW_ARIA_ATTR && regExpTest(ARIA_ATTR$1, lcName)) ;else if (!ALLOWED_ATTR[lcName] || FORBID_ATTR[lcName]) {
        if ( // First condition does a very basic check if a) it's basically a valid custom element tagname AND
        // b) if the tagName passes whatever the user has configured for CUSTOM_ELEMENT_HANDLING.tagNameCheck
        // and c) if the attribute name passes whatever the user has configured for CUSTOM_ELEMENT_HANDLING.attributeNameCheck
        _basicCustomElementTest(lcTag) && (CUSTOM_ELEMENT_HANDLING.tagNameCheck instanceof RegExp && regExpTest(CUSTOM_ELEMENT_HANDLING.tagNameCheck, lcTag) || CUSTOM_ELEMENT_HANDLING.tagNameCheck instanceof Function && CUSTOM_ELEMENT_HANDLING.tagNameCheck(lcTag)) && (CUSTOM_ELEMENT_HANDLING.attributeNameCheck instanceof RegExp && regExpTest(CUSTOM_ELEMENT_HANDLING.attributeNameCheck, lcName) || CUSTOM_ELEMENT_HANDLING.attributeNameCheck instanceof Function && CUSTOM_ELEMENT_HANDLING.attributeNameCheck(lcName)) || // Alternative, second condition checks if it's an `is`-attribute, AND
        // the value passes whatever the user has configured for CUSTOM_ELEMENT_HANDLING.tagNameCheck
        lcName === 'is' && CUSTOM_ELEMENT_HANDLING.allowCustomizedBuiltInElements && (CUSTOM_ELEMENT_HANDLING.tagNameCheck instanceof RegExp && regExpTest(CUSTOM_ELEMENT_HANDLING.tagNameCheck, value) || CUSTOM_ELEMENT_HANDLING.tagNameCheck instanceof Function && CUSTOM_ELEMENT_HANDLING.tagNameCheck(value))) ;else {
          return false;
        }
        /* Check value is safe. First, is attr inert? If so, is safe */
      } else if (URI_SAFE_ATTRIBUTES[lcName]) ;else if (regExpTest(IS_ALLOWED_URI$1, stringReplace(value, ATTR_WHITESPACE$1, ''))) ;else if ((lcName === 'src' || lcName === 'xlink:href' || lcName === 'href') && lcTag !== 'script' && stringIndexOf(value, 'data:') === 0 && DATA_URI_TAGS[lcTag]) ;else if (ALLOW_UNKNOWN_PROTOCOLS && !regExpTest(IS_SCRIPT_OR_DATA$1, stringReplace(value, ATTR_WHITESPACE$1, ''))) ;else if (!value) ;else {
        return false;
      }
      return true;
    };
    /**
     * _basicCustomElementCheck
     * checks if at least one dash is included in tagName, and it's not the first char
     * for more sophisticated checking see https://github.com/sindresorhus/validate-element-name
     * @param {string} tagName name of the tag of the node to sanitize
     */


    var _basicCustomElementTest = function _basicCustomElementTest(tagName) {
      return tagName.indexOf('-') > 0;
    };
    /**
     * _sanitizeAttributes
     *
     * @protect attributes
     * @protect nodeName
     * @protect removeAttribute
     * @protect setAttribute
     *
     * @param  {Node} currentNode to sanitize
     */


    var _sanitizeAttributes = function _sanitizeAttributes(currentNode) {
      var attr;
      var value;
      var lcName;
      var l;
      /* Execute a hook if present */

      _executeHook('beforeSanitizeAttributes', currentNode, null);

      var attributes = currentNode.attributes;
      /* Check if we have attributes; if not we might have a text node */

      if (!attributes) {
        return;
      }

      var hookEvent = {
        attrName: '',
        attrValue: '',
        keepAttr: true,
        allowedAttributes: ALLOWED_ATTR
      };
      l = attributes.length;
      /* Go backwards over all attributes; safely remove bad ones */

      while (l--) {
        attr = attributes[l];
        var _attr = attr,
            name = _attr.name,
            namespaceURI = _attr.namespaceURI;
        value = name === 'value' ? attr.value : stringTrim(attr.value);
        lcName = transformCaseFunc(name);
        /* Execute a hook if present */

        hookEvent.attrName = lcName;
        hookEvent.attrValue = value;
        hookEvent.keepAttr = true;
        hookEvent.forceKeepAttr = undefined; // Allows developers to see this is a property they can set

        _executeHook('uponSanitizeAttribute', currentNode, hookEvent);

        value = hookEvent.attrValue;
        /* Did the hooks approve of the attribute? */

        if (hookEvent.forceKeepAttr) {
          continue;
        }
        /* Remove attribute */


        _removeAttribute(name, currentNode);
        /* Did the hooks approve of the attribute? */


        if (!hookEvent.keepAttr) {
          continue;
        }
        /* Work around a security issue in jQuery 3.0 */


        if (regExpTest(/\/>/i, value)) {
          _removeAttribute(name, currentNode);

          continue;
        }
        /* Sanitize attribute content to be template-safe */


        if (SAFE_FOR_TEMPLATES) {
          value = stringReplace(value, MUSTACHE_EXPR$1, ' ');
          value = stringReplace(value, ERB_EXPR$1, ' ');
        }
        /* Is `value` valid for this attribute? */


        var lcTag = transformCaseFunc(currentNode.nodeName);

        if (!_isValidAttribute(lcTag, lcName, value)) {
          continue;
        }
        /* Full DOM Clobbering protection via namespace isolation,
         * Prefix id and name attributes with `user-content-`
         */


        if (SANITIZE_NAMED_PROPS && (lcName === 'id' || lcName === 'name')) {
          // Remove the attribute with this value
          _removeAttribute(name, currentNode); // Prefix the value and later re-create the attribute with the sanitized value


          value = SANITIZE_NAMED_PROPS_PREFIX + value;
        }
        /* Handle attributes that require Trusted Types */


        if (trustedTypesPolicy && _typeof(trustedTypes) === 'object' && typeof trustedTypes.getAttributeType === 'function') {
          if (namespaceURI) ;else {
            switch (trustedTypes.getAttributeType(lcTag, lcName)) {
              case 'TrustedHTML':
                value = trustedTypesPolicy.createHTML(value);
                break;

              case 'TrustedScriptURL':
                value = trustedTypesPolicy.createScriptURL(value);
                break;
            }
          }
        }
        /* Handle invalid data-* attribute set by try-catching it */


        try {
          if (namespaceURI) {
            currentNode.setAttributeNS(namespaceURI, name, value);
          } else {
            /* Fallback to setAttribute() for browser-unrecognized namespaces e.g. "x-schema". */
            currentNode.setAttribute(name, value);
          }

          arrayPop(DOMPurify.removed);
        } catch (_) {}
      }
      /* Execute a hook if present */


      _executeHook('afterSanitizeAttributes', currentNode, null);
    };
    /**
     * _sanitizeShadowDOM
     *
     * @param  {DocumentFragment} fragment to iterate over recursively
     */


    var _sanitizeShadowDOM = function _sanitizeShadowDOM(fragment) {
      var shadowNode;

      var shadowIterator = _createIterator(fragment);
      /* Execute a hook if present */


      _executeHook('beforeSanitizeShadowDOM', fragment, null);

      while (shadowNode = shadowIterator.nextNode()) {
        /* Execute a hook if present */
        _executeHook('uponSanitizeShadowNode', shadowNode, null);
        /* Sanitize tags and elements */


        if (_sanitizeElements(shadowNode)) {
          continue;
        }
        /* Deep shadow DOM detected */


        if (shadowNode.content instanceof DocumentFragment) {
          _sanitizeShadowDOM(shadowNode.content);
        }
        /* Check attributes, sanitize if necessary */


        _sanitizeAttributes(shadowNode);
      }
      /* Execute a hook if present */


      _executeHook('afterSanitizeShadowDOM', fragment, null);
    };
    /**
     * Sanitize
     * Public method providing core sanitation functionality
     *
     * @param {String|Node} dirty string or DOM node
     * @param {Object} configuration object
     */
    // eslint-disable-next-line complexity


    DOMPurify.sanitize = function (dirty) {
      var cfg = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {};
      var body;
      var importedNode;
      var currentNode;
      var oldNode;
      var returnNode;
      /* Make sure we have a string to sanitize.
        DO NOT return early, as this will return the wrong type if
        the user has requested a DOM object rather than a string */

      IS_EMPTY_INPUT = !dirty;

      if (IS_EMPTY_INPUT) {
        dirty = '<!-->';
      }
      /* Stringify, in case dirty is an object */


      if (typeof dirty !== 'string' && !_isNode(dirty)) {
        // eslint-disable-next-line no-negated-condition
        if (typeof dirty.toString !== 'function') {
          throw typeErrorCreate('toString is not a function');
        } else {
          dirty = dirty.toString();

          if (typeof dirty !== 'string') {
            throw typeErrorCreate('dirty is not a string, aborting');
          }
        }
      }
      /* Check we can run. Otherwise fall back or ignore */


      if (!DOMPurify.isSupported) {
        if (_typeof(window.toStaticHTML) === 'object' || typeof window.toStaticHTML === 'function') {
          if (typeof dirty === 'string') {
            return window.toStaticHTML(dirty);
          }

          if (_isNode(dirty)) {
            return window.toStaticHTML(dirty.outerHTML);
          }
        }

        return dirty;
      }
      /* Assign config vars */


      if (!SET_CONFIG) {
        _parseConfig(cfg);
      }
      /* Clean up removed elements */


      DOMPurify.removed = [];
      /* Check if dirty is correctly typed for IN_PLACE */

      if (typeof dirty === 'string') {
        IN_PLACE = false;
      }

      if (IN_PLACE) {
        /* Do some early pre-sanitization to avoid unsafe root nodes */
        if (dirty.nodeName) {
          var tagName = transformCaseFunc(dirty.nodeName);

          if (!ALLOWED_TAGS[tagName] || FORBID_TAGS[tagName]) {
            throw typeErrorCreate('root node is forbidden and cannot be sanitized in-place');
          }
        }
      } else if (dirty instanceof Node) {
        /* If dirty is a DOM element, append to an empty document to avoid
           elements being stripped by the parser */
        body = _initDocument('<!---->');
        importedNode = body.ownerDocument.importNode(dirty, true);

        if (importedNode.nodeType === 1 && importedNode.nodeName === 'BODY') {
          /* Node is already a body, use as is */
          body = importedNode;
        } else if (importedNode.nodeName === 'HTML') {
          body = importedNode;
        } else {
          // eslint-disable-next-line unicorn/prefer-dom-node-append
          body.appendChild(importedNode);
        }
      } else {
        /* Exit directly if we have nothing to do */
        if (!RETURN_DOM && !SAFE_FOR_TEMPLATES && !WHOLE_DOCUMENT && // eslint-disable-next-line unicorn/prefer-includes
        dirty.indexOf('<') === -1) {
          return trustedTypesPolicy && RETURN_TRUSTED_TYPE ? trustedTypesPolicy.createHTML(dirty) : dirty;
        }
        /* Initialize the document to work on */


        body = _initDocument(dirty);
        /* Check we have a DOM node from the data */

        if (!body) {
          return RETURN_DOM ? null : RETURN_TRUSTED_TYPE ? emptyHTML : '';
        }
      }
      /* Remove first element node (ours) if FORCE_BODY is set */


      if (body && FORCE_BODY) {
        _forceRemove(body.firstChild);
      }
      /* Get node iterator */


      var nodeIterator = _createIterator(IN_PLACE ? dirty : body);
      /* Now start iterating over the created document */


      while (currentNode = nodeIterator.nextNode()) {
        /* Fix IE's strange behavior with manipulated textNodes #89 */
        if (currentNode.nodeType === 3 && currentNode === oldNode) {
          continue;
        }
        /* Sanitize tags and elements */


        if (_sanitizeElements(currentNode)) {
          continue;
        }
        /* Shadow DOM detected, sanitize it */


        if (currentNode.content instanceof DocumentFragment) {
          _sanitizeShadowDOM(currentNode.content);
        }
        /* Check attributes, sanitize if necessary */


        _sanitizeAttributes(currentNode);

        oldNode = currentNode;
      }

      oldNode = null;
      /* If we sanitized `dirty` in-place, return it. */

      if (IN_PLACE) {
        return dirty;
      }
      /* Return sanitized string or DOM */


      if (RETURN_DOM) {
        if (RETURN_DOM_FRAGMENT) {
          returnNode = createDocumentFragment.call(body.ownerDocument);

          while (body.firstChild) {
            // eslint-disable-next-line unicorn/prefer-dom-node-append
            returnNode.appendChild(body.firstChild);
          }
        } else {
          returnNode = body;
        }

        if (ALLOWED_ATTR.shadowroot) {
          /*
            AdoptNode() is not used because internal state is not reset
            (e.g. the past names map of a HTMLFormElement), this is safe
            in theory but we would rather not risk another attack vector.
            The state that is cloned by importNode() is explicitly defined
            by the specs.
          */
          returnNode = importNode.call(originalDocument, returnNode, true);
        }

        return returnNode;
      }

      var serializedHTML = WHOLE_DOCUMENT ? body.outerHTML : body.innerHTML;
      /* Serialize doctype if allowed */

      if (WHOLE_DOCUMENT && ALLOWED_TAGS['!doctype'] && body.ownerDocument && body.ownerDocument.doctype && body.ownerDocument.doctype.name && regExpTest(DOCTYPE_NAME, body.ownerDocument.doctype.name)) {
        serializedHTML = '<!DOCTYPE ' + body.ownerDocument.doctype.name + '>\n' + serializedHTML;
      }
      /* Sanitize final string template-safe */


      if (SAFE_FOR_TEMPLATES) {
        serializedHTML = stringReplace(serializedHTML, MUSTACHE_EXPR$1, ' ');
        serializedHTML = stringReplace(serializedHTML, ERB_EXPR$1, ' ');
      }

      return trustedTypesPolicy && RETURN_TRUSTED_TYPE ? trustedTypesPolicy.createHTML(serializedHTML) : serializedHTML;
    };
    /**
     * Public method to set the configuration once
     * setConfig
     *
     * @param {Object} cfg configuration object
     */


    DOMPurify.setConfig = function (cfg) {
      _parseConfig(cfg);

      SET_CONFIG = true;
    };
    /**
     * Public method to remove the configuration
     * clearConfig
     *
     */


    DOMPurify.clearConfig = function () {
      CONFIG = null;
      SET_CONFIG = false;
    };
    /**
     * Public method to check if an attribute value is valid.
     * Uses last set config, if any. Otherwise, uses config defaults.
     * isValidAttribute
     *
     * @param  {string} tag Tag name of containing element.
     * @param  {string} attr Attribute name.
     * @param  {string} value Attribute value.
     * @return {Boolean} Returns true if `value` is valid. Otherwise, returns false.
     */


    DOMPurify.isValidAttribute = function (tag, attr, value) {
      /* Initialize shared config vars if necessary. */
      if (!CONFIG) {
        _parseConfig({});
      }

      var lcTag = transformCaseFunc(tag);
      var lcName = transformCaseFunc(attr);
      return _isValidAttribute(lcTag, lcName, value);
    };
    /**
     * AddHook
     * Public method to add DOMPurify hooks
     *
     * @param {String} entryPoint entry point for the hook to add
     * @param {Function} hookFunction function to execute
     */


    DOMPurify.addHook = function (entryPoint, hookFunction) {
      if (typeof hookFunction !== 'function') {
        return;
      }

      hooks[entryPoint] = hooks[entryPoint] || [];
      arrayPush(hooks[entryPoint], hookFunction);
    };
    /**
     * RemoveHook
     * Public method to remove a DOMPurify hook at a given entryPoint
     * (pops it from the stack of hooks if more are present)
     *
     * @param {String} entryPoint entry point for the hook to remove
     * @return {Function} removed(popped) hook
     */


    DOMPurify.removeHook = function (entryPoint) {
      if (hooks[entryPoint]) {
        return arrayPop(hooks[entryPoint]);
      }
    };
    /**
     * RemoveHooks
     * Public method to remove all DOMPurify hooks at a given entryPoint
     *
     * @param  {String} entryPoint entry point for the hooks to remove
     */


    DOMPurify.removeHooks = function (entryPoint) {
      if (hooks[entryPoint]) {
        hooks[entryPoint] = [];
      }
    };
    /**
     * RemoveAllHooks
     * Public method to remove all DOMPurify hooks
     *
     */


    DOMPurify.removeAllHooks = function () {
      hooks = {};
    };

    return DOMPurify;
  }

  var purify = createDOMPurify();
  return purify;
});

/***/ }),

/***/ "./node_modules/global/document.js":
/*!*****************************************!*\
  !*** ./node_modules/global/document.js ***!
  \*****************************************/
/***/ (function(module, __unused_webpack_exports, __webpack_require__) {

var topLevel = typeof __webpack_require__.g !== 'undefined' ? __webpack_require__.g : typeof window !== 'undefined' ? window : {};

var minDoc = __webpack_require__(/*! min-document */ "?34aa");

var doccy;

if (typeof document !== 'undefined') {
  doccy = document;
} else {
  doccy = topLevel['__GLOBAL_DOCUMENT_CACHE@4'];

  if (!doccy) {
    doccy = topLevel['__GLOBAL_DOCUMENT_CACHE@4'] = minDoc;
  }
}

module.exports = doccy;

/***/ }),

/***/ "./node_modules/global/window.js":
/*!***************************************!*\
  !*** ./node_modules/global/window.js ***!
  \***************************************/
/***/ (function(module, __unused_webpack_exports, __webpack_require__) {

var win;

if (typeof window !== "undefined") {
  win = window;
} else if (typeof __webpack_require__.g !== "undefined") {
  win = __webpack_require__.g;
} else if (typeof self !== "undefined") {
  win = self;
} else {
  win = {};
}

module.exports = win;

/***/ }),

/***/ "./node_modules/handlebars/dist/handlebars.min.js":
/*!********************************************************!*\
  !*** ./node_modules/handlebars/dist/handlebars.min.js ***!
  \********************************************************/
/***/ (function(module, exports, __webpack_require__) {

/* module decorator */ module = __webpack_require__.nmd(module);
var __WEBPACK_AMD_DEFINE_FACTORY__, __WEBPACK_AMD_DEFINE_ARRAY__, __WEBPACK_AMD_DEFINE_RESULT__;function _typeof(obj) { "@babel/helpers - typeof"; if (typeof Symbol === "function" && typeof Symbol.iterator === "symbol") { _typeof = function _typeof(obj) { return typeof obj; }; } else { _typeof = function _typeof(obj) { return obj && typeof Symbol === "function" && obj.constructor === Symbol && obj !== Symbol.prototype ? "symbol" : typeof obj; }; } return _typeof(obj); }

/**!

 @license
 handlebars v4.7.7

Copyright (C) 2011-2019 by Yehuda Katz

Permission is hereby granted, free of charge, to any person obtaining a copy
of this software and associated documentation files (the "Software"), to deal
in the Software without restriction, including without limitation the rights
to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
copies of the Software, and to permit persons to whom the Software is
furnished to do so, subject to the following conditions:

The above copyright notice and this permission notice shall be included in
all copies or substantial portions of the Software.

THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN
THE SOFTWARE.

*/
!function (a, b) {
  "object" == ( false ? 0 : _typeof(exports)) && "object" == ( false ? 0 : _typeof(module)) ? module.exports = b() :  true ? !(__WEBPACK_AMD_DEFINE_ARRAY__ = [], __WEBPACK_AMD_DEFINE_FACTORY__ = (b),
		__WEBPACK_AMD_DEFINE_RESULT__ = (typeof __WEBPACK_AMD_DEFINE_FACTORY__ === 'function' ?
		(__WEBPACK_AMD_DEFINE_FACTORY__.apply(exports, __WEBPACK_AMD_DEFINE_ARRAY__)) : __WEBPACK_AMD_DEFINE_FACTORY__),
		__WEBPACK_AMD_DEFINE_RESULT__ !== undefined && (module.exports = __WEBPACK_AMD_DEFINE_RESULT__)) : 0;
}(this, function () {
  return function (a) {
    function b(d) {
      if (c[d]) return c[d].exports;
      var e = c[d] = {
        exports: {},
        id: d,
        loaded: !1
      };
      return a[d].call(e.exports, e, e.exports, b), e.loaded = !0, e.exports;
    }

    var c = {};
    return b.m = a, b.c = c, b.p = "", b(0);
  }([function (a, b, c) {
    "use strict";

    function d() {
      var a = r();
      return a.compile = function (b, c) {
        return k.compile(b, c, a);
      }, a.precompile = function (b, c) {
        return k.precompile(b, c, a);
      }, a.AST = i["default"], a.Compiler = k.Compiler, a.JavaScriptCompiler = m["default"], a.Parser = j.parser, a.parse = j.parse, a.parseWithoutProcessing = j.parseWithoutProcessing, a;
    }

    var e = c(1)["default"];
    b.__esModule = !0;
    var f = c(2),
        g = e(f),
        h = c(45),
        i = e(h),
        j = c(46),
        k = c(51),
        l = c(52),
        m = e(l),
        n = c(49),
        o = e(n),
        p = c(44),
        q = e(p),
        r = g["default"].create,
        s = d();
    s.create = d, q["default"](s), s.Visitor = o["default"], s["default"] = s, b["default"] = s, a.exports = b["default"];
  }, function (a, b) {
    "use strict";

    b["default"] = function (a) {
      return a && a.__esModule ? a : {
        "default": a
      };
    }, b.__esModule = !0;
  }, function (a, b, c) {
    "use strict";

    function d() {
      var a = new h.HandlebarsEnvironment();
      return n.extend(a, h), a.SafeString = j["default"], a.Exception = l["default"], a.Utils = n, a.escapeExpression = n.escapeExpression, a.VM = p, a.template = function (b) {
        return p.template(b, a);
      }, a;
    }

    var e = c(3)["default"],
        f = c(1)["default"];
    b.__esModule = !0;
    var g = c(4),
        h = e(g),
        i = c(37),
        j = f(i),
        k = c(6),
        l = f(k),
        m = c(5),
        n = e(m),
        o = c(38),
        p = e(o),
        q = c(44),
        r = f(q),
        s = d();
    s.create = d, r["default"](s), s["default"] = s, b["default"] = s, a.exports = b["default"];
  }, function (a, b) {
    "use strict";

    b["default"] = function (a) {
      if (a && a.__esModule) return a;
      var b = {};
      if (null != a) for (var c in a) {
        Object.prototype.hasOwnProperty.call(a, c) && (b[c] = a[c]);
      }
      return b["default"] = a, b;
    }, b.__esModule = !0;
  }, function (a, b, c) {
    "use strict";

    function d(a, b, c) {
      this.helpers = a || {}, this.partials = b || {}, this.decorators = c || {}, i.registerDefaultHelpers(this), j.registerDefaultDecorators(this);
    }

    var e = c(1)["default"];
    b.__esModule = !0, b.HandlebarsEnvironment = d;
    var f = c(5),
        g = c(6),
        h = e(g),
        i = c(10),
        j = c(30),
        k = c(32),
        l = e(k),
        m = c(33),
        n = "4.7.7";
    b.VERSION = n;
    var o = 8;
    b.COMPILER_REVISION = o;
    var p = 7;
    b.LAST_COMPATIBLE_COMPILER_REVISION = p;
    var q = {
      1: "<= 1.0.rc.2",
      2: "== 1.0.0-rc.3",
      3: "== 1.0.0-rc.4",
      4: "== 1.x.x",
      5: "== 2.0.0-alpha.x",
      6: ">= 2.0.0-beta.1",
      7: ">= 4.0.0 <4.3.0",
      8: ">= 4.3.0"
    };
    b.REVISION_CHANGES = q;
    var r = "[object Object]";
    d.prototype = {
      constructor: d,
      logger: l["default"],
      log: l["default"].log,
      registerHelper: function registerHelper(a, b) {
        if (f.toString.call(a) === r) {
          if (b) throw new h["default"]("Arg not supported with multiple helpers");
          f.extend(this.helpers, a);
        } else this.helpers[a] = b;
      },
      unregisterHelper: function unregisterHelper(a) {
        delete this.helpers[a];
      },
      registerPartial: function registerPartial(a, b) {
        if (f.toString.call(a) === r) f.extend(this.partials, a);else {
          if ("undefined" == typeof b) throw new h["default"]('Attempting to register a partial called "' + a + '" as undefined');
          this.partials[a] = b;
        }
      },
      unregisterPartial: function unregisterPartial(a) {
        delete this.partials[a];
      },
      registerDecorator: function registerDecorator(a, b) {
        if (f.toString.call(a) === r) {
          if (b) throw new h["default"]("Arg not supported with multiple decorators");
          f.extend(this.decorators, a);
        } else this.decorators[a] = b;
      },
      unregisterDecorator: function unregisterDecorator(a) {
        delete this.decorators[a];
      },
      resetLoggedPropertyAccesses: function resetLoggedPropertyAccesses() {
        m.resetLoggedProperties();
      }
    };
    var s = l["default"].log;
    b.log = s, b.createFrame = f.createFrame, b.logger = l["default"];
  }, function (a, b) {
    "use strict";

    function c(a) {
      return k[a];
    }

    function d(a) {
      for (var b = 1; b < arguments.length; b++) {
        for (var c in arguments[b]) {
          Object.prototype.hasOwnProperty.call(arguments[b], c) && (a[c] = arguments[b][c]);
        }
      }

      return a;
    }

    function e(a, b) {
      for (var c = 0, d = a.length; c < d; c++) {
        if (a[c] === b) return c;
      }

      return -1;
    }

    function f(a) {
      if ("string" != typeof a) {
        if (a && a.toHTML) return a.toHTML();
        if (null == a) return "";
        if (!a) return a + "";
        a = "" + a;
      }

      return m.test(a) ? a.replace(l, c) : a;
    }

    function g(a) {
      return !a && 0 !== a || !(!p(a) || 0 !== a.length);
    }

    function h(a) {
      var b = d({}, a);
      return b._parent = a, b;
    }

    function i(a, b) {
      return a.path = b, a;
    }

    function j(a, b) {
      return (a ? a + "." : "") + b;
    }

    b.__esModule = !0, b.extend = d, b.indexOf = e, b.escapeExpression = f, b.isEmpty = g, b.createFrame = h, b.blockParams = i, b.appendContextPath = j;
    var k = {
      "&": "&amp;",
      "<": "&lt;",
      ">": "&gt;",
      '"': "&quot;",
      "'": "&#x27;",
      "`": "&#x60;",
      "=": "&#x3D;"
    },
        l = /[&<>"'`=]/g,
        m = /[&<>"'`=]/,
        n = Object.prototype.toString;
    b.toString = n;

    var o = function o(a) {
      return "function" == typeof a;
    };

    o(/x/) && (b.isFunction = o = function o(a) {
      return "function" == typeof a && "[object Function]" === n.call(a);
    }), b.isFunction = o;

    var p = Array.isArray || function (a) {
      return !(!a || "object" != _typeof(a)) && "[object Array]" === n.call(a);
    };

    b.isArray = p;
  }, function (a, b, c) {
    "use strict";

    function d(a, b) {
      var c = b && b.loc,
          g = void 0,
          h = void 0,
          i = void 0,
          j = void 0;
      c && (g = c.start.line, h = c.end.line, i = c.start.column, j = c.end.column, a += " - " + g + ":" + i);

      for (var k = Error.prototype.constructor.call(this, a), l = 0; l < f.length; l++) {
        this[f[l]] = k[f[l]];
      }

      Error.captureStackTrace && Error.captureStackTrace(this, d);

      try {
        c && (this.lineNumber = g, this.endLineNumber = h, e ? (Object.defineProperty(this, "column", {
          value: i,
          enumerable: !0
        }), Object.defineProperty(this, "endColumn", {
          value: j,
          enumerable: !0
        })) : (this.column = i, this.endColumn = j));
      } catch (m) {}
    }

    var e = c(7)["default"];
    b.__esModule = !0;
    var f = ["description", "fileName", "lineNumber", "endLineNumber", "message", "name", "number", "stack"];
    d.prototype = new Error(), b["default"] = d, a.exports = b["default"];
  }, function (a, b, c) {
    a.exports = {
      "default": c(8),
      __esModule: !0
    };
  }, function (a, b, c) {
    var d = c(9);

    a.exports = function (a, b, c) {
      return d.setDesc(a, b, c);
    };
  }, function (a, b) {
    var c = Object;
    a.exports = {
      create: c.create,
      getProto: c.getPrototypeOf,
      isEnum: {}.propertyIsEnumerable,
      getDesc: c.getOwnPropertyDescriptor,
      setDesc: c.defineProperty,
      setDescs: c.defineProperties,
      getKeys: c.keys,
      getNames: c.getOwnPropertyNames,
      getSymbols: c.getOwnPropertySymbols,
      each: [].forEach
    };
  }, function (a, b, c) {
    "use strict";

    function d(a) {
      h["default"](a), j["default"](a), l["default"](a), n["default"](a), p["default"](a), r["default"](a), t["default"](a);
    }

    function e(a, b, c) {
      a.helpers[b] && (a.hooks[b] = a.helpers[b], c || delete a.helpers[b]);
    }

    var f = c(1)["default"];
    b.__esModule = !0, b.registerDefaultHelpers = d, b.moveHelperToHooks = e;
    var g = c(11),
        h = f(g),
        i = c(12),
        j = f(i),
        k = c(25),
        l = f(k),
        m = c(26),
        n = f(m),
        o = c(27),
        p = f(o),
        q = c(28),
        r = f(q),
        s = c(29),
        t = f(s);
  }, function (a, b, c) {
    "use strict";

    b.__esModule = !0;
    var d = c(5);
    b["default"] = function (a) {
      a.registerHelper("blockHelperMissing", function (b, c) {
        var e = c.inverse,
            f = c.fn;
        if (b === !0) return f(this);
        if (b === !1 || null == b) return e(this);
        if (d.isArray(b)) return b.length > 0 ? (c.ids && (c.ids = [c.name]), a.helpers.each(b, c)) : e(this);

        if (c.data && c.ids) {
          var g = d.createFrame(c.data);
          g.contextPath = d.appendContextPath(c.data.contextPath, c.name), c = {
            data: g
          };
        }

        return f(b, c);
      });
    }, a.exports = b["default"];
  }, function (a, b, c) {
    (function (d) {
      "use strict";

      var e = c(13)["default"],
          f = c(1)["default"];
      b.__esModule = !0;
      var g = c(5),
          h = c(6),
          i = f(h);
      b["default"] = function (a) {
        a.registerHelper("each", function (a, b) {
          function c(b, c, d) {
            l && (l.key = b, l.index = c, l.first = 0 === c, l.last = !!d, m && (l.contextPath = m + b)), k += f(a[b], {
              data: l,
              blockParams: g.blockParams([a[b], b], [m + b, null])
            });
          }

          if (!b) throw new i["default"]("Must pass iterator to #each");
          var f = b.fn,
              h = b.inverse,
              j = 0,
              k = "",
              l = void 0,
              m = void 0;
          if (b.data && b.ids && (m = g.appendContextPath(b.data.contextPath, b.ids[0]) + "."), g.isFunction(a) && (a = a.call(this)), b.data && (l = g.createFrame(b.data)), a && "object" == _typeof(a)) if (g.isArray(a)) for (var n = a.length; j < n; j++) {
            j in a && c(j, j, j === a.length - 1);
          } else if (d.Symbol && a[d.Symbol.iterator]) {
            for (var o = [], p = a[d.Symbol.iterator](), q = p.next(); !q.done; q = p.next()) {
              o.push(q.value);
            }

            a = o;

            for (var n = a.length; j < n; j++) {
              c(j, j, j === a.length - 1);
            }
          } else !function () {
            var b = void 0;
            e(a).forEach(function (a) {
              void 0 !== b && c(b, j - 1), b = a, j++;
            }), void 0 !== b && c(b, j - 1, !0);
          }();
          return 0 === j && (k = h(this)), k;
        });
      }, a.exports = b["default"];
    }).call(b, function () {
      return this;
    }());
  }, function (a, b, c) {
    a.exports = {
      "default": c(14),
      __esModule: !0
    };
  }, function (a, b, c) {
    c(15), a.exports = c(21).Object.keys;
  }, function (a, b, c) {
    var d = c(16);
    c(18)("keys", function (a) {
      return function (b) {
        return a(d(b));
      };
    });
  }, function (a, b, c) {
    var d = c(17);

    a.exports = function (a) {
      return Object(d(a));
    };
  }, function (a, b) {
    a.exports = function (a) {
      if (void 0 == a) throw TypeError("Can't call method on  " + a);
      return a;
    };
  }, function (a, b, c) {
    var d = c(19),
        e = c(21),
        f = c(24);

    a.exports = function (a, b) {
      var c = (e.Object || {})[a] || Object[a],
          g = {};
      g[a] = b(c), d(d.S + d.F * f(function () {
        c(1);
      }), "Object", g);
    };
  }, function (a, b, c) {
    var d = c(20),
        e = c(21),
        f = c(22),
        g = "prototype",
        h = function h(a, b, c) {
      var i,
          j,
          k,
          l = a & h.F,
          m = a & h.G,
          n = a & h.S,
          o = a & h.P,
          p = a & h.B,
          q = a & h.W,
          r = m ? e : e[b] || (e[b] = {}),
          s = m ? d : n ? d[b] : (d[b] || {})[g];
      m && (c = b);

      for (i in c) {
        j = !l && s && i in s, j && i in r || (k = j ? s[i] : c[i], r[i] = m && "function" != typeof s[i] ? c[i] : p && j ? f(k, d) : q && s[i] == k ? function (a) {
          var b = function b(_b) {
            return this instanceof a ? new a(_b) : a(_b);
          };

          return b[g] = a[g], b;
        }(k) : o && "function" == typeof k ? f(Function.call, k) : k, o && ((r[g] || (r[g] = {}))[i] = k));
      }
    };

    h.F = 1, h.G = 2, h.S = 4, h.P = 8, h.B = 16, h.W = 32, a.exports = h;
  }, function (a, b) {
    var c = a.exports = "undefined" != typeof window && window.Math == Math ? window : "undefined" != typeof self && self.Math == Math ? self : Function("return this")();
    "number" == typeof __g && (__g = c);
  }, function (a, b) {
    var c = a.exports = {
      version: "1.2.6"
    };
    "number" == typeof __e && (__e = c);
  }, function (a, b, c) {
    var d = c(23);

    a.exports = function (a, b, c) {
      if (d(a), void 0 === b) return a;

      switch (c) {
        case 1:
          return function (c) {
            return a.call(b, c);
          };

        case 2:
          return function (c, d) {
            return a.call(b, c, d);
          };

        case 3:
          return function (c, d, e) {
            return a.call(b, c, d, e);
          };
      }

      return function () {
        return a.apply(b, arguments);
      };
    };
  }, function (a, b) {
    a.exports = function (a) {
      if ("function" != typeof a) throw TypeError(a + " is not a function!");
      return a;
    };
  }, function (a, b) {
    a.exports = function (a) {
      try {
        return !!a();
      } catch (b) {
        return !0;
      }
    };
  }, function (a, b, c) {
    "use strict";

    var d = c(1)["default"];
    b.__esModule = !0;
    var e = c(6),
        f = d(e);
    b["default"] = function (a) {
      a.registerHelper("helperMissing", function () {
        if (1 !== arguments.length) throw new f["default"]('Missing helper: "' + arguments[arguments.length - 1].name + '"');
      });
    }, a.exports = b["default"];
  }, function (a, b, c) {
    "use strict";

    var d = c(1)["default"];
    b.__esModule = !0;
    var e = c(5),
        f = c(6),
        g = d(f);
    b["default"] = function (a) {
      a.registerHelper("if", function (a, b) {
        if (2 != arguments.length) throw new g["default"]("#if requires exactly one argument");
        return e.isFunction(a) && (a = a.call(this)), !b.hash.includeZero && !a || e.isEmpty(a) ? b.inverse(this) : b.fn(this);
      }), a.registerHelper("unless", function (b, c) {
        if (2 != arguments.length) throw new g["default"]("#unless requires exactly one argument");
        return a.helpers["if"].call(this, b, {
          fn: c.inverse,
          inverse: c.fn,
          hash: c.hash
        });
      });
    }, a.exports = b["default"];
  }, function (a, b) {
    "use strict";

    b.__esModule = !0, b["default"] = function (a) {
      a.registerHelper("log", function () {
        for (var b = [void 0], c = arguments[arguments.length - 1], d = 0; d < arguments.length - 1; d++) {
          b.push(arguments[d]);
        }

        var e = 1;
        null != c.hash.level ? e = c.hash.level : c.data && null != c.data.level && (e = c.data.level), b[0] = e, a.log.apply(a, b);
      });
    }, a.exports = b["default"];
  }, function (a, b) {
    "use strict";

    b.__esModule = !0, b["default"] = function (a) {
      a.registerHelper("lookup", function (a, b, c) {
        return a ? c.lookupProperty(a, b) : a;
      });
    }, a.exports = b["default"];
  }, function (a, b, c) {
    "use strict";

    var d = c(1)["default"];
    b.__esModule = !0;
    var e = c(5),
        f = c(6),
        g = d(f);
    b["default"] = function (a) {
      a.registerHelper("with", function (a, b) {
        if (2 != arguments.length) throw new g["default"]("#with requires exactly one argument");
        e.isFunction(a) && (a = a.call(this));
        var c = b.fn;
        if (e.isEmpty(a)) return b.inverse(this);
        var d = b.data;
        return b.data && b.ids && (d = e.createFrame(b.data), d.contextPath = e.appendContextPath(b.data.contextPath, b.ids[0])), c(a, {
          data: d,
          blockParams: e.blockParams([a], [d && d.contextPath])
        });
      });
    }, a.exports = b["default"];
  }, function (a, b, c) {
    "use strict";

    function d(a) {
      g["default"](a);
    }

    var e = c(1)["default"];
    b.__esModule = !0, b.registerDefaultDecorators = d;
    var f = c(31),
        g = e(f);
  }, function (a, b, c) {
    "use strict";

    b.__esModule = !0;
    var d = c(5);
    b["default"] = function (a) {
      a.registerDecorator("inline", function (a, b, c, e) {
        var f = a;
        return b.partials || (b.partials = {}, f = function f(e, _f) {
          var g = c.partials;
          c.partials = d.extend({}, g, b.partials);
          var h = a(e, _f);
          return c.partials = g, h;
        }), b.partials[e.args[0]] = e.fn, f;
      });
    }, a.exports = b["default"];
  }, function (a, b, c) {
    "use strict";

    b.__esModule = !0;
    var d = c(5),
        e = {
      methodMap: ["debug", "info", "warn", "error"],
      level: "info",
      lookupLevel: function lookupLevel(a) {
        if ("string" == typeof a) {
          var b = d.indexOf(e.methodMap, a.toLowerCase());
          a = b >= 0 ? b : parseInt(a, 10);
        }

        return a;
      },
      log: function log(a) {
        if (a = e.lookupLevel(a), "undefined" != typeof console && e.lookupLevel(e.level) <= a) {
          var b = e.methodMap[a];
          console[b] || (b = "log");

          for (var c = arguments.length, d = Array(c > 1 ? c - 1 : 0), f = 1; f < c; f++) {
            d[f - 1] = arguments[f];
          }

          console[b].apply(console, d);
        }
      }
    };
    b["default"] = e, a.exports = b["default"];
  }, function (a, b, c) {
    "use strict";

    function d(a) {
      var b = i(null);
      b.constructor = !1, b.__defineGetter__ = !1, b.__defineSetter__ = !1, b.__lookupGetter__ = !1;
      var c = i(null);
      return c.__proto__ = !1, {
        properties: {
          whitelist: l.createNewLookupObject(c, a.allowedProtoProperties),
          defaultValue: a.allowProtoPropertiesByDefault
        },
        methods: {
          whitelist: l.createNewLookupObject(b, a.allowedProtoMethods),
          defaultValue: a.allowProtoMethodsByDefault
        }
      };
    }

    function e(a, b, c) {
      return "function" == typeof a ? f(b.methods, c) : f(b.properties, c);
    }

    function f(a, b) {
      return void 0 !== a.whitelist[b] ? a.whitelist[b] === !0 : void 0 !== a.defaultValue ? a.defaultValue : (g(b), !1);
    }

    function g(a) {
      o[a] !== !0 && (o[a] = !0, n.log("error", 'Handlebars: Access has been denied to resolve the property "' + a + '" because it is not an "own property" of its parent.\nYou can add a runtime option to disable the check or this warning:\nSee https://handlebarsjs.com/api-reference/runtime-options.html#options-to-control-prototype-access for details'));
    }

    function h() {
      j(o).forEach(function (a) {
        delete o[a];
      });
    }

    var i = c(34)["default"],
        j = c(13)["default"],
        k = c(3)["default"];
    b.__esModule = !0, b.createProtoAccessControl = d, b.resultIsAllowed = e, b.resetLoggedProperties = h;
    var l = c(36),
        m = c(32),
        n = k(m),
        o = i(null);
  }, function (a, b, c) {
    a.exports = {
      "default": c(35),
      __esModule: !0
    };
  }, function (a, b, c) {
    var d = c(9);

    a.exports = function (a, b) {
      return d.create(a, b);
    };
  }, function (a, b, c) {
    "use strict";

    function d() {
      for (var a = arguments.length, b = Array(a), c = 0; c < a; c++) {
        b[c] = arguments[c];
      }

      return f.extend.apply(void 0, [e(null)].concat(b));
    }

    var e = c(34)["default"];
    b.__esModule = !0, b.createNewLookupObject = d;
    var f = c(5);
  }, function (a, b) {
    "use strict";

    function c(a) {
      this.string = a;
    }

    b.__esModule = !0, c.prototype.toString = c.prototype.toHTML = function () {
      return "" + this.string;
    }, b["default"] = c, a.exports = b["default"];
  }, function (a, b, c) {
    "use strict";

    function d(a) {
      var b = a && a[0] || 1,
          c = v.COMPILER_REVISION;

      if (!(b >= v.LAST_COMPATIBLE_COMPILER_REVISION && b <= v.COMPILER_REVISION)) {
        if (b < v.LAST_COMPATIBLE_COMPILER_REVISION) {
          var d = v.REVISION_CHANGES[c],
              e = v.REVISION_CHANGES[b];
          throw new u["default"]("Template was precompiled with an older version of Handlebars than the current runtime. Please update your precompiler to a newer version (" + d + ") or downgrade your runtime to an older version (" + e + ").");
        }

        throw new u["default"]("Template was precompiled with a newer version of Handlebars than the current runtime. Please update your runtime to a newer version (" + a[1] + ").");
      }
    }

    function e(a, b) {
      function c(c, d, e) {
        e.hash && (d = s.extend({}, d, e.hash), e.ids && (e.ids[0] = !0)), c = b.VM.resolvePartial.call(this, c, d, e);
        var f = s.extend({}, e, {
          hooks: this.hooks,
          protoAccessControl: this.protoAccessControl
        }),
            g = b.VM.invokePartial.call(this, c, d, f);

        if (null == g && b.compile && (e.partials[e.name] = b.compile(c, a.compilerOptions, b), g = e.partials[e.name](d, f)), null != g) {
          if (e.indent) {
            for (var h = g.split("\n"), i = 0, j = h.length; i < j && (h[i] || i + 1 !== j); i++) {
              h[i] = e.indent + h[i];
            }

            g = h.join("\n");
          }

          return g;
        }

        throw new u["default"]("The partial " + e.name + " could not be compiled when running in runtime-only mode");
      }

      function d(b) {
        function c(b) {
          return "" + a.main(g, b, g.helpers, g.partials, f, i, h);
        }

        var e = arguments.length <= 1 || void 0 === arguments[1] ? {} : arguments[1],
            f = e.data;
        d._setup(e), !e.partial && a.useData && (f = j(b, f));
        var h = void 0,
            i = a.useBlockParams ? [] : void 0;
        return a.useDepths && (h = e.depths ? b != e.depths[0] ? [b].concat(e.depths) : e.depths : [b]), (c = k(a.main, c, g, e.depths || [], f, i))(b, e);
      }

      if (!b) throw new u["default"]("No environment passed to template");
      if (!a || !a.main) throw new u["default"]("Unknown template object: " + _typeof(a));
      a.main.decorator = a.main_d, b.VM.checkRevision(a.compiler);
      var e = a.compiler && 7 === a.compiler[0],
          g = {
        strict: function strict(a, b, c) {
          if (!(a && b in a)) throw new u["default"]('"' + b + '" not defined in ' + a, {
            loc: c
          });
          return g.lookupProperty(a, b);
        },
        lookupProperty: function lookupProperty(a, b) {
          var c = a[b];
          return null == c ? c : Object.prototype.hasOwnProperty.call(a, b) ? c : y.resultIsAllowed(c, g.protoAccessControl, b) ? c : void 0;
        },
        lookup: function lookup(a, b) {
          for (var c = a.length, d = 0; d < c; d++) {
            var e = a[d] && g.lookupProperty(a[d], b);
            if (null != e) return a[d][b];
          }
        },
        lambda: function lambda(a, b) {
          return "function" == typeof a ? a.call(b) : a;
        },
        escapeExpression: s.escapeExpression,
        invokePartial: c,
        fn: function fn(b) {
          var c = a[b];
          return c.decorator = a[b + "_d"], c;
        },
        programs: [],
        program: function program(a, b, c, d, e) {
          var g = this.programs[a],
              h = this.fn(a);
          return b || e || d || c ? g = f(this, a, h, b, c, d, e) : g || (g = this.programs[a] = f(this, a, h)), g;
        },
        data: function data(a, b) {
          for (; a && b--;) {
            a = a._parent;
          }

          return a;
        },
        mergeIfNeeded: function mergeIfNeeded(a, b) {
          var c = a || b;
          return a && b && a !== b && (c = s.extend({}, b, a)), c;
        },
        nullContext: n({}),
        noop: b.VM.noop,
        compilerInfo: a.compiler
      };
      return d.isTop = !0, d._setup = function (c) {
        if (c.partial) g.protoAccessControl = c.protoAccessControl, g.helpers = c.helpers, g.partials = c.partials, g.decorators = c.decorators, g.hooks = c.hooks;else {
          var d = s.extend({}, b.helpers, c.helpers);
          l(d, g), g.helpers = d, a.usePartial && (g.partials = g.mergeIfNeeded(c.partials, b.partials)), (a.usePartial || a.useDecorators) && (g.decorators = s.extend({}, b.decorators, c.decorators)), g.hooks = {}, g.protoAccessControl = y.createProtoAccessControl(c);
          var f = c.allowCallsToHelperMissing || e;
          w.moveHelperToHooks(g, "helperMissing", f), w.moveHelperToHooks(g, "blockHelperMissing", f);
        }
      }, d._child = function (b, c, d, e) {
        if (a.useBlockParams && !d) throw new u["default"]("must pass block params");
        if (a.useDepths && !e) throw new u["default"]("must pass parent depths");
        return f(g, b, a[b], c, 0, d, e);
      }, d;
    }

    function f(a, b, c, d, e, f, g) {
      function h(b) {
        var e = arguments.length <= 1 || void 0 === arguments[1] ? {} : arguments[1],
            h = g;
        return !g || b == g[0] || b === a.nullContext && null === g[0] || (h = [b].concat(g)), c(a, b, a.helpers, a.partials, e.data || d, f && [e.blockParams].concat(f), h);
      }

      return h = k(c, h, a, g, d, f), h.program = b, h.depth = g ? g.length : 0, h.blockParams = e || 0, h;
    }

    function g(a, b, c) {
      return a ? a.call || c.name || (c.name = a, a = c.partials[a]) : a = "@partial-block" === c.name ? c.data["partial-block"] : c.partials[c.name], a;
    }

    function h(a, b, c) {
      var d = c.data && c.data["partial-block"];
      c.partial = !0, c.ids && (c.data.contextPath = c.ids[0] || c.data.contextPath);
      var e = void 0;
      if (c.fn && c.fn !== i && !function () {
        c.data = v.createFrame(c.data);
        var a = c.fn;
        e = c.data["partial-block"] = function (b) {
          var c = arguments.length <= 1 || void 0 === arguments[1] ? {} : arguments[1];
          return c.data = v.createFrame(c.data), c.data["partial-block"] = d, a(b, c);
        }, a.partials && (c.partials = s.extend({}, c.partials, a.partials));
      }(), void 0 === a && e && (a = e), void 0 === a) throw new u["default"]("The partial " + c.name + " could not be found");
      if (a instanceof Function) return a(b, c);
    }

    function i() {
      return "";
    }

    function j(a, b) {
      return b && "root" in b || (b = b ? v.createFrame(b) : {}, b.root = a), b;
    }

    function k(a, b, c, d, e, f) {
      if (a.decorator) {
        var g = {};
        b = a.decorator(b, g, c, d && d[0], e, f, d), s.extend(b, g);
      }

      return b;
    }

    function l(a, b) {
      o(a).forEach(function (c) {
        var d = a[c];
        a[c] = m(d, b);
      });
    }

    function m(a, b) {
      var c = b.lookupProperty;
      return x.wrapHelper(a, function (a) {
        return s.extend({
          lookupProperty: c
        }, a);
      });
    }

    var n = c(39)["default"],
        o = c(13)["default"],
        p = c(3)["default"],
        q = c(1)["default"];
    b.__esModule = !0, b.checkRevision = d, b.template = e, b.wrapProgram = f, b.resolvePartial = g, b.invokePartial = h, b.noop = i;
    var r = c(5),
        s = p(r),
        t = c(6),
        u = q(t),
        v = c(4),
        w = c(10),
        x = c(43),
        y = c(33);
  }, function (a, b, c) {
    a.exports = {
      "default": c(40),
      __esModule: !0
    };
  }, function (a, b, c) {
    c(41), a.exports = c(21).Object.seal;
  }, function (a, b, c) {
    var d = c(42);
    c(18)("seal", function (a) {
      return function (b) {
        return a && d(b) ? a(b) : b;
      };
    });
  }, function (a, b) {
    a.exports = function (a) {
      return "object" == _typeof(a) ? null !== a : "function" == typeof a;
    };
  }, function (a, b) {
    "use strict";

    function c(a, b) {
      if ("function" != typeof a) return a;

      var c = function c() {
        var c = arguments[arguments.length - 1];
        return arguments[arguments.length - 1] = b(c), a.apply(this, arguments);
      };

      return c;
    }

    b.__esModule = !0, b.wrapHelper = c;
  }, function (a, b) {
    (function (c) {
      "use strict";

      b.__esModule = !0, b["default"] = function (a) {
        var b = "undefined" != typeof c ? c : window,
            d = b.Handlebars;

        a.noConflict = function () {
          return b.Handlebars === a && (b.Handlebars = d), a;
        };
      }, a.exports = b["default"];
    }).call(b, function () {
      return this;
    }());
  }, function (a, b) {
    "use strict";

    b.__esModule = !0;
    var c = {
      helpers: {
        helperExpression: function helperExpression(a) {
          return "SubExpression" === a.type || ("MustacheStatement" === a.type || "BlockStatement" === a.type) && !!(a.params && a.params.length || a.hash);
        },
        scopedId: function scopedId(a) {
          return /^\.|this\b/.test(a.original);
        },
        simpleId: function simpleId(a) {
          return 1 === a.parts.length && !c.helpers.scopedId(a) && !a.depth;
        }
      }
    };
    b["default"] = c, a.exports = b["default"];
  }, function (a, b, c) {
    "use strict";

    function d(a, b) {
      if ("Program" === a.type) return a;
      i["default"].yy = o, o.locInfo = function (a) {
        return new o.SourceLocation(b && b.srcName, a);
      };
      var c = i["default"].parse(a);
      return c;
    }

    function e(a, b) {
      var c = d(a, b),
          e = new k["default"](b);
      return e.accept(c);
    }

    var f = c(1)["default"],
        g = c(3)["default"];
    b.__esModule = !0, b.parseWithoutProcessing = d, b.parse = e;
    var h = c(47),
        i = f(h),
        j = c(48),
        k = f(j),
        l = c(50),
        m = g(l),
        n = c(5);
    b.parser = i["default"];
    var o = {};
    n.extend(o, m);
  }, function (a, b) {
    "use strict";

    b.__esModule = !0;

    var c = function () {
      function a() {
        this.yy = {};
      }

      var b = {
        trace: function trace() {},
        yy: {},
        symbols_: {
          error: 2,
          root: 3,
          program: 4,
          EOF: 5,
          program_repetition0: 6,
          statement: 7,
          mustache: 8,
          block: 9,
          rawBlock: 10,
          partial: 11,
          partialBlock: 12,
          content: 13,
          COMMENT: 14,
          CONTENT: 15,
          openRawBlock: 16,
          rawBlock_repetition0: 17,
          END_RAW_BLOCK: 18,
          OPEN_RAW_BLOCK: 19,
          helperName: 20,
          openRawBlock_repetition0: 21,
          openRawBlock_option0: 22,
          CLOSE_RAW_BLOCK: 23,
          openBlock: 24,
          block_option0: 25,
          closeBlock: 26,
          openInverse: 27,
          block_option1: 28,
          OPEN_BLOCK: 29,
          openBlock_repetition0: 30,
          openBlock_option0: 31,
          openBlock_option1: 32,
          CLOSE: 33,
          OPEN_INVERSE: 34,
          openInverse_repetition0: 35,
          openInverse_option0: 36,
          openInverse_option1: 37,
          openInverseChain: 38,
          OPEN_INVERSE_CHAIN: 39,
          openInverseChain_repetition0: 40,
          openInverseChain_option0: 41,
          openInverseChain_option1: 42,
          inverseAndProgram: 43,
          INVERSE: 44,
          inverseChain: 45,
          inverseChain_option0: 46,
          OPEN_ENDBLOCK: 47,
          OPEN: 48,
          mustache_repetition0: 49,
          mustache_option0: 50,
          OPEN_UNESCAPED: 51,
          mustache_repetition1: 52,
          mustache_option1: 53,
          CLOSE_UNESCAPED: 54,
          OPEN_PARTIAL: 55,
          partialName: 56,
          partial_repetition0: 57,
          partial_option0: 58,
          openPartialBlock: 59,
          OPEN_PARTIAL_BLOCK: 60,
          openPartialBlock_repetition0: 61,
          openPartialBlock_option0: 62,
          param: 63,
          sexpr: 64,
          OPEN_SEXPR: 65,
          sexpr_repetition0: 66,
          sexpr_option0: 67,
          CLOSE_SEXPR: 68,
          hash: 69,
          hash_repetition_plus0: 70,
          hashSegment: 71,
          ID: 72,
          EQUALS: 73,
          blockParams: 74,
          OPEN_BLOCK_PARAMS: 75,
          blockParams_repetition_plus0: 76,
          CLOSE_BLOCK_PARAMS: 77,
          path: 78,
          dataName: 79,
          STRING: 80,
          NUMBER: 81,
          BOOLEAN: 82,
          UNDEFINED: 83,
          NULL: 84,
          DATA: 85,
          pathSegments: 86,
          SEP: 87,
          $accept: 0,
          $end: 1
        },
        terminals_: {
          2: "error",
          5: "EOF",
          14: "COMMENT",
          15: "CONTENT",
          18: "END_RAW_BLOCK",
          19: "OPEN_RAW_BLOCK",
          23: "CLOSE_RAW_BLOCK",
          29: "OPEN_BLOCK",
          33: "CLOSE",
          34: "OPEN_INVERSE",
          39: "OPEN_INVERSE_CHAIN",
          44: "INVERSE",
          47: "OPEN_ENDBLOCK",
          48: "OPEN",
          51: "OPEN_UNESCAPED",
          54: "CLOSE_UNESCAPED",
          55: "OPEN_PARTIAL",
          60: "OPEN_PARTIAL_BLOCK",
          65: "OPEN_SEXPR",
          68: "CLOSE_SEXPR",
          72: "ID",
          73: "EQUALS",
          75: "OPEN_BLOCK_PARAMS",
          77: "CLOSE_BLOCK_PARAMS",
          80: "STRING",
          81: "NUMBER",
          82: "BOOLEAN",
          83: "UNDEFINED",
          84: "NULL",
          85: "DATA",
          87: "SEP"
        },
        productions_: [0, [3, 2], [4, 1], [7, 1], [7, 1], [7, 1], [7, 1], [7, 1], [7, 1], [7, 1], [13, 1], [10, 3], [16, 5], [9, 4], [9, 4], [24, 6], [27, 6], [38, 6], [43, 2], [45, 3], [45, 1], [26, 3], [8, 5], [8, 5], [11, 5], [12, 3], [59, 5], [63, 1], [63, 1], [64, 5], [69, 1], [71, 3], [74, 3], [20, 1], [20, 1], [20, 1], [20, 1], [20, 1], [20, 1], [20, 1], [56, 1], [56, 1], [79, 2], [78, 1], [86, 3], [86, 1], [6, 0], [6, 2], [17, 0], [17, 2], [21, 0], [21, 2], [22, 0], [22, 1], [25, 0], [25, 1], [28, 0], [28, 1], [30, 0], [30, 2], [31, 0], [31, 1], [32, 0], [32, 1], [35, 0], [35, 2], [36, 0], [36, 1], [37, 0], [37, 1], [40, 0], [40, 2], [41, 0], [41, 1], [42, 0], [42, 1], [46, 0], [46, 1], [49, 0], [49, 2], [50, 0], [50, 1], [52, 0], [52, 2], [53, 0], [53, 1], [57, 0], [57, 2], [58, 0], [58, 1], [61, 0], [61, 2], [62, 0], [62, 1], [66, 0], [66, 2], [67, 0], [67, 1], [70, 1], [70, 2], [76, 1], [76, 2]],
        performAction: function performAction(a, b, c, d, e, f, g) {
          var h = f.length - 1;

          switch (e) {
            case 1:
              return f[h - 1];

            case 2:
              this.$ = d.prepareProgram(f[h]);
              break;

            case 3:
              this.$ = f[h];
              break;

            case 4:
              this.$ = f[h];
              break;

            case 5:
              this.$ = f[h];
              break;

            case 6:
              this.$ = f[h];
              break;

            case 7:
              this.$ = f[h];
              break;

            case 8:
              this.$ = f[h];
              break;

            case 9:
              this.$ = {
                type: "CommentStatement",
                value: d.stripComment(f[h]),
                strip: d.stripFlags(f[h], f[h]),
                loc: d.locInfo(this._$)
              };
              break;

            case 10:
              this.$ = {
                type: "ContentStatement",
                original: f[h],
                value: f[h],
                loc: d.locInfo(this._$)
              };
              break;

            case 11:
              this.$ = d.prepareRawBlock(f[h - 2], f[h - 1], f[h], this._$);
              break;

            case 12:
              this.$ = {
                path: f[h - 3],
                params: f[h - 2],
                hash: f[h - 1]
              };
              break;

            case 13:
              this.$ = d.prepareBlock(f[h - 3], f[h - 2], f[h - 1], f[h], !1, this._$);
              break;

            case 14:
              this.$ = d.prepareBlock(f[h - 3], f[h - 2], f[h - 1], f[h], !0, this._$);
              break;

            case 15:
              this.$ = {
                open: f[h - 5],
                path: f[h - 4],
                params: f[h - 3],
                hash: f[h - 2],
                blockParams: f[h - 1],
                strip: d.stripFlags(f[h - 5], f[h])
              };
              break;

            case 16:
              this.$ = {
                path: f[h - 4],
                params: f[h - 3],
                hash: f[h - 2],
                blockParams: f[h - 1],
                strip: d.stripFlags(f[h - 5], f[h])
              };
              break;

            case 17:
              this.$ = {
                path: f[h - 4],
                params: f[h - 3],
                hash: f[h - 2],
                blockParams: f[h - 1],
                strip: d.stripFlags(f[h - 5], f[h])
              };
              break;

            case 18:
              this.$ = {
                strip: d.stripFlags(f[h - 1], f[h - 1]),
                program: f[h]
              };
              break;

            case 19:
              var i = d.prepareBlock(f[h - 2], f[h - 1], f[h], f[h], !1, this._$),
                  j = d.prepareProgram([i], f[h - 1].loc);
              j.chained = !0, this.$ = {
                strip: f[h - 2].strip,
                program: j,
                chain: !0
              };
              break;

            case 20:
              this.$ = f[h];
              break;

            case 21:
              this.$ = {
                path: f[h - 1],
                strip: d.stripFlags(f[h - 2], f[h])
              };
              break;

            case 22:
              this.$ = d.prepareMustache(f[h - 3], f[h - 2], f[h - 1], f[h - 4], d.stripFlags(f[h - 4], f[h]), this._$);
              break;

            case 23:
              this.$ = d.prepareMustache(f[h - 3], f[h - 2], f[h - 1], f[h - 4], d.stripFlags(f[h - 4], f[h]), this._$);
              break;

            case 24:
              this.$ = {
                type: "PartialStatement",
                name: f[h - 3],
                params: f[h - 2],
                hash: f[h - 1],
                indent: "",
                strip: d.stripFlags(f[h - 4], f[h]),
                loc: d.locInfo(this._$)
              };
              break;

            case 25:
              this.$ = d.preparePartialBlock(f[h - 2], f[h - 1], f[h], this._$);
              break;

            case 26:
              this.$ = {
                path: f[h - 3],
                params: f[h - 2],
                hash: f[h - 1],
                strip: d.stripFlags(f[h - 4], f[h])
              };
              break;

            case 27:
              this.$ = f[h];
              break;

            case 28:
              this.$ = f[h];
              break;

            case 29:
              this.$ = {
                type: "SubExpression",
                path: f[h - 3],
                params: f[h - 2],
                hash: f[h - 1],
                loc: d.locInfo(this._$)
              };
              break;

            case 30:
              this.$ = {
                type: "Hash",
                pairs: f[h],
                loc: d.locInfo(this._$)
              };
              break;

            case 31:
              this.$ = {
                type: "HashPair",
                key: d.id(f[h - 2]),
                value: f[h],
                loc: d.locInfo(this._$)
              };
              break;

            case 32:
              this.$ = d.id(f[h - 1]);
              break;

            case 33:
              this.$ = f[h];
              break;

            case 34:
              this.$ = f[h];
              break;

            case 35:
              this.$ = {
                type: "StringLiteral",
                value: f[h],
                original: f[h],
                loc: d.locInfo(this._$)
              };
              break;

            case 36:
              this.$ = {
                type: "NumberLiteral",
                value: Number(f[h]),
                original: Number(f[h]),
                loc: d.locInfo(this._$)
              };
              break;

            case 37:
              this.$ = {
                type: "BooleanLiteral",
                value: "true" === f[h],
                original: "true" === f[h],
                loc: d.locInfo(this._$)
              };
              break;

            case 38:
              this.$ = {
                type: "UndefinedLiteral",
                original: void 0,
                value: void 0,
                loc: d.locInfo(this._$)
              };
              break;

            case 39:
              this.$ = {
                type: "NullLiteral",
                original: null,
                value: null,
                loc: d.locInfo(this._$)
              };
              break;

            case 40:
              this.$ = f[h];
              break;

            case 41:
              this.$ = f[h];
              break;

            case 42:
              this.$ = d.preparePath(!0, f[h], this._$);
              break;

            case 43:
              this.$ = d.preparePath(!1, f[h], this._$);
              break;

            case 44:
              f[h - 2].push({
                part: d.id(f[h]),
                original: f[h],
                separator: f[h - 1]
              }), this.$ = f[h - 2];
              break;

            case 45:
              this.$ = [{
                part: d.id(f[h]),
                original: f[h]
              }];
              break;

            case 46:
              this.$ = [];
              break;

            case 47:
              f[h - 1].push(f[h]);
              break;

            case 48:
              this.$ = [];
              break;

            case 49:
              f[h - 1].push(f[h]);
              break;

            case 50:
              this.$ = [];
              break;

            case 51:
              f[h - 1].push(f[h]);
              break;

            case 58:
              this.$ = [];
              break;

            case 59:
              f[h - 1].push(f[h]);
              break;

            case 64:
              this.$ = [];
              break;

            case 65:
              f[h - 1].push(f[h]);
              break;

            case 70:
              this.$ = [];
              break;

            case 71:
              f[h - 1].push(f[h]);
              break;

            case 78:
              this.$ = [];
              break;

            case 79:
              f[h - 1].push(f[h]);
              break;

            case 82:
              this.$ = [];
              break;

            case 83:
              f[h - 1].push(f[h]);
              break;

            case 86:
              this.$ = [];
              break;

            case 87:
              f[h - 1].push(f[h]);
              break;

            case 90:
              this.$ = [];
              break;

            case 91:
              f[h - 1].push(f[h]);
              break;

            case 94:
              this.$ = [];
              break;

            case 95:
              f[h - 1].push(f[h]);
              break;

            case 98:
              this.$ = [f[h]];
              break;

            case 99:
              f[h - 1].push(f[h]);
              break;

            case 100:
              this.$ = [f[h]];
              break;

            case 101:
              f[h - 1].push(f[h]);
          }
        },
        table: [{
          3: 1,
          4: 2,
          5: [2, 46],
          6: 3,
          14: [2, 46],
          15: [2, 46],
          19: [2, 46],
          29: [2, 46],
          34: [2, 46],
          48: [2, 46],
          51: [2, 46],
          55: [2, 46],
          60: [2, 46]
        }, {
          1: [3]
        }, {
          5: [1, 4]
        }, {
          5: [2, 2],
          7: 5,
          8: 6,
          9: 7,
          10: 8,
          11: 9,
          12: 10,
          13: 11,
          14: [1, 12],
          15: [1, 20],
          16: 17,
          19: [1, 23],
          24: 15,
          27: 16,
          29: [1, 21],
          34: [1, 22],
          39: [2, 2],
          44: [2, 2],
          47: [2, 2],
          48: [1, 13],
          51: [1, 14],
          55: [1, 18],
          59: 19,
          60: [1, 24]
        }, {
          1: [2, 1]
        }, {
          5: [2, 47],
          14: [2, 47],
          15: [2, 47],
          19: [2, 47],
          29: [2, 47],
          34: [2, 47],
          39: [2, 47],
          44: [2, 47],
          47: [2, 47],
          48: [2, 47],
          51: [2, 47],
          55: [2, 47],
          60: [2, 47]
        }, {
          5: [2, 3],
          14: [2, 3],
          15: [2, 3],
          19: [2, 3],
          29: [2, 3],
          34: [2, 3],
          39: [2, 3],
          44: [2, 3],
          47: [2, 3],
          48: [2, 3],
          51: [2, 3],
          55: [2, 3],
          60: [2, 3]
        }, {
          5: [2, 4],
          14: [2, 4],
          15: [2, 4],
          19: [2, 4],
          29: [2, 4],
          34: [2, 4],
          39: [2, 4],
          44: [2, 4],
          47: [2, 4],
          48: [2, 4],
          51: [2, 4],
          55: [2, 4],
          60: [2, 4]
        }, {
          5: [2, 5],
          14: [2, 5],
          15: [2, 5],
          19: [2, 5],
          29: [2, 5],
          34: [2, 5],
          39: [2, 5],
          44: [2, 5],
          47: [2, 5],
          48: [2, 5],
          51: [2, 5],
          55: [2, 5],
          60: [2, 5]
        }, {
          5: [2, 6],
          14: [2, 6],
          15: [2, 6],
          19: [2, 6],
          29: [2, 6],
          34: [2, 6],
          39: [2, 6],
          44: [2, 6],
          47: [2, 6],
          48: [2, 6],
          51: [2, 6],
          55: [2, 6],
          60: [2, 6]
        }, {
          5: [2, 7],
          14: [2, 7],
          15: [2, 7],
          19: [2, 7],
          29: [2, 7],
          34: [2, 7],
          39: [2, 7],
          44: [2, 7],
          47: [2, 7],
          48: [2, 7],
          51: [2, 7],
          55: [2, 7],
          60: [2, 7]
        }, {
          5: [2, 8],
          14: [2, 8],
          15: [2, 8],
          19: [2, 8],
          29: [2, 8],
          34: [2, 8],
          39: [2, 8],
          44: [2, 8],
          47: [2, 8],
          48: [2, 8],
          51: [2, 8],
          55: [2, 8],
          60: [2, 8]
        }, {
          5: [2, 9],
          14: [2, 9],
          15: [2, 9],
          19: [2, 9],
          29: [2, 9],
          34: [2, 9],
          39: [2, 9],
          44: [2, 9],
          47: [2, 9],
          48: [2, 9],
          51: [2, 9],
          55: [2, 9],
          60: [2, 9]
        }, {
          20: 25,
          72: [1, 35],
          78: 26,
          79: 27,
          80: [1, 28],
          81: [1, 29],
          82: [1, 30],
          83: [1, 31],
          84: [1, 32],
          85: [1, 34],
          86: 33
        }, {
          20: 36,
          72: [1, 35],
          78: 26,
          79: 27,
          80: [1, 28],
          81: [1, 29],
          82: [1, 30],
          83: [1, 31],
          84: [1, 32],
          85: [1, 34],
          86: 33
        }, {
          4: 37,
          6: 3,
          14: [2, 46],
          15: [2, 46],
          19: [2, 46],
          29: [2, 46],
          34: [2, 46],
          39: [2, 46],
          44: [2, 46],
          47: [2, 46],
          48: [2, 46],
          51: [2, 46],
          55: [2, 46],
          60: [2, 46]
        }, {
          4: 38,
          6: 3,
          14: [2, 46],
          15: [2, 46],
          19: [2, 46],
          29: [2, 46],
          34: [2, 46],
          44: [2, 46],
          47: [2, 46],
          48: [2, 46],
          51: [2, 46],
          55: [2, 46],
          60: [2, 46]
        }, {
          15: [2, 48],
          17: 39,
          18: [2, 48]
        }, {
          20: 41,
          56: 40,
          64: 42,
          65: [1, 43],
          72: [1, 35],
          78: 26,
          79: 27,
          80: [1, 28],
          81: [1, 29],
          82: [1, 30],
          83: [1, 31],
          84: [1, 32],
          85: [1, 34],
          86: 33
        }, {
          4: 44,
          6: 3,
          14: [2, 46],
          15: [2, 46],
          19: [2, 46],
          29: [2, 46],
          34: [2, 46],
          47: [2, 46],
          48: [2, 46],
          51: [2, 46],
          55: [2, 46],
          60: [2, 46]
        }, {
          5: [2, 10],
          14: [2, 10],
          15: [2, 10],
          18: [2, 10],
          19: [2, 10],
          29: [2, 10],
          34: [2, 10],
          39: [2, 10],
          44: [2, 10],
          47: [2, 10],
          48: [2, 10],
          51: [2, 10],
          55: [2, 10],
          60: [2, 10]
        }, {
          20: 45,
          72: [1, 35],
          78: 26,
          79: 27,
          80: [1, 28],
          81: [1, 29],
          82: [1, 30],
          83: [1, 31],
          84: [1, 32],
          85: [1, 34],
          86: 33
        }, {
          20: 46,
          72: [1, 35],
          78: 26,
          79: 27,
          80: [1, 28],
          81: [1, 29],
          82: [1, 30],
          83: [1, 31],
          84: [1, 32],
          85: [1, 34],
          86: 33
        }, {
          20: 47,
          72: [1, 35],
          78: 26,
          79: 27,
          80: [1, 28],
          81: [1, 29],
          82: [1, 30],
          83: [1, 31],
          84: [1, 32],
          85: [1, 34],
          86: 33
        }, {
          20: 41,
          56: 48,
          64: 42,
          65: [1, 43],
          72: [1, 35],
          78: 26,
          79: 27,
          80: [1, 28],
          81: [1, 29],
          82: [1, 30],
          83: [1, 31],
          84: [1, 32],
          85: [1, 34],
          86: 33
        }, {
          33: [2, 78],
          49: 49,
          65: [2, 78],
          72: [2, 78],
          80: [2, 78],
          81: [2, 78],
          82: [2, 78],
          83: [2, 78],
          84: [2, 78],
          85: [2, 78]
        }, {
          23: [2, 33],
          33: [2, 33],
          54: [2, 33],
          65: [2, 33],
          68: [2, 33],
          72: [2, 33],
          75: [2, 33],
          80: [2, 33],
          81: [2, 33],
          82: [2, 33],
          83: [2, 33],
          84: [2, 33],
          85: [2, 33]
        }, {
          23: [2, 34],
          33: [2, 34],
          54: [2, 34],
          65: [2, 34],
          68: [2, 34],
          72: [2, 34],
          75: [2, 34],
          80: [2, 34],
          81: [2, 34],
          82: [2, 34],
          83: [2, 34],
          84: [2, 34],
          85: [2, 34]
        }, {
          23: [2, 35],
          33: [2, 35],
          54: [2, 35],
          65: [2, 35],
          68: [2, 35],
          72: [2, 35],
          75: [2, 35],
          80: [2, 35],
          81: [2, 35],
          82: [2, 35],
          83: [2, 35],
          84: [2, 35],
          85: [2, 35]
        }, {
          23: [2, 36],
          33: [2, 36],
          54: [2, 36],
          65: [2, 36],
          68: [2, 36],
          72: [2, 36],
          75: [2, 36],
          80: [2, 36],
          81: [2, 36],
          82: [2, 36],
          83: [2, 36],
          84: [2, 36],
          85: [2, 36]
        }, {
          23: [2, 37],
          33: [2, 37],
          54: [2, 37],
          65: [2, 37],
          68: [2, 37],
          72: [2, 37],
          75: [2, 37],
          80: [2, 37],
          81: [2, 37],
          82: [2, 37],
          83: [2, 37],
          84: [2, 37],
          85: [2, 37]
        }, {
          23: [2, 38],
          33: [2, 38],
          54: [2, 38],
          65: [2, 38],
          68: [2, 38],
          72: [2, 38],
          75: [2, 38],
          80: [2, 38],
          81: [2, 38],
          82: [2, 38],
          83: [2, 38],
          84: [2, 38],
          85: [2, 38]
        }, {
          23: [2, 39],
          33: [2, 39],
          54: [2, 39],
          65: [2, 39],
          68: [2, 39],
          72: [2, 39],
          75: [2, 39],
          80: [2, 39],
          81: [2, 39],
          82: [2, 39],
          83: [2, 39],
          84: [2, 39],
          85: [2, 39]
        }, {
          23: [2, 43],
          33: [2, 43],
          54: [2, 43],
          65: [2, 43],
          68: [2, 43],
          72: [2, 43],
          75: [2, 43],
          80: [2, 43],
          81: [2, 43],
          82: [2, 43],
          83: [2, 43],
          84: [2, 43],
          85: [2, 43],
          87: [1, 50]
        }, {
          72: [1, 35],
          86: 51
        }, {
          23: [2, 45],
          33: [2, 45],
          54: [2, 45],
          65: [2, 45],
          68: [2, 45],
          72: [2, 45],
          75: [2, 45],
          80: [2, 45],
          81: [2, 45],
          82: [2, 45],
          83: [2, 45],
          84: [2, 45],
          85: [2, 45],
          87: [2, 45]
        }, {
          52: 52,
          54: [2, 82],
          65: [2, 82],
          72: [2, 82],
          80: [2, 82],
          81: [2, 82],
          82: [2, 82],
          83: [2, 82],
          84: [2, 82],
          85: [2, 82]
        }, {
          25: 53,
          38: 55,
          39: [1, 57],
          43: 56,
          44: [1, 58],
          45: 54,
          47: [2, 54]
        }, {
          28: 59,
          43: 60,
          44: [1, 58],
          47: [2, 56]
        }, {
          13: 62,
          15: [1, 20],
          18: [1, 61]
        }, {
          33: [2, 86],
          57: 63,
          65: [2, 86],
          72: [2, 86],
          80: [2, 86],
          81: [2, 86],
          82: [2, 86],
          83: [2, 86],
          84: [2, 86],
          85: [2, 86]
        }, {
          33: [2, 40],
          65: [2, 40],
          72: [2, 40],
          80: [2, 40],
          81: [2, 40],
          82: [2, 40],
          83: [2, 40],
          84: [2, 40],
          85: [2, 40]
        }, {
          33: [2, 41],
          65: [2, 41],
          72: [2, 41],
          80: [2, 41],
          81: [2, 41],
          82: [2, 41],
          83: [2, 41],
          84: [2, 41],
          85: [2, 41]
        }, {
          20: 64,
          72: [1, 35],
          78: 26,
          79: 27,
          80: [1, 28],
          81: [1, 29],
          82: [1, 30],
          83: [1, 31],
          84: [1, 32],
          85: [1, 34],
          86: 33
        }, {
          26: 65,
          47: [1, 66]
        }, {
          30: 67,
          33: [2, 58],
          65: [2, 58],
          72: [2, 58],
          75: [2, 58],
          80: [2, 58],
          81: [2, 58],
          82: [2, 58],
          83: [2, 58],
          84: [2, 58],
          85: [2, 58]
        }, {
          33: [2, 64],
          35: 68,
          65: [2, 64],
          72: [2, 64],
          75: [2, 64],
          80: [2, 64],
          81: [2, 64],
          82: [2, 64],
          83: [2, 64],
          84: [2, 64],
          85: [2, 64]
        }, {
          21: 69,
          23: [2, 50],
          65: [2, 50],
          72: [2, 50],
          80: [2, 50],
          81: [2, 50],
          82: [2, 50],
          83: [2, 50],
          84: [2, 50],
          85: [2, 50]
        }, {
          33: [2, 90],
          61: 70,
          65: [2, 90],
          72: [2, 90],
          80: [2, 90],
          81: [2, 90],
          82: [2, 90],
          83: [2, 90],
          84: [2, 90],
          85: [2, 90]
        }, {
          20: 74,
          33: [2, 80],
          50: 71,
          63: 72,
          64: 75,
          65: [1, 43],
          69: 73,
          70: 76,
          71: 77,
          72: [1, 78],
          78: 26,
          79: 27,
          80: [1, 28],
          81: [1, 29],
          82: [1, 30],
          83: [1, 31],
          84: [1, 32],
          85: [1, 34],
          86: 33
        }, {
          72: [1, 79]
        }, {
          23: [2, 42],
          33: [2, 42],
          54: [2, 42],
          65: [2, 42],
          68: [2, 42],
          72: [2, 42],
          75: [2, 42],
          80: [2, 42],
          81: [2, 42],
          82: [2, 42],
          83: [2, 42],
          84: [2, 42],
          85: [2, 42],
          87: [1, 50]
        }, {
          20: 74,
          53: 80,
          54: [2, 84],
          63: 81,
          64: 75,
          65: [1, 43],
          69: 82,
          70: 76,
          71: 77,
          72: [1, 78],
          78: 26,
          79: 27,
          80: [1, 28],
          81: [1, 29],
          82: [1, 30],
          83: [1, 31],
          84: [1, 32],
          85: [1, 34],
          86: 33
        }, {
          26: 83,
          47: [1, 66]
        }, {
          47: [2, 55]
        }, {
          4: 84,
          6: 3,
          14: [2, 46],
          15: [2, 46],
          19: [2, 46],
          29: [2, 46],
          34: [2, 46],
          39: [2, 46],
          44: [2, 46],
          47: [2, 46],
          48: [2, 46],
          51: [2, 46],
          55: [2, 46],
          60: [2, 46]
        }, {
          47: [2, 20]
        }, {
          20: 85,
          72: [1, 35],
          78: 26,
          79: 27,
          80: [1, 28],
          81: [1, 29],
          82: [1, 30],
          83: [1, 31],
          84: [1, 32],
          85: [1, 34],
          86: 33
        }, {
          4: 86,
          6: 3,
          14: [2, 46],
          15: [2, 46],
          19: [2, 46],
          29: [2, 46],
          34: [2, 46],
          47: [2, 46],
          48: [2, 46],
          51: [2, 46],
          55: [2, 46],
          60: [2, 46]
        }, {
          26: 87,
          47: [1, 66]
        }, {
          47: [2, 57]
        }, {
          5: [2, 11],
          14: [2, 11],
          15: [2, 11],
          19: [2, 11],
          29: [2, 11],
          34: [2, 11],
          39: [2, 11],
          44: [2, 11],
          47: [2, 11],
          48: [2, 11],
          51: [2, 11],
          55: [2, 11],
          60: [2, 11]
        }, {
          15: [2, 49],
          18: [2, 49]
        }, {
          20: 74,
          33: [2, 88],
          58: 88,
          63: 89,
          64: 75,
          65: [1, 43],
          69: 90,
          70: 76,
          71: 77,
          72: [1, 78],
          78: 26,
          79: 27,
          80: [1, 28],
          81: [1, 29],
          82: [1, 30],
          83: [1, 31],
          84: [1, 32],
          85: [1, 34],
          86: 33
        }, {
          65: [2, 94],
          66: 91,
          68: [2, 94],
          72: [2, 94],
          80: [2, 94],
          81: [2, 94],
          82: [2, 94],
          83: [2, 94],
          84: [2, 94],
          85: [2, 94]
        }, {
          5: [2, 25],
          14: [2, 25],
          15: [2, 25],
          19: [2, 25],
          29: [2, 25],
          34: [2, 25],
          39: [2, 25],
          44: [2, 25],
          47: [2, 25],
          48: [2, 25],
          51: [2, 25],
          55: [2, 25],
          60: [2, 25]
        }, {
          20: 92,
          72: [1, 35],
          78: 26,
          79: 27,
          80: [1, 28],
          81: [1, 29],
          82: [1, 30],
          83: [1, 31],
          84: [1, 32],
          85: [1, 34],
          86: 33
        }, {
          20: 74,
          31: 93,
          33: [2, 60],
          63: 94,
          64: 75,
          65: [1, 43],
          69: 95,
          70: 76,
          71: 77,
          72: [1, 78],
          75: [2, 60],
          78: 26,
          79: 27,
          80: [1, 28],
          81: [1, 29],
          82: [1, 30],
          83: [1, 31],
          84: [1, 32],
          85: [1, 34],
          86: 33
        }, {
          20: 74,
          33: [2, 66],
          36: 96,
          63: 97,
          64: 75,
          65: [1, 43],
          69: 98,
          70: 76,
          71: 77,
          72: [1, 78],
          75: [2, 66],
          78: 26,
          79: 27,
          80: [1, 28],
          81: [1, 29],
          82: [1, 30],
          83: [1, 31],
          84: [1, 32],
          85: [1, 34],
          86: 33
        }, {
          20: 74,
          22: 99,
          23: [2, 52],
          63: 100,
          64: 75,
          65: [1, 43],
          69: 101,
          70: 76,
          71: 77,
          72: [1, 78],
          78: 26,
          79: 27,
          80: [1, 28],
          81: [1, 29],
          82: [1, 30],
          83: [1, 31],
          84: [1, 32],
          85: [1, 34],
          86: 33
        }, {
          20: 74,
          33: [2, 92],
          62: 102,
          63: 103,
          64: 75,
          65: [1, 43],
          69: 104,
          70: 76,
          71: 77,
          72: [1, 78],
          78: 26,
          79: 27,
          80: [1, 28],
          81: [1, 29],
          82: [1, 30],
          83: [1, 31],
          84: [1, 32],
          85: [1, 34],
          86: 33
        }, {
          33: [1, 105]
        }, {
          33: [2, 79],
          65: [2, 79],
          72: [2, 79],
          80: [2, 79],
          81: [2, 79],
          82: [2, 79],
          83: [2, 79],
          84: [2, 79],
          85: [2, 79]
        }, {
          33: [2, 81]
        }, {
          23: [2, 27],
          33: [2, 27],
          54: [2, 27],
          65: [2, 27],
          68: [2, 27],
          72: [2, 27],
          75: [2, 27],
          80: [2, 27],
          81: [2, 27],
          82: [2, 27],
          83: [2, 27],
          84: [2, 27],
          85: [2, 27]
        }, {
          23: [2, 28],
          33: [2, 28],
          54: [2, 28],
          65: [2, 28],
          68: [2, 28],
          72: [2, 28],
          75: [2, 28],
          80: [2, 28],
          81: [2, 28],
          82: [2, 28],
          83: [2, 28],
          84: [2, 28],
          85: [2, 28]
        }, {
          23: [2, 30],
          33: [2, 30],
          54: [2, 30],
          68: [2, 30],
          71: 106,
          72: [1, 107],
          75: [2, 30]
        }, {
          23: [2, 98],
          33: [2, 98],
          54: [2, 98],
          68: [2, 98],
          72: [2, 98],
          75: [2, 98]
        }, {
          23: [2, 45],
          33: [2, 45],
          54: [2, 45],
          65: [2, 45],
          68: [2, 45],
          72: [2, 45],
          73: [1, 108],
          75: [2, 45],
          80: [2, 45],
          81: [2, 45],
          82: [2, 45],
          83: [2, 45],
          84: [2, 45],
          85: [2, 45],
          87: [2, 45]
        }, {
          23: [2, 44],
          33: [2, 44],
          54: [2, 44],
          65: [2, 44],
          68: [2, 44],
          72: [2, 44],
          75: [2, 44],
          80: [2, 44],
          81: [2, 44],
          82: [2, 44],
          83: [2, 44],
          84: [2, 44],
          85: [2, 44],
          87: [2, 44]
        }, {
          54: [1, 109]
        }, {
          54: [2, 83],
          65: [2, 83],
          72: [2, 83],
          80: [2, 83],
          81: [2, 83],
          82: [2, 83],
          83: [2, 83],
          84: [2, 83],
          85: [2, 83]
        }, {
          54: [2, 85]
        }, {
          5: [2, 13],
          14: [2, 13],
          15: [2, 13],
          19: [2, 13],
          29: [2, 13],
          34: [2, 13],
          39: [2, 13],
          44: [2, 13],
          47: [2, 13],
          48: [2, 13],
          51: [2, 13],
          55: [2, 13],
          60: [2, 13]
        }, {
          38: 55,
          39: [1, 57],
          43: 56,
          44: [1, 58],
          45: 111,
          46: 110,
          47: [2, 76]
        }, {
          33: [2, 70],
          40: 112,
          65: [2, 70],
          72: [2, 70],
          75: [2, 70],
          80: [2, 70],
          81: [2, 70],
          82: [2, 70],
          83: [2, 70],
          84: [2, 70],
          85: [2, 70]
        }, {
          47: [2, 18]
        }, {
          5: [2, 14],
          14: [2, 14],
          15: [2, 14],
          19: [2, 14],
          29: [2, 14],
          34: [2, 14],
          39: [2, 14],
          44: [2, 14],
          47: [2, 14],
          48: [2, 14],
          51: [2, 14],
          55: [2, 14],
          60: [2, 14]
        }, {
          33: [1, 113]
        }, {
          33: [2, 87],
          65: [2, 87],
          72: [2, 87],
          80: [2, 87],
          81: [2, 87],
          82: [2, 87],
          83: [2, 87],
          84: [2, 87],
          85: [2, 87]
        }, {
          33: [2, 89]
        }, {
          20: 74,
          63: 115,
          64: 75,
          65: [1, 43],
          67: 114,
          68: [2, 96],
          69: 116,
          70: 76,
          71: 77,
          72: [1, 78],
          78: 26,
          79: 27,
          80: [1, 28],
          81: [1, 29],
          82: [1, 30],
          83: [1, 31],
          84: [1, 32],
          85: [1, 34],
          86: 33
        }, {
          33: [1, 117]
        }, {
          32: 118,
          33: [2, 62],
          74: 119,
          75: [1, 120]
        }, {
          33: [2, 59],
          65: [2, 59],
          72: [2, 59],
          75: [2, 59],
          80: [2, 59],
          81: [2, 59],
          82: [2, 59],
          83: [2, 59],
          84: [2, 59],
          85: [2, 59]
        }, {
          33: [2, 61],
          75: [2, 61]
        }, {
          33: [2, 68],
          37: 121,
          74: 122,
          75: [1, 120]
        }, {
          33: [2, 65],
          65: [2, 65],
          72: [2, 65],
          75: [2, 65],
          80: [2, 65],
          81: [2, 65],
          82: [2, 65],
          83: [2, 65],
          84: [2, 65],
          85: [2, 65]
        }, {
          33: [2, 67],
          75: [2, 67]
        }, {
          23: [1, 123]
        }, {
          23: [2, 51],
          65: [2, 51],
          72: [2, 51],
          80: [2, 51],
          81: [2, 51],
          82: [2, 51],
          83: [2, 51],
          84: [2, 51],
          85: [2, 51]
        }, {
          23: [2, 53]
        }, {
          33: [1, 124]
        }, {
          33: [2, 91],
          65: [2, 91],
          72: [2, 91],
          80: [2, 91],
          81: [2, 91],
          82: [2, 91],
          83: [2, 91],
          84: [2, 91],
          85: [2, 91]
        }, {
          33: [2, 93]
        }, {
          5: [2, 22],
          14: [2, 22],
          15: [2, 22],
          19: [2, 22],
          29: [2, 22],
          34: [2, 22],
          39: [2, 22],
          44: [2, 22],
          47: [2, 22],
          48: [2, 22],
          51: [2, 22],
          55: [2, 22],
          60: [2, 22]
        }, {
          23: [2, 99],
          33: [2, 99],
          54: [2, 99],
          68: [2, 99],
          72: [2, 99],
          75: [2, 99]
        }, {
          73: [1, 108]
        }, {
          20: 74,
          63: 125,
          64: 75,
          65: [1, 43],
          72: [1, 35],
          78: 26,
          79: 27,
          80: [1, 28],
          81: [1, 29],
          82: [1, 30],
          83: [1, 31],
          84: [1, 32],
          85: [1, 34],
          86: 33
        }, {
          5: [2, 23],
          14: [2, 23],
          15: [2, 23],
          19: [2, 23],
          29: [2, 23],
          34: [2, 23],
          39: [2, 23],
          44: [2, 23],
          47: [2, 23],
          48: [2, 23],
          51: [2, 23],
          55: [2, 23],
          60: [2, 23]
        }, {
          47: [2, 19]
        }, {
          47: [2, 77]
        }, {
          20: 74,
          33: [2, 72],
          41: 126,
          63: 127,
          64: 75,
          65: [1, 43],
          69: 128,
          70: 76,
          71: 77,
          72: [1, 78],
          75: [2, 72],
          78: 26,
          79: 27,
          80: [1, 28],
          81: [1, 29],
          82: [1, 30],
          83: [1, 31],
          84: [1, 32],
          85: [1, 34],
          86: 33
        }, {
          5: [2, 24],
          14: [2, 24],
          15: [2, 24],
          19: [2, 24],
          29: [2, 24],
          34: [2, 24],
          39: [2, 24],
          44: [2, 24],
          47: [2, 24],
          48: [2, 24],
          51: [2, 24],
          55: [2, 24],
          60: [2, 24]
        }, {
          68: [1, 129]
        }, {
          65: [2, 95],
          68: [2, 95],
          72: [2, 95],
          80: [2, 95],
          81: [2, 95],
          82: [2, 95],
          83: [2, 95],
          84: [2, 95],
          85: [2, 95]
        }, {
          68: [2, 97]
        }, {
          5: [2, 21],
          14: [2, 21],
          15: [2, 21],
          19: [2, 21],
          29: [2, 21],
          34: [2, 21],
          39: [2, 21],
          44: [2, 21],
          47: [2, 21],
          48: [2, 21],
          51: [2, 21],
          55: [2, 21],
          60: [2, 21]
        }, {
          33: [1, 130]
        }, {
          33: [2, 63]
        }, {
          72: [1, 132],
          76: 131
        }, {
          33: [1, 133]
        }, {
          33: [2, 69]
        }, {
          15: [2, 12],
          18: [2, 12]
        }, {
          14: [2, 26],
          15: [2, 26],
          19: [2, 26],
          29: [2, 26],
          34: [2, 26],
          47: [2, 26],
          48: [2, 26],
          51: [2, 26],
          55: [2, 26],
          60: [2, 26]
        }, {
          23: [2, 31],
          33: [2, 31],
          54: [2, 31],
          68: [2, 31],
          72: [2, 31],
          75: [2, 31]
        }, {
          33: [2, 74],
          42: 134,
          74: 135,
          75: [1, 120]
        }, {
          33: [2, 71],
          65: [2, 71],
          72: [2, 71],
          75: [2, 71],
          80: [2, 71],
          81: [2, 71],
          82: [2, 71],
          83: [2, 71],
          84: [2, 71],
          85: [2, 71]
        }, {
          33: [2, 73],
          75: [2, 73]
        }, {
          23: [2, 29],
          33: [2, 29],
          54: [2, 29],
          65: [2, 29],
          68: [2, 29],
          72: [2, 29],
          75: [2, 29],
          80: [2, 29],
          81: [2, 29],
          82: [2, 29],
          83: [2, 29],
          84: [2, 29],
          85: [2, 29]
        }, {
          14: [2, 15],
          15: [2, 15],
          19: [2, 15],
          29: [2, 15],
          34: [2, 15],
          39: [2, 15],
          44: [2, 15],
          47: [2, 15],
          48: [2, 15],
          51: [2, 15],
          55: [2, 15],
          60: [2, 15]
        }, {
          72: [1, 137],
          77: [1, 136]
        }, {
          72: [2, 100],
          77: [2, 100]
        }, {
          14: [2, 16],
          15: [2, 16],
          19: [2, 16],
          29: [2, 16],
          34: [2, 16],
          44: [2, 16],
          47: [2, 16],
          48: [2, 16],
          51: [2, 16],
          55: [2, 16],
          60: [2, 16]
        }, {
          33: [1, 138]
        }, {
          33: [2, 75]
        }, {
          33: [2, 32]
        }, {
          72: [2, 101],
          77: [2, 101]
        }, {
          14: [2, 17],
          15: [2, 17],
          19: [2, 17],
          29: [2, 17],
          34: [2, 17],
          39: [2, 17],
          44: [2, 17],
          47: [2, 17],
          48: [2, 17],
          51: [2, 17],
          55: [2, 17],
          60: [2, 17]
        }],
        defaultActions: {
          4: [2, 1],
          54: [2, 55],
          56: [2, 20],
          60: [2, 57],
          73: [2, 81],
          82: [2, 85],
          86: [2, 18],
          90: [2, 89],
          101: [2, 53],
          104: [2, 93],
          110: [2, 19],
          111: [2, 77],
          116: [2, 97],
          119: [2, 63],
          122: [2, 69],
          135: [2, 75],
          136: [2, 32]
        },
        parseError: function parseError(a, b) {
          throw new Error(a);
        },
        parse: function parse(a) {
          function b() {
            var a;
            return a = c.lexer.lex() || 1, "number" != typeof a && (a = c.symbols_[a] || a), a;
          }

          var c = this,
              d = [0],
              e = [null],
              f = [],
              g = this.table,
              h = "",
              i = 0,
              j = 0,
              k = 0;
          this.lexer.setInput(a), this.lexer.yy = this.yy, this.yy.lexer = this.lexer, this.yy.parser = this, "undefined" == typeof this.lexer.yylloc && (this.lexer.yylloc = {});
          var l = this.lexer.yylloc;
          f.push(l);
          var m = this.lexer.options && this.lexer.options.ranges;
          "function" == typeof this.yy.parseError && (this.parseError = this.yy.parseError);

          for (var n, o, p, q, r, s, t, u, v, w = {};;) {
            if (p = d[d.length - 1], this.defaultActions[p] ? q = this.defaultActions[p] : (null !== n && "undefined" != typeof n || (n = b()), q = g[p] && g[p][n]), "undefined" == typeof q || !q.length || !q[0]) {
              var x = "";

              if (!k) {
                v = [];

                for (s in g[p]) {
                  this.terminals_[s] && s > 2 && v.push("'" + this.terminals_[s] + "'");
                }

                x = this.lexer.showPosition ? "Parse error on line " + (i + 1) + ":\n" + this.lexer.showPosition() + "\nExpecting " + v.join(", ") + ", got '" + (this.terminals_[n] || n) + "'" : "Parse error on line " + (i + 1) + ": Unexpected " + (1 == n ? "end of input" : "'" + (this.terminals_[n] || n) + "'"), this.parseError(x, {
                  text: this.lexer.match,
                  token: this.terminals_[n] || n,
                  line: this.lexer.yylineno,
                  loc: l,
                  expected: v
                });
              }
            }

            if (q[0] instanceof Array && q.length > 1) throw new Error("Parse Error: multiple actions possible at state: " + p + ", token: " + n);

            switch (q[0]) {
              case 1:
                d.push(n), e.push(this.lexer.yytext), f.push(this.lexer.yylloc), d.push(q[1]), n = null, o ? (n = o, o = null) : (j = this.lexer.yyleng, h = this.lexer.yytext, i = this.lexer.yylineno, l = this.lexer.yylloc, k > 0 && k--);
                break;

              case 2:
                if (t = this.productions_[q[1]][1], w.$ = e[e.length - t], w._$ = {
                  first_line: f[f.length - (t || 1)].first_line,
                  last_line: f[f.length - 1].last_line,
                  first_column: f[f.length - (t || 1)].first_column,
                  last_column: f[f.length - 1].last_column
                }, m && (w._$.range = [f[f.length - (t || 1)].range[0], f[f.length - 1].range[1]]), r = this.performAction.call(w, h, j, i, this.yy, q[1], e, f), "undefined" != typeof r) return r;
                t && (d = d.slice(0, -1 * t * 2), e = e.slice(0, -1 * t), f = f.slice(0, -1 * t)), d.push(this.productions_[q[1]][0]), e.push(w.$), f.push(w._$), u = g[d[d.length - 2]][d[d.length - 1]], d.push(u);
                break;

              case 3:
                return !0;
            }
          }

          return !0;
        }
      },
          c = function () {
        var a = {
          EOF: 1,
          parseError: function parseError(a, b) {
            if (!this.yy.parser) throw new Error(a);
            this.yy.parser.parseError(a, b);
          },
          setInput: function setInput(a) {
            return this._input = a, this._more = this._less = this.done = !1, this.yylineno = this.yyleng = 0, this.yytext = this.matched = this.match = "", this.conditionStack = ["INITIAL"], this.yylloc = {
              first_line: 1,
              first_column: 0,
              last_line: 1,
              last_column: 0
            }, this.options.ranges && (this.yylloc.range = [0, 0]), this.offset = 0, this;
          },
          input: function input() {
            var a = this._input[0];
            this.yytext += a, this.yyleng++, this.offset++, this.match += a, this.matched += a;
            var b = a.match(/(?:\r\n?|\n).*/g);
            return b ? (this.yylineno++, this.yylloc.last_line++) : this.yylloc.last_column++, this.options.ranges && this.yylloc.range[1]++, this._input = this._input.slice(1), a;
          },
          unput: function unput(a) {
            var b = a.length,
                c = a.split(/(?:\r\n?|\n)/g);
            this._input = a + this._input, this.yytext = this.yytext.substr(0, this.yytext.length - b - 1), this.offset -= b;
            var d = this.match.split(/(?:\r\n?|\n)/g);
            this.match = this.match.substr(0, this.match.length - 1), this.matched = this.matched.substr(0, this.matched.length - 1), c.length - 1 && (this.yylineno -= c.length - 1);
            var e = this.yylloc.range;
            return this.yylloc = {
              first_line: this.yylloc.first_line,
              last_line: this.yylineno + 1,
              first_column: this.yylloc.first_column,
              last_column: c ? (c.length === d.length ? this.yylloc.first_column : 0) + d[d.length - c.length].length - c[0].length : this.yylloc.first_column - b
            }, this.options.ranges && (this.yylloc.range = [e[0], e[0] + this.yyleng - b]), this;
          },
          more: function more() {
            return this._more = !0, this;
          },
          less: function less(a) {
            this.unput(this.match.slice(a));
          },
          pastInput: function pastInput() {
            var a = this.matched.substr(0, this.matched.length - this.match.length);
            return (a.length > 20 ? "..." : "") + a.substr(-20).replace(/\n/g, "");
          },
          upcomingInput: function upcomingInput() {
            var a = this.match;
            return a.length < 20 && (a += this._input.substr(0, 20 - a.length)), (a.substr(0, 20) + (a.length > 20 ? "..." : "")).replace(/\n/g, "");
          },
          showPosition: function showPosition() {
            var a = this.pastInput(),
                b = new Array(a.length + 1).join("-");
            return a + this.upcomingInput() + "\n" + b + "^";
          },
          next: function next() {
            if (this.done) return this.EOF;
            this._input || (this.done = !0);
            var a, b, c, d, e;
            this._more || (this.yytext = "", this.match = "");

            for (var f = this._currentRules(), g = 0; g < f.length && (c = this._input.match(this.rules[f[g]]), !c || b && !(c[0].length > b[0].length) || (b = c, d = g, this.options.flex)); g++) {
              ;
            }

            return b ? (e = b[0].match(/(?:\r\n?|\n).*/g), e && (this.yylineno += e.length), this.yylloc = {
              first_line: this.yylloc.last_line,
              last_line: this.yylineno + 1,
              first_column: this.yylloc.last_column,
              last_column: e ? e[e.length - 1].length - e[e.length - 1].match(/\r?\n?/)[0].length : this.yylloc.last_column + b[0].length
            }, this.yytext += b[0], this.match += b[0], this.matches = b, this.yyleng = this.yytext.length, this.options.ranges && (this.yylloc.range = [this.offset, this.offset += this.yyleng]), this._more = !1, this._input = this._input.slice(b[0].length), this.matched += b[0], a = this.performAction.call(this, this.yy, this, f[d], this.conditionStack[this.conditionStack.length - 1]), this.done && this._input && (this.done = !1), a ? a : void 0) : "" === this._input ? this.EOF : this.parseError("Lexical error on line " + (this.yylineno + 1) + ". Unrecognized text.\n" + this.showPosition(), {
              text: "",
              token: null,
              line: this.yylineno
            });
          },
          lex: function lex() {
            var a = this.next();
            return "undefined" != typeof a ? a : this.lex();
          },
          begin: function begin(a) {
            this.conditionStack.push(a);
          },
          popState: function popState() {
            return this.conditionStack.pop();
          },
          _currentRules: function _currentRules() {
            return this.conditions[this.conditionStack[this.conditionStack.length - 1]].rules;
          },
          topState: function topState() {
            return this.conditionStack[this.conditionStack.length - 2];
          },
          pushState: function pushState(a) {
            this.begin(a);
          }
        };
        return a.options = {}, a.performAction = function (a, b, c, d) {
          function e(a, c) {
            return b.yytext = b.yytext.substring(a, b.yyleng - c + a);
          }

          switch (c) {
            case 0:
              if ("\\\\" === b.yytext.slice(-2) ? (e(0, 1), this.begin("mu")) : "\\" === b.yytext.slice(-1) ? (e(0, 1), this.begin("emu")) : this.begin("mu"), b.yytext) return 15;
              break;

            case 1:
              return 15;

            case 2:
              return this.popState(), 15;

            case 3:
              return this.begin("raw"), 15;

            case 4:
              return this.popState(), "raw" === this.conditionStack[this.conditionStack.length - 1] ? 15 : (e(5, 9), "END_RAW_BLOCK");

            case 5:
              return 15;

            case 6:
              return this.popState(), 14;

            case 7:
              return 65;

            case 8:
              return 68;

            case 9:
              return 19;

            case 10:
              return this.popState(), this.begin("raw"), 23;

            case 11:
              return 55;

            case 12:
              return 60;

            case 13:
              return 29;

            case 14:
              return 47;

            case 15:
              return this.popState(), 44;

            case 16:
              return this.popState(), 44;

            case 17:
              return 34;

            case 18:
              return 39;

            case 19:
              return 51;

            case 20:
              return 48;

            case 21:
              this.unput(b.yytext), this.popState(), this.begin("com");
              break;

            case 22:
              return this.popState(), 14;

            case 23:
              return 48;

            case 24:
              return 73;

            case 25:
              return 72;

            case 26:
              return 72;

            case 27:
              return 87;

            case 28:
              break;

            case 29:
              return this.popState(), 54;

            case 30:
              return this.popState(), 33;

            case 31:
              return b.yytext = e(1, 2).replace(/\\"/g, '"'), 80;

            case 32:
              return b.yytext = e(1, 2).replace(/\\'/g, "'"), 80;

            case 33:
              return 85;

            case 34:
              return 82;

            case 35:
              return 82;

            case 36:
              return 83;

            case 37:
              return 84;

            case 38:
              return 81;

            case 39:
              return 75;

            case 40:
              return 77;

            case 41:
              return 72;

            case 42:
              return b.yytext = b.yytext.replace(/\\([\\\]])/g, "$1"), 72;

            case 43:
              return "INVALID";

            case 44:
              return 5;
          }
        }, a.rules = [/^(?:[^\x00]*?(?=(\{\{)))/, /^(?:[^\x00]+)/, /^(?:[^\x00]{2,}?(?=(\{\{|\\\{\{|\\\\\{\{|$)))/, /^(?:\{\{\{\{(?=[^\/]))/, /^(?:\{\{\{\{\/[^\s!"#%-,\.\/;->@\[-\^`\{-~]+(?=[=}\s\/.])\}\}\}\})/, /^(?:[^\x00]+?(?=(\{\{\{\{)))/, /^(?:[\s\S]*?--(~)?\}\})/, /^(?:\()/, /^(?:\))/, /^(?:\{\{\{\{)/, /^(?:\}\}\}\})/, /^(?:\{\{(~)?>)/, /^(?:\{\{(~)?#>)/, /^(?:\{\{(~)?#\*?)/, /^(?:\{\{(~)?\/)/, /^(?:\{\{(~)?\^\s*(~)?\}\})/, /^(?:\{\{(~)?\s*else\s*(~)?\}\})/, /^(?:\{\{(~)?\^)/, /^(?:\{\{(~)?\s*else\b)/, /^(?:\{\{(~)?\{)/, /^(?:\{\{(~)?&)/, /^(?:\{\{(~)?!--)/, /^(?:\{\{(~)?![\s\S]*?\}\})/, /^(?:\{\{(~)?\*?)/, /^(?:=)/, /^(?:\.\.)/, /^(?:\.(?=([=~}\s\/.)|])))/, /^(?:[\/.])/, /^(?:\s+)/, /^(?:\}(~)?\}\})/, /^(?:(~)?\}\})/, /^(?:"(\\["]|[^"])*")/, /^(?:'(\\[']|[^'])*')/, /^(?:@)/, /^(?:true(?=([~}\s)])))/, /^(?:false(?=([~}\s)])))/, /^(?:undefined(?=([~}\s)])))/, /^(?:null(?=([~}\s)])))/, /^(?:-?[0-9]+(?:\.[0-9]+)?(?=([~}\s)])))/, /^(?:as\s+\|)/, /^(?:\|)/, /^(?:([^\s!"#%-,\.\/;->@\[-\^`\{-~]+(?=([=~}\s\/.)|]))))/, /^(?:\[(\\\]|[^\]])*\])/, /^(?:.)/, /^(?:$)/], a.conditions = {
          mu: {
            rules: [7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44],
            inclusive: !1
          },
          emu: {
            rules: [2],
            inclusive: !1
          },
          com: {
            rules: [6],
            inclusive: !1
          },
          raw: {
            rules: [3, 4, 5],
            inclusive: !1
          },
          INITIAL: {
            rules: [0, 1, 44],
            inclusive: !0
          }
        }, a;
      }();

      return b.lexer = c, a.prototype = b, b.Parser = a, new a();
    }();

    b["default"] = c, a.exports = b["default"];
  }, function (a, b, c) {
    "use strict";

    function d() {
      var a = arguments.length <= 0 || void 0 === arguments[0] ? {} : arguments[0];
      this.options = a;
    }

    function e(a, b, c) {
      void 0 === b && (b = a.length);
      var d = a[b - 1],
          e = a[b - 2];
      return d ? "ContentStatement" === d.type ? (e || !c ? /\r?\n\s*?$/ : /(^|\r?\n)\s*?$/).test(d.original) : void 0 : c;
    }

    function f(a, b, c) {
      void 0 === b && (b = -1);
      var d = a[b + 1],
          e = a[b + 2];
      return d ? "ContentStatement" === d.type ? (e || !c ? /^\s*?\r?\n/ : /^\s*?(\r?\n|$)/).test(d.original) : void 0 : c;
    }

    function g(a, b, c) {
      var d = a[null == b ? 0 : b + 1];

      if (d && "ContentStatement" === d.type && (c || !d.rightStripped)) {
        var e = d.value;
        d.value = d.value.replace(c ? /^\s+/ : /^[ \t]*\r?\n?/, ""), d.rightStripped = d.value !== e;
      }
    }

    function h(a, b, c) {
      var d = a[null == b ? a.length - 1 : b - 1];

      if (d && "ContentStatement" === d.type && (c || !d.leftStripped)) {
        var e = d.value;
        return d.value = d.value.replace(c ? /\s+$/ : /[ \t]+$/, ""), d.leftStripped = d.value !== e, d.leftStripped;
      }
    }

    var i = c(1)["default"];
    b.__esModule = !0;
    var j = c(49),
        k = i(j);
    d.prototype = new k["default"](), d.prototype.Program = function (a) {
      var b = !this.options.ignoreStandalone,
          c = !this.isRootSeen;
      this.isRootSeen = !0;

      for (var d = a.body, i = 0, j = d.length; i < j; i++) {
        var k = d[i],
            l = this.accept(k);

        if (l) {
          var m = e(d, i, c),
              n = f(d, i, c),
              o = l.openStandalone && m,
              p = l.closeStandalone && n,
              q = l.inlineStandalone && m && n;
          l.close && g(d, i, !0), l.open && h(d, i, !0), b && q && (g(d, i), h(d, i) && "PartialStatement" === k.type && (k.indent = /([ \t]+$)/.exec(d[i - 1].original)[1])), b && o && (g((k.program || k.inverse).body), h(d, i)), b && p && (g(d, i), h((k.inverse || k.program).body));
        }
      }

      return a;
    }, d.prototype.BlockStatement = d.prototype.DecoratorBlock = d.prototype.PartialBlockStatement = function (a) {
      this.accept(a.program), this.accept(a.inverse);
      var b = a.program || a.inverse,
          c = a.program && a.inverse,
          d = c,
          i = c;
      if (c && c.chained) for (d = c.body[0].program; i.chained;) {
        i = i.body[i.body.length - 1].program;
      }
      var j = {
        open: a.openStrip.open,
        close: a.closeStrip.close,
        openStandalone: f(b.body),
        closeStandalone: e((d || b).body)
      };

      if (a.openStrip.close && g(b.body, null, !0), c) {
        var k = a.inverseStrip;
        k.open && h(b.body, null, !0), k.close && g(d.body, null, !0), a.closeStrip.open && h(i.body, null, !0), !this.options.ignoreStandalone && e(b.body) && f(d.body) && (h(b.body), g(d.body));
      } else a.closeStrip.open && h(b.body, null, !0);

      return j;
    }, d.prototype.Decorator = d.prototype.MustacheStatement = function (a) {
      return a.strip;
    }, d.prototype.PartialStatement = d.prototype.CommentStatement = function (a) {
      var b = a.strip || {};
      return {
        inlineStandalone: !0,
        open: b.open,
        close: b.close
      };
    }, b["default"] = d, a.exports = b["default"];
  }, function (a, b, c) {
    "use strict";

    function d() {
      this.parents = [];
    }

    function e(a) {
      this.acceptRequired(a, "path"), this.acceptArray(a.params), this.acceptKey(a, "hash");
    }

    function f(a) {
      e.call(this, a), this.acceptKey(a, "program"), this.acceptKey(a, "inverse");
    }

    function g(a) {
      this.acceptRequired(a, "name"), this.acceptArray(a.params), this.acceptKey(a, "hash");
    }

    var h = c(1)["default"];
    b.__esModule = !0;
    var i = c(6),
        j = h(i);
    d.prototype = {
      constructor: d,
      mutating: !1,
      acceptKey: function acceptKey(a, b) {
        var c = this.accept(a[b]);

        if (this.mutating) {
          if (c && !d.prototype[c.type]) throw new j["default"]('Unexpected node type "' + c.type + '" found when accepting ' + b + " on " + a.type);
          a[b] = c;
        }
      },
      acceptRequired: function acceptRequired(a, b) {
        if (this.acceptKey(a, b), !a[b]) throw new j["default"](a.type + " requires " + b);
      },
      acceptArray: function acceptArray(a) {
        for (var b = 0, c = a.length; b < c; b++) {
          this.acceptKey(a, b), a[b] || (a.splice(b, 1), b--, c--);
        }
      },
      accept: function accept(a) {
        if (a) {
          if (!this[a.type]) throw new j["default"]("Unknown type: " + a.type, a);
          this.current && this.parents.unshift(this.current), this.current = a;
          var b = this[a.type](a);
          return this.current = this.parents.shift(), !this.mutating || b ? b : b !== !1 ? a : void 0;
        }
      },
      Program: function Program(a) {
        this.acceptArray(a.body);
      },
      MustacheStatement: e,
      Decorator: e,
      BlockStatement: f,
      DecoratorBlock: f,
      PartialStatement: g,
      PartialBlockStatement: function PartialBlockStatement(a) {
        g.call(this, a), this.acceptKey(a, "program");
      },
      ContentStatement: function ContentStatement() {},
      CommentStatement: function CommentStatement() {},
      SubExpression: e,
      PathExpression: function PathExpression() {},
      StringLiteral: function StringLiteral() {},
      NumberLiteral: function NumberLiteral() {},
      BooleanLiteral: function BooleanLiteral() {},
      UndefinedLiteral: function UndefinedLiteral() {},
      NullLiteral: function NullLiteral() {},
      Hash: function Hash(a) {
        this.acceptArray(a.pairs);
      },
      HashPair: function HashPair(a) {
        this.acceptRequired(a, "value");
      }
    }, b["default"] = d, a.exports = b["default"];
  }, function (a, b, c) {
    "use strict";

    function d(a, b) {
      if (b = b.path ? b.path.original : b, a.path.original !== b) {
        var c = {
          loc: a.path.loc
        };
        throw new q["default"](a.path.original + " doesn't match " + b, c);
      }
    }

    function e(a, b) {
      this.source = a, this.start = {
        line: b.first_line,
        column: b.first_column
      }, this.end = {
        line: b.last_line,
        column: b.last_column
      };
    }

    function f(a) {
      return /^\[.*\]$/.test(a) ? a.substring(1, a.length - 1) : a;
    }

    function g(a, b) {
      return {
        open: "~" === a.charAt(2),
        close: "~" === b.charAt(b.length - 3)
      };
    }

    function h(a) {
      return a.replace(/^\{\{~?!-?-?/, "").replace(/-?-?~?\}\}$/, "");
    }

    function i(a, b, c) {
      c = this.locInfo(c);

      for (var d = a ? "@" : "", e = [], f = 0, g = 0, h = b.length; g < h; g++) {
        var i = b[g].part,
            j = b[g].original !== i;
        if (d += (b[g].separator || "") + i, j || ".." !== i && "." !== i && "this" !== i) e.push(i);else {
          if (e.length > 0) throw new q["default"]("Invalid path: " + d, {
            loc: c
          });
          ".." === i && f++;
        }
      }

      return {
        type: "PathExpression",
        data: a,
        depth: f,
        parts: e,
        original: d,
        loc: c
      };
    }

    function j(a, b, c, d, e, f) {
      var g = d.charAt(3) || d.charAt(2),
          h = "{" !== g && "&" !== g,
          i = /\*/.test(d);
      return {
        type: i ? "Decorator" : "MustacheStatement",
        path: a,
        params: b,
        hash: c,
        escaped: h,
        strip: e,
        loc: this.locInfo(f)
      };
    }

    function k(a, b, c, e) {
      d(a, c), e = this.locInfo(e);
      var f = {
        type: "Program",
        body: b,
        strip: {},
        loc: e
      };
      return {
        type: "BlockStatement",
        path: a.path,
        params: a.params,
        hash: a.hash,
        program: f,
        openStrip: {},
        inverseStrip: {},
        closeStrip: {},
        loc: e
      };
    }

    function l(a, b, c, e, f, g) {
      e && e.path && d(a, e);
      var h = /\*/.test(a.open);
      b.blockParams = a.blockParams;
      var i = void 0,
          j = void 0;

      if (c) {
        if (h) throw new q["default"]("Unexpected inverse block on decorator", c);
        c.chain && (c.program.body[0].closeStrip = e.strip), j = c.strip, i = c.program;
      }

      return f && (f = i, i = b, b = f), {
        type: h ? "DecoratorBlock" : "BlockStatement",
        path: a.path,
        params: a.params,
        hash: a.hash,
        program: b,
        inverse: i,
        openStrip: a.strip,
        inverseStrip: j,
        closeStrip: e && e.strip,
        loc: this.locInfo(g)
      };
    }

    function m(a, b) {
      if (!b && a.length) {
        var c = a[0].loc,
            d = a[a.length - 1].loc;
        c && d && (b = {
          source: c.source,
          start: {
            line: c.start.line,
            column: c.start.column
          },
          end: {
            line: d.end.line,
            column: d.end.column
          }
        });
      }

      return {
        type: "Program",
        body: a,
        strip: {},
        loc: b
      };
    }

    function n(a, b, c, e) {
      return d(a, c), {
        type: "PartialBlockStatement",
        name: a.path,
        params: a.params,
        hash: a.hash,
        program: b,
        openStrip: a.strip,
        closeStrip: c && c.strip,
        loc: this.locInfo(e)
      };
    }

    var o = c(1)["default"];
    b.__esModule = !0, b.SourceLocation = e, b.id = f, b.stripFlags = g, b.stripComment = h, b.preparePath = i, b.prepareMustache = j, b.prepareRawBlock = k, b.prepareBlock = l, b.prepareProgram = m, b.preparePartialBlock = n;
    var p = c(6),
        q = o(p);
  }, function (a, b, c) {
    "use strict";

    function d() {}

    function e(a, b, c) {
      if (null == a || "string" != typeof a && "Program" !== a.type) throw new l["default"]("You must pass a string or Handlebars AST to Handlebars.precompile. You passed " + a);
      b = b || {}, "data" in b || (b.data = !0), b.compat && (b.useDepths = !0);
      var d = c.parse(a, b),
          e = new c.Compiler().compile(d, b);
      return new c.JavaScriptCompiler().compile(e, b);
    }

    function f(a, b, c) {
      function d() {
        var d = c.parse(a, b),
            e = new c.Compiler().compile(d, b),
            f = new c.JavaScriptCompiler().compile(e, b, void 0, !0);
        return c.template(f);
      }

      function e(a, b) {
        return f || (f = d()), f.call(this, a, b);
      }

      if (void 0 === b && (b = {}), null == a || "string" != typeof a && "Program" !== a.type) throw new l["default"]("You must pass a string or Handlebars AST to Handlebars.compile. You passed " + a);
      b = m.extend({}, b), "data" in b || (b.data = !0), b.compat && (b.useDepths = !0);
      var f = void 0;
      return e._setup = function (a) {
        return f || (f = d()), f._setup(a);
      }, e._child = function (a, b, c, e) {
        return f || (f = d()), f._child(a, b, c, e);
      }, e;
    }

    function g(a, b) {
      if (a === b) return !0;

      if (m.isArray(a) && m.isArray(b) && a.length === b.length) {
        for (var c = 0; c < a.length; c++) {
          if (!g(a[c], b[c])) return !1;
        }

        return !0;
      }
    }

    function h(a) {
      if (!a.path.parts) {
        var b = a.path;
        a.path = {
          type: "PathExpression",
          data: !1,
          depth: 0,
          parts: [b.original + ""],
          original: b.original + "",
          loc: b.loc
        };
      }
    }

    var i = c(34)["default"],
        j = c(1)["default"];
    b.__esModule = !0, b.Compiler = d, b.precompile = e, b.compile = f;
    var k = c(6),
        l = j(k),
        m = c(5),
        n = c(45),
        o = j(n),
        p = [].slice;
    d.prototype = {
      compiler: d,
      equals: function equals(a) {
        var b = this.opcodes.length;
        if (a.opcodes.length !== b) return !1;

        for (var c = 0; c < b; c++) {
          var d = this.opcodes[c],
              e = a.opcodes[c];
          if (d.opcode !== e.opcode || !g(d.args, e.args)) return !1;
        }

        b = this.children.length;

        for (var c = 0; c < b; c++) {
          if (!this.children[c].equals(a.children[c])) return !1;
        }

        return !0;
      },
      guid: 0,
      compile: function compile(a, b) {
        return this.sourceNode = [], this.opcodes = [], this.children = [], this.options = b, this.stringParams = b.stringParams, this.trackIds = b.trackIds, b.blockParams = b.blockParams || [], b.knownHelpers = m.extend(i(null), {
          helperMissing: !0,
          blockHelperMissing: !0,
          each: !0,
          "if": !0,
          unless: !0,
          "with": !0,
          log: !0,
          lookup: !0
        }, b.knownHelpers), this.accept(a);
      },
      compileProgram: function compileProgram(a) {
        var b = new this.compiler(),
            c = b.compile(a, this.options),
            d = this.guid++;
        return this.usePartial = this.usePartial || c.usePartial, this.children[d] = c, this.useDepths = this.useDepths || c.useDepths, d;
      },
      accept: function accept(a) {
        if (!this[a.type]) throw new l["default"]("Unknown type: " + a.type, a);
        this.sourceNode.unshift(a);
        var b = this[a.type](a);
        return this.sourceNode.shift(), b;
      },
      Program: function Program(a) {
        this.options.blockParams.unshift(a.blockParams);

        for (var b = a.body, c = b.length, d = 0; d < c; d++) {
          this.accept(b[d]);
        }

        return this.options.blockParams.shift(), this.isSimple = 1 === c, this.blockParams = a.blockParams ? a.blockParams.length : 0, this;
      },
      BlockStatement: function BlockStatement(a) {
        h(a);
        var b = a.program,
            c = a.inverse;
        b = b && this.compileProgram(b), c = c && this.compileProgram(c);
        var d = this.classifySexpr(a);
        "helper" === d ? this.helperSexpr(a, b, c) : "simple" === d ? (this.simpleSexpr(a), this.opcode("pushProgram", b), this.opcode("pushProgram", c), this.opcode("emptyHash"), this.opcode("blockValue", a.path.original)) : (this.ambiguousSexpr(a, b, c), this.opcode("pushProgram", b), this.opcode("pushProgram", c), this.opcode("emptyHash"), this.opcode("ambiguousBlockValue")), this.opcode("append");
      },
      DecoratorBlock: function DecoratorBlock(a) {
        var b = a.program && this.compileProgram(a.program),
            c = this.setupFullMustacheParams(a, b, void 0),
            d = a.path;
        this.useDecorators = !0, this.opcode("registerDecorator", c.length, d.original);
      },
      PartialStatement: function PartialStatement(a) {
        this.usePartial = !0;
        var b = a.program;
        b && (b = this.compileProgram(a.program));
        var c = a.params;
        if (c.length > 1) throw new l["default"]("Unsupported number of partial arguments: " + c.length, a);
        c.length || (this.options.explicitPartialContext ? this.opcode("pushLiteral", "undefined") : c.push({
          type: "PathExpression",
          parts: [],
          depth: 0
        }));
        var d = a.name.original,
            e = "SubExpression" === a.name.type;
        e && this.accept(a.name), this.setupFullMustacheParams(a, b, void 0, !0);
        var f = a.indent || "";
        this.options.preventIndent && f && (this.opcode("appendContent", f), f = ""), this.opcode("invokePartial", e, d, f), this.opcode("append");
      },
      PartialBlockStatement: function PartialBlockStatement(a) {
        this.PartialStatement(a);
      },
      MustacheStatement: function MustacheStatement(a) {
        this.SubExpression(a), a.escaped && !this.options.noEscape ? this.opcode("appendEscaped") : this.opcode("append");
      },
      Decorator: function Decorator(a) {
        this.DecoratorBlock(a);
      },
      ContentStatement: function ContentStatement(a) {
        a.value && this.opcode("appendContent", a.value);
      },
      CommentStatement: function CommentStatement() {},
      SubExpression: function SubExpression(a) {
        h(a);
        var b = this.classifySexpr(a);
        "simple" === b ? this.simpleSexpr(a) : "helper" === b ? this.helperSexpr(a) : this.ambiguousSexpr(a);
      },
      ambiguousSexpr: function ambiguousSexpr(a, b, c) {
        var d = a.path,
            e = d.parts[0],
            f = null != b || null != c;
        this.opcode("getContext", d.depth), this.opcode("pushProgram", b), this.opcode("pushProgram", c), d.strict = !0, this.accept(d), this.opcode("invokeAmbiguous", e, f);
      },
      simpleSexpr: function simpleSexpr(a) {
        var b = a.path;
        b.strict = !0, this.accept(b), this.opcode("resolvePossibleLambda");
      },
      helperSexpr: function helperSexpr(a, b, c) {
        var d = this.setupFullMustacheParams(a, b, c),
            e = a.path,
            f = e.parts[0];
        if (this.options.knownHelpers[f]) this.opcode("invokeKnownHelper", d.length, f);else {
          if (this.options.knownHelpersOnly) throw new l["default"]("You specified knownHelpersOnly, but used the unknown helper " + f, a);
          e.strict = !0, e.falsy = !0, this.accept(e), this.opcode("invokeHelper", d.length, e.original, o["default"].helpers.simpleId(e));
        }
      },
      PathExpression: function PathExpression(a) {
        this.addDepth(a.depth), this.opcode("getContext", a.depth);
        var b = a.parts[0],
            c = o["default"].helpers.scopedId(a),
            d = !a.depth && !c && this.blockParamIndex(b);
        d ? this.opcode("lookupBlockParam", d, a.parts) : b ? a.data ? (this.options.data = !0, this.opcode("lookupData", a.depth, a.parts, a.strict)) : this.opcode("lookupOnContext", a.parts, a.falsy, a.strict, c) : this.opcode("pushContext");
      },
      StringLiteral: function StringLiteral(a) {
        this.opcode("pushString", a.value);
      },
      NumberLiteral: function NumberLiteral(a) {
        this.opcode("pushLiteral", a.value);
      },
      BooleanLiteral: function BooleanLiteral(a) {
        this.opcode("pushLiteral", a.value);
      },
      UndefinedLiteral: function UndefinedLiteral() {
        this.opcode("pushLiteral", "undefined");
      },
      NullLiteral: function NullLiteral() {
        this.opcode("pushLiteral", "null");
      },
      Hash: function Hash(a) {
        var b = a.pairs,
            c = 0,
            d = b.length;

        for (this.opcode("pushHash"); c < d; c++) {
          this.pushParam(b[c].value);
        }

        for (; c--;) {
          this.opcode("assignToHash", b[c].key);
        }

        this.opcode("popHash");
      },
      opcode: function opcode(a) {
        this.opcodes.push({
          opcode: a,
          args: p.call(arguments, 1),
          loc: this.sourceNode[0].loc
        });
      },
      addDepth: function addDepth(a) {
        a && (this.useDepths = !0);
      },
      classifySexpr: function classifySexpr(a) {
        var b = o["default"].helpers.simpleId(a.path),
            c = b && !!this.blockParamIndex(a.path.parts[0]),
            d = !c && o["default"].helpers.helperExpression(a),
            e = !c && (d || b);

        if (e && !d) {
          var f = a.path.parts[0],
              g = this.options;
          g.knownHelpers[f] ? d = !0 : g.knownHelpersOnly && (e = !1);
        }

        return d ? "helper" : e ? "ambiguous" : "simple";
      },
      pushParams: function pushParams(a) {
        for (var b = 0, c = a.length; b < c; b++) {
          this.pushParam(a[b]);
        }
      },
      pushParam: function pushParam(a) {
        var b = null != a.value ? a.value : a.original || "";
        if (this.stringParams) b.replace && (b = b.replace(/^(\.?\.\/)*/g, "").replace(/\//g, ".")), a.depth && this.addDepth(a.depth), this.opcode("getContext", a.depth || 0), this.opcode("pushStringParam", b, a.type), "SubExpression" === a.type && this.accept(a);else {
          if (this.trackIds) {
            var c = void 0;

            if (!a.parts || o["default"].helpers.scopedId(a) || a.depth || (c = this.blockParamIndex(a.parts[0])), c) {
              var d = a.parts.slice(1).join(".");
              this.opcode("pushId", "BlockParam", c, d);
            } else b = a.original || b, b.replace && (b = b.replace(/^this(?:\.|$)/, "").replace(/^\.\//, "").replace(/^\.$/, "")), this.opcode("pushId", a.type, b);
          }

          this.accept(a);
        }
      },
      setupFullMustacheParams: function setupFullMustacheParams(a, b, c, d) {
        var e = a.params;
        return this.pushParams(e), this.opcode("pushProgram", b), this.opcode("pushProgram", c), a.hash ? this.accept(a.hash) : this.opcode("emptyHash", d), e;
      },
      blockParamIndex: function blockParamIndex(a) {
        for (var b = 0, c = this.options.blockParams.length; b < c; b++) {
          var d = this.options.blockParams[b],
              e = d && m.indexOf(d, a);
          if (d && e >= 0) return [b, e];
        }
      }
    };
  }, function (a, b, c) {
    "use strict";

    function d(a) {
      this.value = a;
    }

    function e() {}

    function f(a, b, c, d) {
      var e = b.popStack(),
          f = 0,
          g = c.length;

      for (a && g--; f < g; f++) {
        e = b.nameLookup(e, c[f], d);
      }

      return a ? [b.aliasable("container.strict"), "(", e, ", ", b.quotedString(c[f]), ", ", JSON.stringify(b.source.currentLocation), " )"] : e;
    }

    var g = c(13)["default"],
        h = c(1)["default"];
    b.__esModule = !0;
    var i = c(4),
        j = c(6),
        k = h(j),
        l = c(5),
        m = c(53),
        n = h(m);
    e.prototype = {
      nameLookup: function nameLookup(a, b) {
        return this.internalNameLookup(a, b);
      },
      depthedLookup: function depthedLookup(a) {
        return [this.aliasable("container.lookup"), "(depths, ", JSON.stringify(a), ")"];
      },
      compilerInfo: function compilerInfo() {
        var a = i.COMPILER_REVISION,
            b = i.REVISION_CHANGES[a];
        return [a, b];
      },
      appendToBuffer: function appendToBuffer(a, b, c) {
        return l.isArray(a) || (a = [a]), a = this.source.wrap(a, b), this.environment.isSimple ? ["return ", a, ";"] : c ? ["buffer += ", a, ";"] : (a.appendToBuffer = !0, a);
      },
      initializeBuffer: function initializeBuffer() {
        return this.quotedString("");
      },
      internalNameLookup: function internalNameLookup(a, b) {
        return this.lookupPropertyFunctionIsUsed = !0, ["lookupProperty(", a, ",", JSON.stringify(b), ")"];
      },
      lookupPropertyFunctionIsUsed: !1,
      compile: function compile(a, b, c, d) {
        this.environment = a, this.options = b, this.stringParams = this.options.stringParams, this.trackIds = this.options.trackIds, this.precompile = !d, this.name = this.environment.name, this.isChild = !!c, this.context = c || {
          decorators: [],
          programs: [],
          environments: []
        }, this.preamble(), this.stackSlot = 0, this.stackVars = [], this.aliases = {}, this.registers = {
          list: []
        }, this.hashes = [], this.compileStack = [], this.inlineStack = [], this.blockParams = [], this.compileChildren(a, b), this.useDepths = this.useDepths || a.useDepths || a.useDecorators || this.options.compat, this.useBlockParams = this.useBlockParams || a.useBlockParams;
        var e = a.opcodes,
            f = void 0,
            g = void 0,
            h = void 0,
            i = void 0;

        for (h = 0, i = e.length; h < i; h++) {
          f = e[h], this.source.currentLocation = f.loc, g = g || f.loc, this[f.opcode].apply(this, f.args);
        }

        if (this.source.currentLocation = g, this.pushSource(""), this.stackSlot || this.inlineStack.length || this.compileStack.length) throw new k["default"]("Compile completed with content left on stack");
        this.decorators.isEmpty() ? this.decorators = void 0 : (this.useDecorators = !0, this.decorators.prepend(["var decorators = container.decorators, ", this.lookupPropertyFunctionVarDeclaration(), ";\n"]), this.decorators.push("return fn;"), d ? this.decorators = Function.apply(this, ["fn", "props", "container", "depth0", "data", "blockParams", "depths", this.decorators.merge()]) : (this.decorators.prepend("function(fn, props, container, depth0, data, blockParams, depths) {\n"), this.decorators.push("}\n"), this.decorators = this.decorators.merge()));
        var j = this.createFunctionContext(d);
        if (this.isChild) return j;
        var l = {
          compiler: this.compilerInfo(),
          main: j
        };
        this.decorators && (l.main_d = this.decorators, l.useDecorators = !0);
        var m = this.context,
            n = m.programs,
            o = m.decorators;

        for (h = 0, i = n.length; h < i; h++) {
          n[h] && (l[h] = n[h], o[h] && (l[h + "_d"] = o[h], l.useDecorators = !0));
        }

        return this.environment.usePartial && (l.usePartial = !0), this.options.data && (l.useData = !0), this.useDepths && (l.useDepths = !0), this.useBlockParams && (l.useBlockParams = !0), this.options.compat && (l.compat = !0), d ? l.compilerOptions = this.options : (l.compiler = JSON.stringify(l.compiler), this.source.currentLocation = {
          start: {
            line: 1,
            column: 0
          }
        }, l = this.objectLiteral(l), b.srcName ? (l = l.toStringWithSourceMap({
          file: b.destName
        }), l.map = l.map && l.map.toString()) : l = l.toString()), l;
      },
      preamble: function preamble() {
        this.lastContext = 0, this.source = new n["default"](this.options.srcName), this.decorators = new n["default"](this.options.srcName);
      },
      createFunctionContext: function createFunctionContext(a) {
        var b = this,
            c = "",
            d = this.stackVars.concat(this.registers.list);
        d.length > 0 && (c += ", " + d.join(", "));
        var e = 0;
        g(this.aliases).forEach(function (a) {
          var d = b.aliases[a];
          d.children && d.referenceCount > 1 && (c += ", alias" + ++e + "=" + a, d.children[0] = "alias" + e);
        }), this.lookupPropertyFunctionIsUsed && (c += ", " + this.lookupPropertyFunctionVarDeclaration());
        var f = ["container", "depth0", "helpers", "partials", "data"];
        (this.useBlockParams || this.useDepths) && f.push("blockParams"), this.useDepths && f.push("depths");
        var h = this.mergeSource(c);
        return a ? (f.push(h), Function.apply(this, f)) : this.source.wrap(["function(", f.join(","), ") {\n  ", h, "}"]);
      },
      mergeSource: function mergeSource(a) {
        var b = this.environment.isSimple,
            c = !this.forceBuffer,
            d = void 0,
            e = void 0,
            f = void 0,
            g = void 0;
        return this.source.each(function (a) {
          a.appendToBuffer ? (f ? a.prepend("  + ") : f = a, g = a) : (f && (e ? f.prepend("buffer += ") : d = !0, g.add(";"), f = g = void 0), e = !0, b || (c = !1));
        }), c ? f ? (f.prepend("return "), g.add(";")) : e || this.source.push('return "";') : (a += ", buffer = " + (d ? "" : this.initializeBuffer()), f ? (f.prepend("return buffer + "), g.add(";")) : this.source.push("return buffer;")), a && this.source.prepend("var " + a.substring(2) + (d ? "" : ";\n")), this.source.merge();
      },
      lookupPropertyFunctionVarDeclaration: function lookupPropertyFunctionVarDeclaration() {
        return "\n      lookupProperty = container.lookupProperty || function(parent, propertyName) {\n        if (Object.prototype.hasOwnProperty.call(parent, propertyName)) {\n          return parent[propertyName];\n        }\n        return undefined\n    }\n    ".trim();
      },
      blockValue: function blockValue(a) {
        var b = this.aliasable("container.hooks.blockHelperMissing"),
            c = [this.contextName(0)];
        this.setupHelperArgs(a, 0, c);
        var d = this.popStack();
        c.splice(1, 0, d), this.push(this.source.functionCall(b, "call", c));
      },
      ambiguousBlockValue: function ambiguousBlockValue() {
        var a = this.aliasable("container.hooks.blockHelperMissing"),
            b = [this.contextName(0)];
        this.setupHelperArgs("", 0, b, !0), this.flushInline();
        var c = this.topStack();
        b.splice(1, 0, c), this.pushSource(["if (!", this.lastHelper, ") { ", c, " = ", this.source.functionCall(a, "call", b), "}"]);
      },
      appendContent: function appendContent(a) {
        this.pendingContent ? a = this.pendingContent + a : this.pendingLocation = this.source.currentLocation, this.pendingContent = a;
      },
      append: function append() {
        if (this.isInline()) this.replaceStack(function (a) {
          return [" != null ? ", a, ' : ""'];
        }), this.pushSource(this.appendToBuffer(this.popStack()));else {
          var a = this.popStack();
          this.pushSource(["if (", a, " != null) { ", this.appendToBuffer(a, void 0, !0), " }"]), this.environment.isSimple && this.pushSource(["else { ", this.appendToBuffer("''", void 0, !0), " }"]);
        }
      },
      appendEscaped: function appendEscaped() {
        this.pushSource(this.appendToBuffer([this.aliasable("container.escapeExpression"), "(", this.popStack(), ")"]));
      },
      getContext: function getContext(a) {
        this.lastContext = a;
      },
      pushContext: function pushContext() {
        this.pushStackLiteral(this.contextName(this.lastContext));
      },
      lookupOnContext: function lookupOnContext(a, b, c, d) {
        var e = 0;
        d || !this.options.compat || this.lastContext ? this.pushContext() : this.push(this.depthedLookup(a[e++])), this.resolvePath("context", a, e, b, c);
      },
      lookupBlockParam: function lookupBlockParam(a, b) {
        this.useBlockParams = !0, this.push(["blockParams[", a[0], "][", a[1], "]"]), this.resolvePath("context", b, 1);
      },
      lookupData: function lookupData(a, b, c) {
        a ? this.pushStackLiteral("container.data(data, " + a + ")") : this.pushStackLiteral("data"), this.resolvePath("data", b, 0, !0, c);
      },
      resolvePath: function resolvePath(a, b, c, d, e) {
        var g = this;
        if (this.options.strict || this.options.assumeObjects) return void this.push(f(this.options.strict && e, this, b, a));

        for (var h = b.length; c < h; c++) {
          this.replaceStack(function (e) {
            var f = g.nameLookup(e, b[c], a);
            return d ? [" && ", f] : [" != null ? ", f, " : ", e];
          });
        }
      },
      resolvePossibleLambda: function resolvePossibleLambda() {
        this.push([this.aliasable("container.lambda"), "(", this.popStack(), ", ", this.contextName(0), ")"]);
      },
      pushStringParam: function pushStringParam(a, b) {
        this.pushContext(), this.pushString(b), "SubExpression" !== b && ("string" == typeof a ? this.pushString(a) : this.pushStackLiteral(a));
      },
      emptyHash: function emptyHash(a) {
        this.trackIds && this.push("{}"), this.stringParams && (this.push("{}"), this.push("{}")), this.pushStackLiteral(a ? "undefined" : "{}");
      },
      pushHash: function pushHash() {
        this.hash && this.hashes.push(this.hash), this.hash = {
          values: {},
          types: [],
          contexts: [],
          ids: []
        };
      },
      popHash: function popHash() {
        var a = this.hash;
        this.hash = this.hashes.pop(), this.trackIds && this.push(this.objectLiteral(a.ids)), this.stringParams && (this.push(this.objectLiteral(a.contexts)), this.push(this.objectLiteral(a.types))), this.push(this.objectLiteral(a.values));
      },
      pushString: function pushString(a) {
        this.pushStackLiteral(this.quotedString(a));
      },
      pushLiteral: function pushLiteral(a) {
        this.pushStackLiteral(a);
      },
      pushProgram: function pushProgram(a) {
        null != a ? this.pushStackLiteral(this.programExpression(a)) : this.pushStackLiteral(null);
      },
      registerDecorator: function registerDecorator(a, b) {
        var c = this.nameLookup("decorators", b, "decorator"),
            d = this.setupHelperArgs(b, a);
        this.decorators.push(["fn = ", this.decorators.functionCall(c, "", ["fn", "props", "container", d]), " || fn;"]);
      },
      invokeHelper: function invokeHelper(a, b, c) {
        var d = this.popStack(),
            e = this.setupHelper(a, b),
            f = [];
        c && f.push(e.name), f.push(d), this.options.strict || f.push(this.aliasable("container.hooks.helperMissing"));
        var g = ["(", this.itemsSeparatedBy(f, "||"), ")"],
            h = this.source.functionCall(g, "call", e.callParams);
        this.push(h);
      },
      itemsSeparatedBy: function itemsSeparatedBy(a, b) {
        var c = [];
        c.push(a[0]);

        for (var d = 1; d < a.length; d++) {
          c.push(b, a[d]);
        }

        return c;
      },
      invokeKnownHelper: function invokeKnownHelper(a, b) {
        var c = this.setupHelper(a, b);
        this.push(this.source.functionCall(c.name, "call", c.callParams));
      },
      invokeAmbiguous: function invokeAmbiguous(a, b) {
        this.useRegister("helper");
        var c = this.popStack();
        this.emptyHash();
        var d = this.setupHelper(0, a, b),
            e = this.lastHelper = this.nameLookup("helpers", a, "helper"),
            f = ["(", "(helper = ", e, " || ", c, ")"];
        this.options.strict || (f[0] = "(helper = ", f.push(" != null ? helper : ", this.aliasable("container.hooks.helperMissing"))), this.push(["(", f, d.paramsInit ? ["),(", d.paramsInit] : [], "),", "(typeof helper === ", this.aliasable('"function"'), " ? ", this.source.functionCall("helper", "call", d.callParams), " : helper))"]);
      },
      invokePartial: function invokePartial(a, b, c) {
        var d = [],
            e = this.setupParams(b, 1, d);
        a && (b = this.popStack(), delete e.name), c && (e.indent = JSON.stringify(c)), e.helpers = "helpers", e.partials = "partials", e.decorators = "container.decorators", a ? d.unshift(b) : d.unshift(this.nameLookup("partials", b, "partial")), this.options.compat && (e.depths = "depths"), e = this.objectLiteral(e), d.push(e), this.push(this.source.functionCall("container.invokePartial", "", d));
      },
      assignToHash: function assignToHash(a) {
        var b = this.popStack(),
            c = void 0,
            d = void 0,
            e = void 0;
        this.trackIds && (e = this.popStack()), this.stringParams && (d = this.popStack(), c = this.popStack());
        var f = this.hash;
        c && (f.contexts[a] = c), d && (f.types[a] = d), e && (f.ids[a] = e), f.values[a] = b;
      },
      pushId: function pushId(a, b, c) {
        "BlockParam" === a ? this.pushStackLiteral("blockParams[" + b[0] + "].path[" + b[1] + "]" + (c ? " + " + JSON.stringify("." + c) : "")) : "PathExpression" === a ? this.pushString(b) : "SubExpression" === a ? this.pushStackLiteral("true") : this.pushStackLiteral("null");
      },
      compiler: e,
      compileChildren: function compileChildren(a, b) {
        for (var c = a.children, d = void 0, e = void 0, f = 0, g = c.length; f < g; f++) {
          d = c[f], e = new this.compiler();
          var h = this.matchExistingProgram(d);

          if (null == h) {
            this.context.programs.push("");
            var i = this.context.programs.length;
            d.index = i, d.name = "program" + i, this.context.programs[i] = e.compile(d, b, this.context, !this.precompile), this.context.decorators[i] = e.decorators, this.context.environments[i] = d, this.useDepths = this.useDepths || e.useDepths, this.useBlockParams = this.useBlockParams || e.useBlockParams, d.useDepths = this.useDepths, d.useBlockParams = this.useBlockParams;
          } else d.index = h.index, d.name = "program" + h.index, this.useDepths = this.useDepths || h.useDepths, this.useBlockParams = this.useBlockParams || h.useBlockParams;
        }
      },
      matchExistingProgram: function matchExistingProgram(a) {
        for (var b = 0, c = this.context.environments.length; b < c; b++) {
          var d = this.context.environments[b];
          if (d && d.equals(a)) return d;
        }
      },
      programExpression: function programExpression(a) {
        var b = this.environment.children[a],
            c = [b.index, "data", b.blockParams];
        return (this.useBlockParams || this.useDepths) && c.push("blockParams"), this.useDepths && c.push("depths"), "container.program(" + c.join(", ") + ")";
      },
      useRegister: function useRegister(a) {
        this.registers[a] || (this.registers[a] = !0, this.registers.list.push(a));
      },
      push: function push(a) {
        return a instanceof d || (a = this.source.wrap(a)), this.inlineStack.push(a), a;
      },
      pushStackLiteral: function pushStackLiteral(a) {
        this.push(new d(a));
      },
      pushSource: function pushSource(a) {
        this.pendingContent && (this.source.push(this.appendToBuffer(this.source.quotedString(this.pendingContent), this.pendingLocation)), this.pendingContent = void 0), a && this.source.push(a);
      },
      replaceStack: function replaceStack(a) {
        var b = ["("],
            c = void 0,
            e = void 0,
            f = void 0;
        if (!this.isInline()) throw new k["default"]("replaceStack on non-inline");
        var g = this.popStack(!0);
        if (g instanceof d) c = [g.value], b = ["(", c], f = !0;else {
          e = !0;
          var h = this.incrStack();
          b = ["((", this.push(h), " = ", g, ")"], c = this.topStack();
        }
        var i = a.call(this, c);
        f || this.popStack(), e && this.stackSlot--, this.push(b.concat(i, ")"));
      },
      incrStack: function incrStack() {
        return this.stackSlot++, this.stackSlot > this.stackVars.length && this.stackVars.push("stack" + this.stackSlot), this.topStackName();
      },
      topStackName: function topStackName() {
        return "stack" + this.stackSlot;
      },
      flushInline: function flushInline() {
        var a = this.inlineStack;
        this.inlineStack = [];

        for (var b = 0, c = a.length; b < c; b++) {
          var e = a[b];
          if (e instanceof d) this.compileStack.push(e);else {
            var f = this.incrStack();
            this.pushSource([f, " = ", e, ";"]), this.compileStack.push(f);
          }
        }
      },
      isInline: function isInline() {
        return this.inlineStack.length;
      },
      popStack: function popStack(a) {
        var b = this.isInline(),
            c = (b ? this.inlineStack : this.compileStack).pop();
        if (!a && c instanceof d) return c.value;

        if (!b) {
          if (!this.stackSlot) throw new k["default"]("Invalid stack pop");
          this.stackSlot--;
        }

        return c;
      },
      topStack: function topStack() {
        var a = this.isInline() ? this.inlineStack : this.compileStack,
            b = a[a.length - 1];
        return b instanceof d ? b.value : b;
      },
      contextName: function contextName(a) {
        return this.useDepths && a ? "depths[" + a + "]" : "depth" + a;
      },
      quotedString: function quotedString(a) {
        return this.source.quotedString(a);
      },
      objectLiteral: function objectLiteral(a) {
        return this.source.objectLiteral(a);
      },
      aliasable: function aliasable(a) {
        var b = this.aliases[a];
        return b ? (b.referenceCount++, b) : (b = this.aliases[a] = this.source.wrap(a), b.aliasable = !0, b.referenceCount = 1, b);
      },
      setupHelper: function setupHelper(a, b, c) {
        var d = [],
            e = this.setupHelperArgs(b, a, d, c),
            f = this.nameLookup("helpers", b, "helper"),
            g = this.aliasable(this.contextName(0) + " != null ? " + this.contextName(0) + " : (container.nullContext || {})");
        return {
          params: d,
          paramsInit: e,
          name: f,
          callParams: [g].concat(d)
        };
      },
      setupParams: function setupParams(a, b, c) {
        var d = {},
            e = [],
            f = [],
            g = [],
            h = !c,
            i = void 0;
        h && (c = []), d.name = this.quotedString(a), d.hash = this.popStack(), this.trackIds && (d.hashIds = this.popStack()), this.stringParams && (d.hashTypes = this.popStack(), d.hashContexts = this.popStack());
        var j = this.popStack(),
            k = this.popStack();
        (k || j) && (d.fn = k || "container.noop", d.inverse = j || "container.noop");

        for (var l = b; l--;) {
          i = this.popStack(), c[l] = i, this.trackIds && (g[l] = this.popStack()), this.stringParams && (f[l] = this.popStack(), e[l] = this.popStack());
        }

        return h && (d.args = this.source.generateArray(c)), this.trackIds && (d.ids = this.source.generateArray(g)), this.stringParams && (d.types = this.source.generateArray(f), d.contexts = this.source.generateArray(e)), this.options.data && (d.data = "data"), this.useBlockParams && (d.blockParams = "blockParams"), d;
      },
      setupHelperArgs: function setupHelperArgs(a, b, c, d) {
        var e = this.setupParams(a, b, c);
        return e.loc = JSON.stringify(this.source.currentLocation), e = this.objectLiteral(e), d ? (this.useRegister("options"), c.push("options"), ["options=", e]) : c ? (c.push(e), "") : e;
      }
    }, function () {
      for (var a = "break else new var case finally return void catch for switch while continue function this with default if throw delete in try do instanceof typeof abstract enum int short boolean export interface static byte extends long super char final native synchronized class float package throws const goto private transient debugger implements protected volatile double import public let yield await null true false".split(" "), b = e.RESERVED_WORDS = {}, c = 0, d = a.length; c < d; c++) {
        b[a[c]] = !0;
      }
    }(), e.isValidJavaScriptVariableName = function (a) {
      return !e.RESERVED_WORDS[a] && /^[a-zA-Z_$][0-9a-zA-Z_$]*$/.test(a);
    }, b["default"] = e, a.exports = b["default"];
  }, function (a, b, c) {
    "use strict";

    function d(a, b, c) {
      if (g.isArray(a)) {
        for (var d = [], e = 0, f = a.length; e < f; e++) {
          d.push(b.wrap(a[e], c));
        }

        return d;
      }

      return "boolean" == typeof a || "number" == typeof a ? a + "" : a;
    }

    function e(a) {
      this.srcFile = a, this.source = [];
    }

    var f = c(13)["default"];
    b.__esModule = !0;
    var g = c(5),
        h = void 0;

    try {} catch (i) {}

    h || (h = function h(a, b, c, d) {
      this.src = "", d && this.add(d);
    }, h.prototype = {
      add: function add(a) {
        g.isArray(a) && (a = a.join("")), this.src += a;
      },
      prepend: function prepend(a) {
        g.isArray(a) && (a = a.join("")), this.src = a + this.src;
      },
      toStringWithSourceMap: function toStringWithSourceMap() {
        return {
          code: this.toString()
        };
      },
      toString: function toString() {
        return this.src;
      }
    }), e.prototype = {
      isEmpty: function isEmpty() {
        return !this.source.length;
      },
      prepend: function prepend(a, b) {
        this.source.unshift(this.wrap(a, b));
      },
      push: function push(a, b) {
        this.source.push(this.wrap(a, b));
      },
      merge: function merge() {
        var a = this.empty();
        return this.each(function (b) {
          a.add(["  ", b, "\n"]);
        }), a;
      },
      each: function each(a) {
        for (var b = 0, c = this.source.length; b < c; b++) {
          a(this.source[b]);
        }
      },
      empty: function empty() {
        var a = this.currentLocation || {
          start: {}
        };
        return new h(a.start.line, a.start.column, this.srcFile);
      },
      wrap: function wrap(a) {
        var b = arguments.length <= 1 || void 0 === arguments[1] ? this.currentLocation || {
          start: {}
        } : arguments[1];
        return a instanceof h ? a : (a = d(a, this, b), new h(b.start.line, b.start.column, this.srcFile, a));
      },
      functionCall: function functionCall(a, b, c) {
        return c = this.generateList(c), this.wrap([a, b ? "." + b + "(" : "(", c, ")"]);
      },
      quotedString: function quotedString(a) {
        return '"' + (a + "").replace(/\\/g, "\\\\").replace(/"/g, '\\"').replace(/\n/g, "\\n").replace(/\r/g, "\\r").replace(/\u2028/g, "\\u2028").replace(/\u2029/g, "\\u2029") + '"';
      },
      objectLiteral: function objectLiteral(a) {
        var b = this,
            c = [];
        f(a).forEach(function (e) {
          var f = d(a[e], b);
          "undefined" !== f && c.push([b.quotedString(e), ":", f]);
        });
        var e = this.generateList(c);
        return e.prepend("{"), e.add("}"), e;
      },
      generateList: function generateList(a) {
        for (var b = this.empty(), c = 0, e = a.length; c < e; c++) {
          c && b.add(","), b.add(d(a[c], this));
        }

        return b;
      },
      generateArray: function generateArray(a) {
        var b = this.generateList(a);
        return b.prepend("["), b.add("]"), b;
      }
    }, b["default"] = e, a.exports = b["default"];
  }]);
});

/***/ }),

/***/ "./node_modules/lax.js/lib/lax.min.js":
/*!********************************************!*\
  !*** ./node_modules/lax.js/lib/lax.min.js ***!
  \********************************************/
/***/ (function(module) {

"use strict";


function _classCallCheck(e, t) {
  if (!(e instanceof t)) throw new TypeError("Cannot call a class as a function");
}

function _defineProperty(e, t, n) {
  return t in e ? Object.defineProperty(e, t, {
    value: n,
    enumerable: !0,
    configurable: !0,
    writable: !0
  }) : e[t] = n, e;
}

function _slicedToArray(e, t) {
  return _arrayWithHoles(e) || _iterableToArrayLimit(e, t) || _unsupportedIterableToArray(e, t) || _nonIterableRest();
}

function _nonIterableRest() {
  throw new TypeError("Invalid attempt to destructure non-iterable instance.\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method.");
}

function _unsupportedIterableToArray(e, t) {
  if (e) {
    if ("string" == typeof e) return _arrayLikeToArray(e, t);
    var n = Object.prototype.toString.call(e).slice(8, -1);
    return "Object" === n && e.constructor && (n = e.constructor.name), "Map" === n || "Set" === n ? Array.from(e) : "Arguments" === n || /^(?:Ui|I)nt(?:8|16|32)(?:Clamped)?Array$/.test(n) ? _arrayLikeToArray(e, t) : void 0;
  }
}

function _arrayLikeToArray(e, t) {
  (null == t || t > e.length) && (t = e.length);

  for (var n = 0, r = new Array(t); n < t; n++) {
    r[n] = e[n];
  }

  return r;
}

function _iterableToArrayLimit(e, t) {
  if ("undefined" != typeof Symbol && Symbol.iterator in Object(e)) {
    var n = [],
        r = !0,
        i = !1,
        o = void 0;

    try {
      for (var a, l = e[Symbol.iterator](); !(r = (a = l.next()).done) && (n.push(a.value), !t || n.length !== t); r = !0) {
        ;
      }
    } catch (e) {
      i = !0, o = e;
    } finally {
      try {
        r || null == l.return || l.return();
      } finally {
        if (i) throw o;
      }
    }

    return n;
  }
}

function _arrayWithHoles(e) {
  if (Array.isArray(e)) return e;
}

!function () {
  function n(e) {
    return ["elInY+elHeight", "elCenterY-".concat(e = 0 < arguments.length && void 0 !== e ? e : 30), "elCenterY", "elCenterY+".concat(e), "elOutY-elHeight"];
  }

  var l,
      u,
      s,
      _,
      P,
      I,
      t = {
    fadeInOut: function fadeInOut(e, t) {
      t = 1 < arguments.length && void 0 !== t ? t : 0;
      return {
        opacity: [n(0 < arguments.length && void 0 !== e ? e : 30), [t, 1, 1, 1, t]]
      };
    },
    fadeIn: function fadeIn(e, t) {
      return {
        opacity: [["elInY+elHeight", 0 < arguments.length && void 0 !== e ? e : "elCenterY"], [1 < arguments.length && void 0 !== t ? t : 0, 1]]
      };
    },
    fadeOut: function fadeOut(e, t) {
      return {
        opacity: [[0 < arguments.length && void 0 !== e ? e : "elCenterY", "elOutY-elHeight"], [1, 1 < arguments.length && void 0 !== t ? t : 0]]
      };
    },
    blurInOut: function blurInOut(e, t) {
      t = 1 < arguments.length && void 0 !== t ? t : 20;
      return {
        blur: [n(0 < arguments.length && void 0 !== e ? e : 100), [t, 0, 0, 0, t]]
      };
    },
    blurIn: function blurIn(e, t) {
      return {
        blur: [["elInY+elHeight", 0 < arguments.length && void 0 !== e ? e : "elCenterY"], [1 < arguments.length && void 0 !== t ? t : 20, 0]]
      };
    },
    blurOut: function blurOut(e, t) {
      return {
        opacity: [[0 < arguments.length && void 0 !== e ? e : "elCenterY", "elOutY-elHeight"], [0, 1 < arguments.length && void 0 !== t ? t : 20]]
      };
    },
    scaleInOut: function scaleInOut(e, t) {
      t = 1 < arguments.length && void 0 !== t ? t : .6;
      return {
        scale: [n(0 < arguments.length && void 0 !== e ? e : 100), [t, 1, 1, 1, t]]
      };
    },
    scaleIn: function scaleIn(e, t) {
      return {
        scale: [["elInY+elHeight", 0 < arguments.length && void 0 !== e ? e : "elCenterY"], [1 < arguments.length && void 0 !== t ? t : .6, 1]]
      };
    },
    scaleOut: function scaleOut(e, t) {
      return {
        scale: [[0 < arguments.length && void 0 !== e ? e : "elCenterY", "elOutY-elHeight"], [1, 1 < arguments.length && void 0 !== t ? t : .6]]
      };
    },
    slideX: function slideX(e, t) {
      return {
        translateX: [["elInY", 0 < arguments.length && void 0 !== e ? e : 0], [0, 1 < arguments.length && void 0 !== t ? t : 500]]
      };
    },
    slideY: function slideY(e, t) {
      return {
        translateY: [["elInY", 0 < arguments.length && void 0 !== e ? e : 0], [0, 1 < arguments.length && void 0 !== t ? t : 500]]
      };
    },
    spin: function spin(e, t) {
      e = 0 < arguments.length && void 0 !== e ? e : 1e3;
      return {
        rotate: [[0, e], [0, 1 < arguments.length && void 0 !== t ? t : 360], {
          modValue: e
        }]
      };
    },
    flipX: function flipX(e, t) {
      e = 0 < arguments.length && void 0 !== e ? e : 1e3;
      return {
        rotateX: [[0, e], [0, 1 < arguments.length && void 0 !== t ? t : 360], {
          modValue: e
        }]
      };
    },
    flipY: function flipY(e, t) {
      e = 0 < arguments.length && void 0 !== e ? e : 1e3;
      return {
        rotateY: [[0, e], [0, 1 < arguments.length && void 0 !== t ? t : 360], {
          modValue: e
        }]
      };
    },
    jiggle: function jiggle(e, t) {
      e = 0 < arguments.length && void 0 !== e ? e : 50, t = 1 < arguments.length && void 0 !== t ? t : 40;
      return {
        skewX: [[0, +e, 2 * e, 3 * e, 4 * e], [0, t, 0, -t, 0], {
          modValue: 4 * e
        }]
      };
    },
    seesaw: function seesaw(e, t) {
      e = 0 < arguments.length && void 0 !== e ? e : 50, t = 1 < arguments.length && void 0 !== t ? t : 40;
      return {
        skewY: [[0, +e, 2 * e, 3 * e, 4 * e], [0, t, 0, -t, 0], {
          modValue: 4 * e
        }]
      };
    },
    zigzag: function zigzag(e, t) {
      e = 0 < arguments.length && void 0 !== e ? e : 100, t = 1 < arguments.length && void 0 !== t ? t : 100;
      return {
        translateX: [[0, +e, 2 * e, 3 * e, 4 * e], [0, t, 0, -t, 0], {
          modValue: 4 * e
        }]
      };
    },
    hueRotate: function hueRotate(e, t) {
      e = 0 < arguments.length && void 0 !== e ? e : 600;
      return {
        "hue-rotate": [[0, e], [0, 1 < arguments.length && void 0 !== t ? t : 360], {
          modValue: e
        }]
      };
    }
  },
      e = (l = ["perspective", "scaleX", "scaleY", "scale", "skewX", "skewY", "skew", "rotateX", "rotateY", "rotate"], u = ["blur", "hue-rotate", "brightness"], s = ["translateX", "translateY", "translateZ"], _ = ["perspective", "border-radius", "blur", "translateX", "translateY", "translateZ"], P = ["hue-rotate", "rotate", "rotateX", "rotateY", "skew", "skewX", "skewY"], I = {
    easeInQuad: function easeInQuad(e) {
      return e * e;
    },
    easeOutQuad: function easeOutQuad(e) {
      return e * (2 - e);
    },
    easeInOutQuad: function easeInOutQuad(e) {
      return e < .5 ? 2 * e * e : (4 - 2 * e) * e - 1;
    },
    easeInCubic: function easeInCubic(e) {
      return e * e * e;
    },
    easeOutCubic: function easeOutCubic(e) {
      return --e * e * e + 1;
    },
    easeInOutCubic: function easeInOutCubic(e) {
      return e < .5 ? 4 * e * e * e : (e - 1) * (2 * e - 2) * (2 * e - 2) + 1;
    },
    easeInQuart: function easeInQuart(e) {
      return e * e * e * e;
    },
    easeOutQuart: function easeOutQuart(e) {
      return 1 - --e * e * e * e;
    },
    easeInOutQuart: function easeInOutQuart(e) {
      return e < .5 ? 8 * e * e * e * e : 1 - 8 * --e * e * e * e;
    },
    easeInQuint: function easeInQuint(e) {
      return e * e * e * e * e;
    },
    easeOutQuint: function easeOutQuint(e) {
      return 1 + --e * e * e * e * e;
    },
    easeInOutQuint: function easeInOutQuint(e) {
      return e < .5 ? 16 * e * e * e * e * e : 1 + 16 * --e * e * e * e * e;
    },
    easeOutBounce: function easeOutBounce(e) {
      var t = 7.5625,
          n = 2.75;
      return e < 1 / n ? t * e * e : e < 2 / n ? t * (e -= 1.5 / n) * e + .75 : e < 2.5 / n ? t * (e -= 2.25 / n) * e + .9375 : t * (e -= 2.625 / n) * e + .984375;
    },
    easeInBounce: function easeInBounce(e) {
      return 1 - I.easeOutBounce(1 - e);
    },
    easeOutBack: function easeOutBack(e) {
      return 1 + 2.70158 * Math.pow(e - 1, 3) + 1.70158 * Math.pow(e - 1, 2);
    },
    easeInBack: function easeInBack(e) {
      return 2.70158 * e * e * e - 1.70158 * e * e;
    }
  }, new function e() {
    var o = this;
    _classCallCheck(this, e), _defineProperty(this, "drivers", []), _defineProperty(this, "elements", []), _defineProperty(this, "frame", 0), _defineProperty(this, "debug", !1), _defineProperty(this, "windowWidth", 0), _defineProperty(this, "windowHeight", 0), _defineProperty(this, "presets", t), _defineProperty(this, "debugData", {
      frameLengths: []
    }), _defineProperty(this, "init", function () {
      o.findAndAddElements(), window.requestAnimationFrame(o.onAnimationFrame), o.windowWidth = document.body.clientWidth, o.windowHeight = document.body.clientHeight, window.onresize = o.onWindowResize;
    }), _defineProperty(this, "onWindowResize", function () {
      document.body.clientWidth === o.windowWidth && document.body.clientHeight === o.windowHeight || (o.windowWidth = document.body.clientWidth, o.windowHeight = document.body.clientHeight, o.elements.forEach(function (e) {
        return e.calculateTransforms();
      }));
    }), _defineProperty(this, "onAnimationFrame", function (e) {
      o.debug && (o.debugData.frameStart = Date.now());
      var t,
          n = {};
      o.drivers.forEach(function (e) {
        n[e.name] = e.getValue(o.frame);
      }), o.elements.forEach(function (e) {
        e.update(n, o.frame);
      }), o.debug && o.debugData.frameLengths.push(Date.now() - o.debugData.frameStart), o.frame % 60 == 0 && o.debug && (t = Math.ceil(o.debugData.frameLengths.reduce(function (e, t) {
        return e + t;
      }, 0) / 60), console.log("Average frame calculation time: ".concat(t, "ms")), o.debugData.frameLengths = []), o.frame++, window.requestAnimationFrame(o.onAnimationFrame);
    }), _defineProperty(this, "addDriver", function (e, t) {
      var n = 2 < arguments.length && void 0 !== arguments[2] ? arguments[2] : {};
      o.drivers.push(new i(e, t, n));
    }), _defineProperty(this, "removeDriver", function (t) {
      o.drivers = o.drivers.filter(function (e) {
        return e.name !== t;
      });
    }), _defineProperty(this, "findAndAddElements", function () {
      o.elements = [], document.querySelectorAll(".lax").forEach(function (e) {
        var t = [];
        e.classList.forEach(function (e) {
          e.includes("lax_preset") && (e = e.replace("lax_preset_", ""), t.push(e));
        });

        var n = _defineProperty({}, "scrollY", {
          presets: t
        });

        o.elements.push(new f(".lax", o, e, n, 0, {}));
      });
    }), _defineProperty(this, "addElements", function (n, r, i) {
      document.querySelectorAll(n).forEach(function (e, t) {
        o.elements.push(new f(n, o, e, r, t, i));
      });
    }), _defineProperty(this, "removeElements", function (t) {
      o.elements = o.elements.filter(function (e) {
        return e.selector !== t;
      });
    }), _defineProperty(this, "addElement", function (e, t, n) {
      o.elements.push(new f("", o, e, t, 0, n));
    }), _defineProperty(this, "removeElement", function (t) {
      o.elements = o.elements.filter(function (e) {
        return e.domElement !== t;
      });
    });
  }());

  function c(e, t) {
    if (Array.isArray(e)) return e;

    for (var n = Object.keys(e).map(function (e) {
      return parseInt(e);
    }).sort(function (e, t) {
      return t < e ? 1 : -1;
    }), r = n[n.length - 1], i = 0; i < n.length; i++) {
      var o = n[i];

      if (t < o) {
        r = o;
        break;
      }
    }

    return e[r];
  }

  function d(e, t, n) {
    var r = t.width,
        i = t.height,
        o = t.x,
        a = t.y;
    if ("number" == typeof e) return e;

    var l,
        u = document.body.scrollHeight,
        s = document.body.scrollWidth,
        c = window.innerWidth,
        d = window.innerHeight,
        f = _slicedToArray((l = void 0 !== window.pageXOffset, f = "CSS1Compat" === (document.compatMode || ""), t = l ? window.pageXOffset : (f ? document.documentElement : document.body).scrollLeft, [l ? window.pageYOffset : (f ? document.documentElement : document.body).scrollTop, t]), 2),
        t = f[0],
        o = o + f[1],
        f = o + r,
        a = a + t,
        t = a + i;

    return Function("return ".concat(e.replace(/screenWidth/g, c).replace(/screenHeight/g, d).replace(/pageHeight/g, u).replace(/pageWidth/g, s).replace(/elWidth/g, r).replace(/elHeight/g, i).replace(/elInY/g, a - d).replace(/elOutY/g, t).replace(/elCenterY/g, a + i / 2 - d / 2).replace(/elInX/g, o - c).replace(/elOutX/g, f).replace(/elCenterX/g, o + r / 2 - c / 2).replace(/index/g, n)))();
  }

  function i(e, t) {
    var n = this,
        r = 2 < arguments.length && void 0 !== arguments[2] ? arguments[2] : {};
    _classCallCheck(this, i), _defineProperty(this, "getValueFn", void 0), _defineProperty(this, "name", ""), _defineProperty(this, "lastValue", 0), _defineProperty(this, "frameStep", 1), _defineProperty(this, "m1", 0), _defineProperty(this, "m2", 0), _defineProperty(this, "inertia", 0), _defineProperty(this, "inertiaEnabled", !1), _defineProperty(this, "getValue", function (e) {
      var t = n.lastValue;
      return e % n.frameStep == 0 && (t = n.getValueFn(e)), n.inertiaEnabled && (e = t - n.lastValue, n.m1 = .8 * n.m1 + e * (1 - .8), n.m2 = .8 * n.m2 + n.m1 * (1 - .8), n.inertia = Math.round(5e3 * n.m2) / 15e3), n.lastValue = t, [n.lastValue, n.inertia];
    }), this.name = e, this.getValueFn = t, Object.keys(r).forEach(function (e) {
      n[e] = r[e];
    }), this.lastValue = this.getValueFn(0);
  }

  function f(e, t, n, r) {
    var b = this,
        i = 4 < arguments.length && void 0 !== arguments[4] ? arguments[4] : 0,
        o = 5 < arguments.length && void 0 !== arguments[5] ? arguments[5] : {};
    _classCallCheck(this, f), _defineProperty(this, "domElement", void 0), _defineProperty(this, "transformsData", void 0), _defineProperty(this, "styles", {}), _defineProperty(this, "selector", ""), _defineProperty(this, "groupIndex", 0), _defineProperty(this, "laxInstance", void 0), _defineProperty(this, "onUpdate", void 0), _defineProperty(this, "update", function (e, t) {
      var n,
          r = b.transforms,
          i = {};

      for (n in r) {
        var o = r[n];
        e[n] || console.error("No lax driver with name: ", n);

        var a,
            l = _slicedToArray(e[n], 2),
            u = l[0],
            s = l[1];

        for (a in o) {
          var c,
              d = _slicedToArray(o[a], 3),
              f = d[0],
              h = d[1],
              m = d[2],
              p = void 0 === m ? {} : m,
              g = p.modValue,
              y = p.frameStep,
              v = void 0 === y ? 1 : y,
              w = p.easing,
              d = p.inertia,
              m = p.inertiaMode,
              y = p.cssFn,
              p = p.cssUnit,
              p = void 0 === p ? "" : p,
              w = I[w];

          t % v == 0 && (w = function (e, t, n, r) {
            var i = 0;
            if (e.forEach(function (e) {
              e < n && i++;
            }), i <= 0) return t[0];
            if (i >= e.length) return t[e.length - 1];
            var o,
                a = (a = e[o = i - 1], e = e[i], (n - a) / (e - a));
            return r && (a = r(a)), o = t[o], t = t[i], o * (1 - (a = a)) + t * a;
          }(f, h, g ? u % g : u, w), d && (c = s * d, "absolute" === m && (c = Math.abs(c)), w += c), c = "px" == (p || _.includes(a) ? "px" : P.includes(a) ? "deg" : "") ? 0 : 3, c = w.toFixed(c), i[a] = y ? y(c, b.domElement) : c + p);
        }
      }

      b.applyStyles(i), b.onUpdate && b.onUpdate(e, b.domElement);
    }), _defineProperty(this, "calculateTransforms", function () {
      b.transforms = {};
      var e,
          l = b.laxInstance.windowWidth;

      for (e in b.transformsData) {
        !function (e) {
          var o = b.transformsData[e],
              a = {},
              t = o.presets;
          (void 0 === t ? [] : t).forEach(function (e) {
            var t,
                n = _slicedToArray(e.split(":"), 3),
                r = n[0],
                i = n[1],
                e = n[2],
                n = window.lax.presets[r];

            n ? (t = n(i, e), Object.keys(t).forEach(function (e) {
              o[e] = t[e];
            })) : console.error("Lax preset cannot be found with name: ", r);
          }), delete o.presets;

          for (var n in o) {
            !function (e) {
              var t = _slicedToArray(o[e], 3),
                  n = t[0],
                  r = void 0 === n ? [-1e9, 1e9] : n,
                  n = t[1],
                  n = void 0 === n ? [-1e9, 1e9] : n,
                  t = t[2],
                  t = void 0 === t ? {} : t,
                  i = b.domElement.getBoundingClientRect(),
                  r = c(r, l).map(function (e) {
                return d(e, i, b.groupIndex);
              }),
                  n = c(n, l).map(function (e) {
                return d(e, i, b.groupIndex);
              });

              a[e] = [r, n, t];
            }(n);
          }

          b.transforms[e] = a;
        }(e);
      }
    }), _defineProperty(this, "applyStyles", function (e) {
      var r,
          i,
          o,
          t = (r = e, i = {
        transform: "",
        filter: ""
      }, o = {
        translateX: 1e-5,
        translateY: 1e-5,
        translateZ: 1e-5
      }, Object.keys(r).forEach(function (e) {
        var t = r[e],
            n = _.includes(e) ? "px" : P.includes(e) ? "deg" : "";
        s.includes(e) ? o[e] = t : l.includes(e) ? i.transform += "".concat(e, "(").concat(t).concat(n, ") ") : u.includes(e) ? i.filter += "".concat(e, "(").concat(t).concat(n, ") ") : i[e] = "".concat(t).concat(n, " ");
      }), i.transform = "translate3d(".concat(o.translateX, "px, ").concat(o.translateY, "px, ").concat(o.translateZ, "px) ").concat(i.transform), i);
      Object.keys(t).forEach(function (e) {
        b.domElement.style.setProperty(e, t[e]);
      });
    }), this.selector = e, this.laxInstance = t, this.domElement = n, this.transformsData = r, this.groupIndex = i;
    var a = void 0 === (i = o.style) ? {} : i,
        o = o.onUpdate;
    Object.keys(a).forEach(function (e) {
      n.style.setProperty(e, a[e]);
    }), o && (this.onUpdate = o), this.calculateTransforms();
  }

   true && void 0 !== module.exports ? module.exports = e : window.lax = e;
}();

/***/ }),

/***/ "./node_modules/lodash/_Symbol.js":
/*!****************************************!*\
  !*** ./node_modules/lodash/_Symbol.js ***!
  \****************************************/
/***/ (function(module, __unused_webpack_exports, __webpack_require__) {

var root = __webpack_require__(/*! ./_root */ "./node_modules/lodash/_root.js");
/** Built-in value references. */


var _Symbol = root.Symbol;
module.exports = _Symbol;

/***/ }),

/***/ "./node_modules/lodash/_baseGetTag.js":
/*!********************************************!*\
  !*** ./node_modules/lodash/_baseGetTag.js ***!
  \********************************************/
/***/ (function(module, __unused_webpack_exports, __webpack_require__) {

var _Symbol = __webpack_require__(/*! ./_Symbol */ "./node_modules/lodash/_Symbol.js"),
    getRawTag = __webpack_require__(/*! ./_getRawTag */ "./node_modules/lodash/_getRawTag.js"),
    objectToString = __webpack_require__(/*! ./_objectToString */ "./node_modules/lodash/_objectToString.js");
/** `Object#toString` result references. */


var nullTag = '[object Null]',
    undefinedTag = '[object Undefined]';
/** Built-in value references. */

var symToStringTag = _Symbol ? _Symbol.toStringTag : undefined;
/**
 * The base implementation of `getTag` without fallbacks for buggy environments.
 *
 * @private
 * @param {*} value The value to query.
 * @returns {string} Returns the `toStringTag`.
 */

function baseGetTag(value) {
  if (value == null) {
    return value === undefined ? undefinedTag : nullTag;
  }

  return symToStringTag && symToStringTag in Object(value) ? getRawTag(value) : objectToString(value);
}

module.exports = baseGetTag;

/***/ }),

/***/ "./node_modules/lodash/_baseTrim.js":
/*!******************************************!*\
  !*** ./node_modules/lodash/_baseTrim.js ***!
  \******************************************/
/***/ (function(module, __unused_webpack_exports, __webpack_require__) {

var trimmedEndIndex = __webpack_require__(/*! ./_trimmedEndIndex */ "./node_modules/lodash/_trimmedEndIndex.js");
/** Used to match leading whitespace. */


var reTrimStart = /^\s+/;
/**
 * The base implementation of `_.trim`.
 *
 * @private
 * @param {string} string The string to trim.
 * @returns {string} Returns the trimmed string.
 */

function baseTrim(string) {
  return string ? string.slice(0, trimmedEndIndex(string) + 1).replace(reTrimStart, '') : string;
}

module.exports = baseTrim;

/***/ }),

/***/ "./node_modules/lodash/_freeGlobal.js":
/*!********************************************!*\
  !*** ./node_modules/lodash/_freeGlobal.js ***!
  \********************************************/
/***/ (function(module, __unused_webpack_exports, __webpack_require__) {

function _typeof(obj) { "@babel/helpers - typeof"; if (typeof Symbol === "function" && typeof Symbol.iterator === "symbol") { _typeof = function _typeof(obj) { return typeof obj; }; } else { _typeof = function _typeof(obj) { return obj && typeof Symbol === "function" && obj.constructor === Symbol && obj !== Symbol.prototype ? "symbol" : typeof obj; }; } return _typeof(obj); }

/** Detect free variable `global` from Node.js. */
var freeGlobal = (typeof __webpack_require__.g === "undefined" ? "undefined" : _typeof(__webpack_require__.g)) == 'object' && __webpack_require__.g && __webpack_require__.g.Object === Object && __webpack_require__.g;
module.exports = freeGlobal;

/***/ }),

/***/ "./node_modules/lodash/_getRawTag.js":
/*!*******************************************!*\
  !*** ./node_modules/lodash/_getRawTag.js ***!
  \*******************************************/
/***/ (function(module, __unused_webpack_exports, __webpack_require__) {

var _Symbol = __webpack_require__(/*! ./_Symbol */ "./node_modules/lodash/_Symbol.js");
/** Used for built-in method references. */


var objectProto = Object.prototype;
/** Used to check objects for own properties. */

var hasOwnProperty = objectProto.hasOwnProperty;
/**
 * Used to resolve the
 * [`toStringTag`](http://ecma-international.org/ecma-262/7.0/#sec-object.prototype.tostring)
 * of values.
 */

var nativeObjectToString = objectProto.toString;
/** Built-in value references. */

var symToStringTag = _Symbol ? _Symbol.toStringTag : undefined;
/**
 * A specialized version of `baseGetTag` which ignores `Symbol.toStringTag` values.
 *
 * @private
 * @param {*} value The value to query.
 * @returns {string} Returns the raw `toStringTag`.
 */

function getRawTag(value) {
  var isOwn = hasOwnProperty.call(value, symToStringTag),
      tag = value[symToStringTag];

  try {
    value[symToStringTag] = undefined;
    var unmasked = true;
  } catch (e) {}

  var result = nativeObjectToString.call(value);

  if (unmasked) {
    if (isOwn) {
      value[symToStringTag] = tag;
    } else {
      delete value[symToStringTag];
    }
  }

  return result;
}

module.exports = getRawTag;

/***/ }),

/***/ "./node_modules/lodash/_objectToString.js":
/*!************************************************!*\
  !*** ./node_modules/lodash/_objectToString.js ***!
  \************************************************/
/***/ (function(module) {

/** Used for built-in method references. */
var objectProto = Object.prototype;
/**
 * Used to resolve the
 * [`toStringTag`](http://ecma-international.org/ecma-262/7.0/#sec-object.prototype.tostring)
 * of values.
 */

var nativeObjectToString = objectProto.toString;
/**
 * Converts `value` to a string using `Object.prototype.toString`.
 *
 * @private
 * @param {*} value The value to convert.
 * @returns {string} Returns the converted string.
 */

function objectToString(value) {
  return nativeObjectToString.call(value);
}

module.exports = objectToString;

/***/ }),

/***/ "./node_modules/lodash/_root.js":
/*!**************************************!*\
  !*** ./node_modules/lodash/_root.js ***!
  \**************************************/
/***/ (function(module, __unused_webpack_exports, __webpack_require__) {

function _typeof(obj) { "@babel/helpers - typeof"; if (typeof Symbol === "function" && typeof Symbol.iterator === "symbol") { _typeof = function _typeof(obj) { return typeof obj; }; } else { _typeof = function _typeof(obj) { return obj && typeof Symbol === "function" && obj.constructor === Symbol && obj !== Symbol.prototype ? "symbol" : typeof obj; }; } return _typeof(obj); }

var freeGlobal = __webpack_require__(/*! ./_freeGlobal */ "./node_modules/lodash/_freeGlobal.js");
/** Detect free variable `self`. */


var freeSelf = (typeof self === "undefined" ? "undefined" : _typeof(self)) == 'object' && self && self.Object === Object && self;
/** Used as a reference to the global object. */

var root = freeGlobal || freeSelf || Function('return this')();
module.exports = root;

/***/ }),

/***/ "./node_modules/lodash/_trimmedEndIndex.js":
/*!*************************************************!*\
  !*** ./node_modules/lodash/_trimmedEndIndex.js ***!
  \*************************************************/
/***/ (function(module) {

/** Used to match a single whitespace character. */
var reWhitespace = /\s/;
/**
 * Used by `_.trim` and `_.trimEnd` to get the index of the last non-whitespace
 * character of `string`.
 *
 * @private
 * @param {string} string The string to inspect.
 * @returns {number} Returns the index of the last non-whitespace character.
 */

function trimmedEndIndex(string) {
  var index = string.length;

  while (index-- && reWhitespace.test(string.charAt(index))) {}

  return index;
}

module.exports = trimmedEndIndex;

/***/ }),

/***/ "./node_modules/lodash/debounce.js":
/*!*****************************************!*\
  !*** ./node_modules/lodash/debounce.js ***!
  \*****************************************/
/***/ (function(module, __unused_webpack_exports, __webpack_require__) {

var isObject = __webpack_require__(/*! ./isObject */ "./node_modules/lodash/isObject.js"),
    now = __webpack_require__(/*! ./now */ "./node_modules/lodash/now.js"),
    toNumber = __webpack_require__(/*! ./toNumber */ "./node_modules/lodash/toNumber.js");
/** Error message constants. */


var FUNC_ERROR_TEXT = 'Expected a function';
/* Built-in method references for those with the same name as other `lodash` methods. */

var nativeMax = Math.max,
    nativeMin = Math.min;
/**
 * Creates a debounced function that delays invoking `func` until after `wait`
 * milliseconds have elapsed since the last time the debounced function was
 * invoked. The debounced function comes with a `cancel` method to cancel
 * delayed `func` invocations and a `flush` method to immediately invoke them.
 * Provide `options` to indicate whether `func` should be invoked on the
 * leading and/or trailing edge of the `wait` timeout. The `func` is invoked
 * with the last arguments provided to the debounced function. Subsequent
 * calls to the debounced function return the result of the last `func`
 * invocation.
 *
 * **Note:** If `leading` and `trailing` options are `true`, `func` is
 * invoked on the trailing edge of the timeout only if the debounced function
 * is invoked more than once during the `wait` timeout.
 *
 * If `wait` is `0` and `leading` is `false`, `func` invocation is deferred
 * until to the next tick, similar to `setTimeout` with a timeout of `0`.
 *
 * See [David Corbacho's article](https://css-tricks.com/debouncing-throttling-explained-examples/)
 * for details over the differences between `_.debounce` and `_.throttle`.
 *
 * @static
 * @memberOf _
 * @since 0.1.0
 * @category Function
 * @param {Function} func The function to debounce.
 * @param {number} [wait=0] The number of milliseconds to delay.
 * @param {Object} [options={}] The options object.
 * @param {boolean} [options.leading=false]
 *  Specify invoking on the leading edge of the timeout.
 * @param {number} [options.maxWait]
 *  The maximum time `func` is allowed to be delayed before it's invoked.
 * @param {boolean} [options.trailing=true]
 *  Specify invoking on the trailing edge of the timeout.
 * @returns {Function} Returns the new debounced function.
 * @example
 *
 * // Avoid costly calculations while the window size is in flux.
 * jQuery(window).on('resize', _.debounce(calculateLayout, 150));
 *
 * // Invoke `sendMail` when clicked, debouncing subsequent calls.
 * jQuery(element).on('click', _.debounce(sendMail, 300, {
 *   'leading': true,
 *   'trailing': false
 * }));
 *
 * // Ensure `batchLog` is invoked once after 1 second of debounced calls.
 * var debounced = _.debounce(batchLog, 250, { 'maxWait': 1000 });
 * var source = new EventSource('/stream');
 * jQuery(source).on('message', debounced);
 *
 * // Cancel the trailing debounced invocation.
 * jQuery(window).on('popstate', debounced.cancel);
 */

function debounce(func, wait, options) {
  var lastArgs,
      lastThis,
      maxWait,
      result,
      timerId,
      lastCallTime,
      lastInvokeTime = 0,
      leading = false,
      maxing = false,
      trailing = true;

  if (typeof func != 'function') {
    throw new TypeError(FUNC_ERROR_TEXT);
  }

  wait = toNumber(wait) || 0;

  if (isObject(options)) {
    leading = !!options.leading;
    maxing = 'maxWait' in options;
    maxWait = maxing ? nativeMax(toNumber(options.maxWait) || 0, wait) : maxWait;
    trailing = 'trailing' in options ? !!options.trailing : trailing;
  }

  function invokeFunc(time) {
    var args = lastArgs,
        thisArg = lastThis;
    lastArgs = lastThis = undefined;
    lastInvokeTime = time;
    result = func.apply(thisArg, args);
    return result;
  }

  function leadingEdge(time) {
    // Reset any `maxWait` timer.
    lastInvokeTime = time; // Start the timer for the trailing edge.

    timerId = setTimeout(timerExpired, wait); // Invoke the leading edge.

    return leading ? invokeFunc(time) : result;
  }

  function remainingWait(time) {
    var timeSinceLastCall = time - lastCallTime,
        timeSinceLastInvoke = time - lastInvokeTime,
        timeWaiting = wait - timeSinceLastCall;
    return maxing ? nativeMin(timeWaiting, maxWait - timeSinceLastInvoke) : timeWaiting;
  }

  function shouldInvoke(time) {
    var timeSinceLastCall = time - lastCallTime,
        timeSinceLastInvoke = time - lastInvokeTime; // Either this is the first call, activity has stopped and we're at the
    // trailing edge, the system time has gone backwards and we're treating
    // it as the trailing edge, or we've hit the `maxWait` limit.

    return lastCallTime === undefined || timeSinceLastCall >= wait || timeSinceLastCall < 0 || maxing && timeSinceLastInvoke >= maxWait;
  }

  function timerExpired() {
    var time = now();

    if (shouldInvoke(time)) {
      return trailingEdge(time);
    } // Restart the timer.


    timerId = setTimeout(timerExpired, remainingWait(time));
  }

  function trailingEdge(time) {
    timerId = undefined; // Only invoke if we have `lastArgs` which means `func` has been
    // debounced at least once.

    if (trailing && lastArgs) {
      return invokeFunc(time);
    }

    lastArgs = lastThis = undefined;
    return result;
  }

  function cancel() {
    if (timerId !== undefined) {
      clearTimeout(timerId);
    }

    lastInvokeTime = 0;
    lastArgs = lastCallTime = lastThis = timerId = undefined;
  }

  function flush() {
    return timerId === undefined ? result : trailingEdge(now());
  }

  function debounced() {
    var time = now(),
        isInvoking = shouldInvoke(time);
    lastArgs = arguments;
    lastThis = this;
    lastCallTime = time;

    if (isInvoking) {
      if (timerId === undefined) {
        return leadingEdge(lastCallTime);
      }

      if (maxing) {
        // Handle invocations in a tight loop.
        clearTimeout(timerId);
        timerId = setTimeout(timerExpired, wait);
        return invokeFunc(lastCallTime);
      }
    }

    if (timerId === undefined) {
      timerId = setTimeout(timerExpired, wait);
    }

    return result;
  }

  debounced.cancel = cancel;
  debounced.flush = flush;
  return debounced;
}

module.exports = debounce;

/***/ }),

/***/ "./node_modules/lodash/isObject.js":
/*!*****************************************!*\
  !*** ./node_modules/lodash/isObject.js ***!
  \*****************************************/
/***/ (function(module) {

function _typeof(obj) { "@babel/helpers - typeof"; if (typeof Symbol === "function" && typeof Symbol.iterator === "symbol") { _typeof = function _typeof(obj) { return typeof obj; }; } else { _typeof = function _typeof(obj) { return obj && typeof Symbol === "function" && obj.constructor === Symbol && obj !== Symbol.prototype ? "symbol" : typeof obj; }; } return _typeof(obj); }

/**
 * Checks if `value` is the
 * [language type](http://www.ecma-international.org/ecma-262/7.0/#sec-ecmascript-language-types)
 * of `Object`. (e.g. arrays, functions, objects, regexes, `new Number(0)`, and `new String('')`)
 *
 * @static
 * @memberOf _
 * @since 0.1.0
 * @category Lang
 * @param {*} value The value to check.
 * @returns {boolean} Returns `true` if `value` is an object, else `false`.
 * @example
 *
 * _.isObject({});
 * // => true
 *
 * _.isObject([1, 2, 3]);
 * // => true
 *
 * _.isObject(_.noop);
 * // => true
 *
 * _.isObject(null);
 * // => false
 */
function isObject(value) {
  var type = _typeof(value);

  return value != null && (type == 'object' || type == 'function');
}

module.exports = isObject;

/***/ }),

/***/ "./node_modules/lodash/isObjectLike.js":
/*!*********************************************!*\
  !*** ./node_modules/lodash/isObjectLike.js ***!
  \*********************************************/
/***/ (function(module) {

function _typeof(obj) { "@babel/helpers - typeof"; if (typeof Symbol === "function" && typeof Symbol.iterator === "symbol") { _typeof = function _typeof(obj) { return typeof obj; }; } else { _typeof = function _typeof(obj) { return obj && typeof Symbol === "function" && obj.constructor === Symbol && obj !== Symbol.prototype ? "symbol" : typeof obj; }; } return _typeof(obj); }

/**
 * Checks if `value` is object-like. A value is object-like if it's not `null`
 * and has a `typeof` result of "object".
 *
 * @static
 * @memberOf _
 * @since 4.0.0
 * @category Lang
 * @param {*} value The value to check.
 * @returns {boolean} Returns `true` if `value` is object-like, else `false`.
 * @example
 *
 * _.isObjectLike({});
 * // => true
 *
 * _.isObjectLike([1, 2, 3]);
 * // => true
 *
 * _.isObjectLike(_.noop);
 * // => false
 *
 * _.isObjectLike(null);
 * // => false
 */
function isObjectLike(value) {
  return value != null && _typeof(value) == 'object';
}

module.exports = isObjectLike;

/***/ }),

/***/ "./node_modules/lodash/isSymbol.js":
/*!*****************************************!*\
  !*** ./node_modules/lodash/isSymbol.js ***!
  \*****************************************/
/***/ (function(module, __unused_webpack_exports, __webpack_require__) {

function _typeof(obj) { "@babel/helpers - typeof"; if (typeof Symbol === "function" && typeof Symbol.iterator === "symbol") { _typeof = function _typeof(obj) { return typeof obj; }; } else { _typeof = function _typeof(obj) { return obj && typeof Symbol === "function" && obj.constructor === Symbol && obj !== Symbol.prototype ? "symbol" : typeof obj; }; } return _typeof(obj); }

var baseGetTag = __webpack_require__(/*! ./_baseGetTag */ "./node_modules/lodash/_baseGetTag.js"),
    isObjectLike = __webpack_require__(/*! ./isObjectLike */ "./node_modules/lodash/isObjectLike.js");
/** `Object#toString` result references. */


var symbolTag = '[object Symbol]';
/**
 * Checks if `value` is classified as a `Symbol` primitive or object.
 *
 * @static
 * @memberOf _
 * @since 4.0.0
 * @category Lang
 * @param {*} value The value to check.
 * @returns {boolean} Returns `true` if `value` is a symbol, else `false`.
 * @example
 *
 * _.isSymbol(Symbol.iterator);
 * // => true
 *
 * _.isSymbol('abc');
 * // => false
 */

function isSymbol(value) {
  return _typeof(value) == 'symbol' || isObjectLike(value) && baseGetTag(value) == symbolTag;
}

module.exports = isSymbol;

/***/ }),

/***/ "./node_modules/lodash/now.js":
/*!************************************!*\
  !*** ./node_modules/lodash/now.js ***!
  \************************************/
/***/ (function(module, __unused_webpack_exports, __webpack_require__) {

var root = __webpack_require__(/*! ./_root */ "./node_modules/lodash/_root.js");
/**
 * Gets the timestamp of the number of milliseconds that have elapsed since
 * the Unix epoch (1 January 1970 00:00:00 UTC).
 *
 * @static
 * @memberOf _
 * @since 2.4.0
 * @category Date
 * @returns {number} Returns the timestamp.
 * @example
 *
 * _.defer(function(stamp) {
 *   console.log(_.now() - stamp);
 * }, _.now());
 * // => Logs the number of milliseconds it took for the deferred invocation.
 */


var now = function now() {
  return root.Date.now();
};

module.exports = now;

/***/ }),

/***/ "./node_modules/lodash/toNumber.js":
/*!*****************************************!*\
  !*** ./node_modules/lodash/toNumber.js ***!
  \*****************************************/
/***/ (function(module, __unused_webpack_exports, __webpack_require__) {

var baseTrim = __webpack_require__(/*! ./_baseTrim */ "./node_modules/lodash/_baseTrim.js"),
    isObject = __webpack_require__(/*! ./isObject */ "./node_modules/lodash/isObject.js"),
    isSymbol = __webpack_require__(/*! ./isSymbol */ "./node_modules/lodash/isSymbol.js");
/** Used as references for various `Number` constants. */


var NAN = 0 / 0;
/** Used to detect bad signed hexadecimal string values. */

var reIsBadHex = /^[-+]0x[0-9a-f]+$/i;
/** Used to detect binary string values. */

var reIsBinary = /^0b[01]+$/i;
/** Used to detect octal string values. */

var reIsOctal = /^0o[0-7]+$/i;
/** Built-in method references without a dependency on `root`. */

var freeParseInt = parseInt;
/**
 * Converts `value` to a number.
 *
 * @static
 * @memberOf _
 * @since 4.0.0
 * @category Lang
 * @param {*} value The value to process.
 * @returns {number} Returns the number.
 * @example
 *
 * _.toNumber(3.2);
 * // => 3.2
 *
 * _.toNumber(Number.MIN_VALUE);
 * // => 5e-324
 *
 * _.toNumber(Infinity);
 * // => Infinity
 *
 * _.toNumber('3.2');
 * // => 3.2
 */

function toNumber(value) {
  if (typeof value == 'number') {
    return value;
  }

  if (isSymbol(value)) {
    return NAN;
  }

  if (isObject(value)) {
    var other = typeof value.valueOf == 'function' ? value.valueOf() : value;
    value = isObject(other) ? other + '' : other;
  }

  if (typeof value != 'string') {
    return value === 0 ? value : +value;
  }

  value = baseTrim(value);
  var isBinary = reIsBinary.test(value);
  return isBinary || reIsOctal.test(value) ? freeParseInt(value.slice(2), isBinary ? 2 : 8) : reIsBadHex.test(value) ? NAN : +value;
}

module.exports = toNumber;

/***/ }),

/***/ "?34aa":
/*!******************************!*\
  !*** min-document (ignored) ***!
  \******************************/
/***/ (function() {

/* (ignored) */

/***/ })

/******/ 	});
/************************************************************************/
/******/ 	// The module cache
/******/ 	var __webpack_module_cache__ = {};
/******/ 	
/******/ 	// The require function
/******/ 	function __webpack_require__(moduleId) {
/******/ 		// Check if module is in cache
/******/ 		var cachedModule = __webpack_module_cache__[moduleId];
/******/ 		if (cachedModule !== undefined) {
/******/ 			return cachedModule.exports;
/******/ 		}
/******/ 		// Create a new module (and put it into the cache)
/******/ 		var module = __webpack_module_cache__[moduleId] = {
/******/ 			id: moduleId,
/******/ 			loaded: false,
/******/ 			exports: {}
/******/ 		};
/******/ 	
/******/ 		// Execute the module function
/******/ 		__webpack_modules__[moduleId].call(module.exports, module, module.exports, __webpack_require__);
/******/ 	
/******/ 		// Flag the module as loaded
/******/ 		module.loaded = true;
/******/ 	
/******/ 		// Return the exports of the module
/******/ 		return module.exports;
/******/ 	}
/******/ 	
/************************************************************************/
/******/ 	/* webpack/runtime/compat get default export */
/******/ 	!function() {
/******/ 		// getDefaultExport function for compatibility with non-harmony modules
/******/ 		__webpack_require__.n = function(module) {
/******/ 			var getter = module && module.__esModule ?
/******/ 				function() { return module['default']; } :
/******/ 				function() { return module; };
/******/ 			__webpack_require__.d(getter, { a: getter });
/******/ 			return getter;
/******/ 		};
/******/ 	}();
/******/ 	
/******/ 	/* webpack/runtime/define property getters */
/******/ 	!function() {
/******/ 		// define getter functions for harmony exports
/******/ 		__webpack_require__.d = function(exports, definition) {
/******/ 			for(var key in definition) {
/******/ 				if(__webpack_require__.o(definition, key) && !__webpack_require__.o(exports, key)) {
/******/ 					Object.defineProperty(exports, key, { enumerable: true, get: definition[key] });
/******/ 				}
/******/ 			}
/******/ 		};
/******/ 	}();
/******/ 	
/******/ 	/* webpack/runtime/global */
/******/ 	!function() {
/******/ 		__webpack_require__.g = (function() {
/******/ 			if (typeof globalThis === 'object') return globalThis;
/******/ 			try {
/******/ 				return this || new Function('return this')();
/******/ 			} catch (e) {
/******/ 				if (typeof window === 'object') return window;
/******/ 			}
/******/ 		})();
/******/ 	}();
/******/ 	
/******/ 	/* webpack/runtime/hasOwnProperty shorthand */
/******/ 	!function() {
/******/ 		__webpack_require__.o = function(obj, prop) { return Object.prototype.hasOwnProperty.call(obj, prop); }
/******/ 	}();
/******/ 	
/******/ 	/* webpack/runtime/make namespace object */
/******/ 	!function() {
/******/ 		// define __esModule on exports
/******/ 		__webpack_require__.r = function(exports) {
/******/ 			if(typeof Symbol !== 'undefined' && Symbol.toStringTag) {
/******/ 				Object.defineProperty(exports, Symbol.toStringTag, { value: 'Module' });
/******/ 			}
/******/ 			Object.defineProperty(exports, '__esModule', { value: true });
/******/ 		};
/******/ 	}();
/******/ 	
/******/ 	/* webpack/runtime/node module decorator */
/******/ 	!function() {
/******/ 		__webpack_require__.nmd = function(module) {
/******/ 			module.paths = [];
/******/ 			if (!module.children) module.children = [];
/******/ 			return module;
/******/ 		};
/******/ 	}();
/******/ 	
/************************************************************************/
var __webpack_exports__ = {};
// This entry need to be wrapped in an IIFE because it need to be in strict mode.
!function() {
"use strict";
/*!************************************************************************************************!*\
  !*** ./cartridges/app_mk_storefront/cartridge/client/default/js/nonCriticalCheckoutScripts.js ***!
  \************************************************************************************************/


var processInclude = __webpack_require__(/*! ./util */ "./cartridges/app_mk_storefront/cartridge/client/default/js/util.js");
/**
    Load scripts
    on the existence of selectors
    @param {string} $selector - selector
    @returns {Object} Promise
 */


var loadScript = function loadScript($selector) {
  return new Promise(function (resolve, reject) {
    if ($selector.length > 0) {
      resolve('flaged the script to process');
    } else {
      reject('No Scripts Loaded');
    }
  });
}; // Not loading the script modules in checkout page those are non critical to checkout.


$(document).ready(function () {
  loadScript($('.rfk-carousel')).then(processInclude(__webpack_require__(/*! ./product/reflektionCarousel */ "./cartridges/app_mk_storefront/cartridge/client/default/js/product/reflektionCarousel.js"))).catch(function () {
    return console.log('No Scripts to Process found');
  } // eslint-disable-line no-console
  );
  processInclude(__webpack_require__(/*! plugin_instorepickup_custom/product/pdpInstoreInventory */ "../../capri-core-sfcc/src/integrations/plugin_instorepickup/cartridges/plugin_instorepickup_custom/cartridge/client/default/js/product/pdpInstoreInventory.js"));
  processInclude(__webpack_require__(/*! ./experience/components/commerceLayouts/carouselCustom */ "./cartridges/app_mk_storefront/cartridge/client/default/js/experience/components/commerceLayouts/carouselCustom.js"));
  processInclude(__webpack_require__(/*! ./experience/components/commerceAssets/countDownClock */ "./cartridges/app_mk_storefront/cartridge/client/default/js/experience/components/commerceAssets/countDownClock.js"));
  processInclude(__webpack_require__(/*! ./experience/components/commerceAssets/parallax */ "./cartridges/app_mk_storefront/cartridge/client/default/js/experience/components/commerceAssets/parallax.js"));
  loadScript($('.mk-video-playerl')).then(processInclude(__webpack_require__(/*! ./experience/components/commerceAssets/brightcovePlayer */ "./cartridges/app_mk_storefront/cartridge/client/default/js/experience/components/commerceAssets/brightcovePlayer.js"))).catch(function () {
    return console.log('No Scripts to Process found');
  } // eslint-disable-line no-console
  );
});
}();
/******/ })()
;
//# sourceMappingURL=nonCriticalCheckoutScripts.js.map